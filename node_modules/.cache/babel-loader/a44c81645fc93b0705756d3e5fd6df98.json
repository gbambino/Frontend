{"ast":null,"code":"var _jsxFileName = \"/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Home/components/FarmStakingCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit';\nimport { harvestFarm } from 'utils/calls';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTranslation } from 'contexts/Localization';\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance';\nimport { useMasterchef } from 'hooks/useContract';\nimport useToast from 'hooks/useToast';\nimport UnlockButton from 'components/UnlockButton';\nimport CakeHarvestBalance from './CakeHarvestBalance';\nimport CakeWalletBalance from './CakeWalletBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/emblem.png');\n  background-repeat: no-repeat;\n  background-position: right center;\n  min-height: 376px;\n  background-size:80% 100%;\n`;\n_c = StyledFarmStakingCard;\nconst Block = styled.div`\n  margin-bottom: 16px;\n`;\n_c2 = Block;\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`;\n_c3 = CardImage;\nconst Label = styled.div`\n  color: ${({\n  theme\n}) => theme.colors.textSubtle};\n  font-size: 14px;\n`;\n_c4 = Label;\nconst Actions = styled.div`\n  margin-top: 24px;\n`;\n_c5 = Actions;\n\nconst FarmedStakingCard = () => {\n  _s();\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastError\n  } = useToast();\n  const farmsWithBalance = useFarmsWithBalance();\n  const masterChefContract = useMasterchef();\n  const balancesWithValue = farmsWithBalance.filter(balanceType => balanceType.balance.gt(0));\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true); // eslint-disable-next-line no-restricted-syntax\n\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvestFarm(masterChefContract, farmWithBalance.pid);\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      }\n    }\n\n    setPendingTx(false);\n  }, [balancesWithValue, masterChefContract, toastError, t]);\n  return /*#__PURE__*/_jsxDEV(StyledFarmStakingCard, {\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"xl\",\n        mb: \"24px\",\n        children: t('Farms & Staking')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardImage, {\n        src: \"/images/toco.png\",\n        alt: \"cake logo\",\n        width: 64,\n        height: 64\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Block, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: [t('TOCO to Harvest'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CakeHarvestBalance, {\n          farmsWithBalance: balancesWithValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Block, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: [t('TOCO in Wallet'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CakeWalletBalance, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Actions, {\n        children: account ? /*#__PURE__*/_jsxDEV(Button, {\n          id: \"harvest-all\",\n          disabled: balancesWithValue.length <= 0 || pendingTx,\n          onClick: harvestAllFarms,\n          width: \"100%\",\n          children: pendingTx ? t('Collecting TOCO') : t('Harvest all (%count%)', {\n            count: balancesWithValue.length\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(UnlockButton, {\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FarmedStakingCard, \"UA07Zf/LGN6P5jOAUpqNzZgwvBA=\", false, function () {\n  return [useWeb3React, useTranslation, useToast, useFarmsWithBalance, useMasterchef];\n});\n\n_c6 = FarmedStakingCard;\nexport default FarmedStakingCard;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"StyledFarmStakingCard\");\n$RefreshReg$(_c2, \"Block\");\n$RefreshReg$(_c3, \"CardImage\");\n$RefreshReg$(_c4, \"Label\");\n$RefreshReg$(_c5, \"Actions\");\n$RefreshReg$(_c6, \"FarmedStakingCard\");","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Home/components/FarmStakingCard.tsx"],"names":["React","useState","useCallback","styled","Heading","Card","CardBody","Button","harvestFarm","useWeb3React","useTranslation","useFarmsWithBalance","useMasterchef","useToast","UnlockButton","CakeHarvestBalance","CakeWalletBalance","StyledFarmStakingCard","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","account","t","toastError","farmsWithBalance","masterChefContract","balancesWithValue","filter","balanceType","balance","gt","harvestAllFarms","farmWithBalance","pid","error","length","count"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { harvestFarm } from 'utils/calls'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/emblem.png');\n  background-repeat: no-repeat;\n  background-position: right center;\n  min-height: 376px;\n  background-size:80% 100%;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvestFarm(masterChefContract, farmWithBalance.pid)\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    }\n    setPendingTx(false)\n  }, [balancesWithValue, masterChefContract, toastError, t])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/toco.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('TOCO to Harvest')}:</Label>\n          <CakeHarvestBalance farmsWithBalance={balancesWithValue} />\n        </Block>\n        <Block>\n          <Label>{t('TOCO in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting TOCO')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n"]},"metadata":{},"sourceType":"module"}