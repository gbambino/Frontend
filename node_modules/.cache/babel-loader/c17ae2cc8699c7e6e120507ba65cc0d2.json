{"ast":null,"code":"import _taggedTemplateLiteral from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import styled from'styled-components';import{Box,CardBody,Flex,Text,useMatchBreakpoints}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useWeb3React}from'@web3-react/core';import UnlockButton from'components/UnlockButton';import tokens from'config/constants/tokens';import{useCakeVault}from'state/hooks';import AprRow from'../PoolCard/AprRow';import{StyledCard,StyledCardInner}from'../PoolCard/StyledCard';import CardFooter from'../PoolCard/CardFooter';import StyledCardHeader from'../PoolCard/StyledCardHeader';import VaultCardActions from'./VaultCardActions';import UnstakingFeeCountdownRow from'./UnstakingFeeCountdownRow';import RecentCakeProfitRow from'./RecentCakeProfitRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCardBody=styled(CardBody)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  min-height: \",\";\\n\"])),function(_ref){var isLoading=_ref.isLoading;return isLoading?'0':'254px';});var CakeVaultCard=function CakeVaultCard(_ref2){var pool=_ref2.pool,showStakedOnly=_ref2.showStakedOnly;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useMatchBreakpoints=useMatchBreakpoints(),isXl=_useMatchBreakpoints.isXl;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useCakeVault=useCakeVault(),_useCakeVault$userDat=_useCakeVault.userData,userShares=_useCakeVault$userDat.userShares,isVaultUserDataLoading=_useCakeVault$userDat.isLoading,performanceFee=_useCakeVault.fees.performanceFee;var accountHasSharesStaked=userShares&&userShares.gt(0);var isLoading=!pool.userData||isVaultUserDataLoading;var performanceFeeAsDecimal=performanceFee&&performanceFee/100;if(showStakedOnly&&!accountHasSharesStaked){return null;}return/*#__PURE__*/_jsx(StyledCard,{isPromoted:{isDesktop:isXl},children:/*#__PURE__*/_jsxs(StyledCardInner,{children:[/*#__PURE__*/_jsx(StyledCardHeader,{isStaking:accountHasSharesStaked,isAutoVault:true,earningToken:tokens.cake,stakingToken:tokens.cake}),/*#__PURE__*/_jsxs(StyledCardBody,{isLoading:isLoading,children:[/*#__PURE__*/_jsx(AprRow,{pool:pool,performanceFee:performanceFeeAsDecimal}),/*#__PURE__*/_jsx(Box,{mt:\"24px\",children:/*#__PURE__*/_jsx(RecentCakeProfitRow,{})}),/*#__PURE__*/_jsx(Box,{mt:\"8px\",children:/*#__PURE__*/_jsx(UnstakingFeeCountdownRow,{})}),/*#__PURE__*/_jsx(Flex,{mt:\"32px\",flexDirection:\"column\",children:account?/*#__PURE__*/_jsx(VaultCardActions,{pool:pool,accountHasSharesStaked:accountHasSharesStaked,isLoading:isLoading}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{mb:\"10px\",textTransform:\"uppercase\",fontSize:\"12px\",color:\"textSubtle\",bold:true,children:t('Start earning')}),/*#__PURE__*/_jsx(UnlockButton,{})]})})]}),/*#__PURE__*/_jsx(CardFooter,{pool:pool,account:account})]})});};export default CakeVaultCard;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Pools/components/CakeVaultCard/index.tsx"],"names":["React","styled","Box","CardBody","Flex","Text","useMatchBreakpoints","useTranslation","useWeb3React","UnlockButton","tokens","useCakeVault","AprRow","StyledCard","StyledCardInner","CardFooter","StyledCardHeader","VaultCardActions","UnstakingFeeCountdownRow","RecentCakeProfitRow","StyledCardBody","isLoading","CakeVaultCard","pool","showStakedOnly","t","isXl","account","userData","userShares","isVaultUserDataLoading","performanceFee","fees","accountHasSharesStaked","gt","performanceFeeAsDecimal","isDesktop","cake"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Box, CardBody, Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard isPromoted={{ isDesktop: isXl }}>\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningToken={tokens.cake}\n          stakingToken={tokens.cake}\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"32px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n"]},"metadata":{},"sourceType":"module"}