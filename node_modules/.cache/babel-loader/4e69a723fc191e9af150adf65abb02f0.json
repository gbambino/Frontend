{"ast":null,"code":"var _jsxFileName = \"/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Lottery/components/RewardBrackets.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Flex, Text } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\nimport RewardBracketDetail from './RewardBracketDetail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(Flex)`\n  width: 100%;\n  flex-direction: column;\n`;\n_c = Wrapper;\nconst RewardsInner = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n  row-gap: 16px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n_c2 = RewardsInner;\n\nconst RewardBrackets = ({\n  lotteryData,\n  isHistoricRound\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    treasuryFee,\n    amountCollectedInCake,\n    rewardsBreakdown,\n    countWinnersPerBracket\n  } = lotteryData;\n  const feeAsPercentage = new BigNumber(treasuryFee).div(100);\n  const cakeToBurn = feeAsPercentage.div(100).times(new BigNumber(amountCollectedInCake));\n  const amountLessTreasuryFee = new BigNumber(amountCollectedInCake).minus(cakeToBurn);\n\n  const getCakeRewards = bracket => {\n    const shareAsPercentage = new BigNumber(rewardsBreakdown[bracket]).div(100);\n    return amountLessTreasuryFee.div(100).times(shareAsPercentage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"14px\",\n      mb: \"24px\",\n      children: [t('Match the winning number in the same order to share prizes.'), ' ', !isHistoricRound && t('Current prizes up for grabs:')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RewardsInner, {\n      children: [/*#__PURE__*/_jsxDEV(RewardBracketDetail, {\n        rewardBracket: 5,\n        cakeAmount: getCakeRewards(5),\n        numberWinners: countWinnersPerBracket[5],\n        isHistoricRound: isHistoricRound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RewardBracketDetail, {\n        rewardBracket: 4,\n        cakeAmount: getCakeRewards(4),\n        numberWinners: countWinnersPerBracket[4],\n        isHistoricRound: isHistoricRound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RewardBracketDetail, {\n        rewardBracket: 3,\n        cakeAmount: getCakeRewards(3),\n        numberWinners: countWinnersPerBracket[3],\n        isHistoricRound: isHistoricRound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RewardBracketDetail, {\n        rewardBracket: 2,\n        cakeAmount: getCakeRewards(2),\n        numberWinners: countWinnersPerBracket[2],\n        isHistoricRound: isHistoricRound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RewardBracketDetail, {\n        rewardBracket: 1,\n        cakeAmount: getCakeRewards(1),\n        numberWinners: countWinnersPerBracket[1],\n        isHistoricRound: isHistoricRound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RewardBracketDetail, {\n        rewardBracket: 0,\n        cakeAmount: getCakeRewards(0),\n        numberWinners: countWinnersPerBracket[0],\n        isHistoricRound: isHistoricRound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RewardBracketDetail, {\n        rewardBracket: 0,\n        cakeAmount: cakeToBurn,\n        isBurn: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RewardBrackets, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c3 = RewardBrackets;\nexport default RewardBrackets;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"RewardsInner\");\n$RefreshReg$(_c3, \"RewardBrackets\");","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Lottery/components/RewardBrackets.tsx"],"names":["React","BigNumber","Flex","Text","styled","useTranslation","RewardBracketDetail","Wrapper","RewardsInner","div","theme","mediaQueries","sm","RewardBrackets","lotteryData","isHistoricRound","t","treasuryFee","amountCollectedInCake","rewardsBreakdown","countWinnersPerBracket","feeAsPercentage","cakeToBurn","times","amountLessTreasuryFee","minus","getCakeRewards","bracket","shareAsPercentage"],"mappings":"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","sourcesContent":["import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryRound } from 'state/types'\nimport RewardBracketDetail from './RewardBracketDetail'\n\nconst Wrapper = styled(Flex)`\n  width: 100%;\n  flex-direction: column;\n`\n\nconst RewardsInner = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n  row-gap: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`\n\ninterface RewardMatchesProps {\n  lotteryData: LotteryRound\n  isHistoricRound?: boolean\n}\n\nconst RewardBrackets: React.FC<RewardMatchesProps> = ({ lotteryData, isHistoricRound }) => {\n  const { t } = useTranslation()\n  const { treasuryFee, amountCollectedInCake, rewardsBreakdown, countWinnersPerBracket } = lotteryData\n\n  const feeAsPercentage = new BigNumber(treasuryFee).div(100)\n  const cakeToBurn = feeAsPercentage.div(100).times(new BigNumber(amountCollectedInCake))\n  const amountLessTreasuryFee = new BigNumber(amountCollectedInCake).minus(cakeToBurn)\n\n  const getCakeRewards = (bracket: number) => {\n    const shareAsPercentage = new BigNumber(rewardsBreakdown[bracket]).div(100)\n    return amountLessTreasuryFee.div(100).times(shareAsPercentage)\n  }\n\n  return (\n    <Wrapper>\n      <Text fontSize=\"14px\" mb=\"24px\">\n        {t('Match the winning number in the same order to share prizes.')}{' '}\n        {!isHistoricRound && t('Current prizes up for grabs:')}\n      </Text>\n      <RewardsInner>\n        <RewardBracketDetail\n          rewardBracket={5}\n          cakeAmount={getCakeRewards(5)}\n          numberWinners={countWinnersPerBracket[5]}\n          isHistoricRound={isHistoricRound}\n        />\n        <RewardBracketDetail\n          rewardBracket={4}\n          cakeAmount={getCakeRewards(4)}\n          numberWinners={countWinnersPerBracket[4]}\n          isHistoricRound={isHistoricRound}\n        />\n        <RewardBracketDetail\n          rewardBracket={3}\n          cakeAmount={getCakeRewards(3)}\n          numberWinners={countWinnersPerBracket[3]}\n          isHistoricRound={isHistoricRound}\n        />\n        <RewardBracketDetail\n          rewardBracket={2}\n          cakeAmount={getCakeRewards(2)}\n          numberWinners={countWinnersPerBracket[2]}\n          isHistoricRound={isHistoricRound}\n        />\n        <RewardBracketDetail\n          rewardBracket={1}\n          cakeAmount={getCakeRewards(1)}\n          numberWinners={countWinnersPerBracket[1]}\n          isHistoricRound={isHistoricRound}\n        />\n        <RewardBracketDetail\n          rewardBracket={0}\n          cakeAmount={getCakeRewards(0)}\n          numberWinners={countWinnersPerBracket[0]}\n          isHistoricRound={isHistoricRound}\n        />\n        <RewardBracketDetail rewardBracket={0} cakeAmount={cakeToBurn} isBurn />\n      </RewardsInner>\n    </Wrapper>\n  )\n}\n\nexport default RewardBrackets\n"]},"metadata":{},"sourceType":"module"}