{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { request, gql } from 'graphql-request';\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints';\nimport { LotteryStatus } from 'config/constants/types';\nimport lotteryV2Abi from 'config/abi/lotteryV2.json';\nimport { getLotteryV2Address } from 'utils/addressHelpers';\nimport { multicallv2 } from 'utils/multicall';\nimport { getLotteryV2Contract } from 'utils/contractHelpers';\nimport { useMemo } from 'react';\nimport { ethersToSerializedBigNumber } from 'utils/bigNumber';\nconst lotteryContract = getLotteryV2Contract();\nexport const fetchLottery = async lotteryId => {\n  try {\n    const lotteryData = await lotteryContract.viewLottery(lotteryId);\n    const {\n      status,\n      startTime,\n      endTime,\n      priceTicketInCake,\n      discountDivisor,\n      treasuryFee,\n      firstTicketId,\n      lastTicketId,\n      amountCollectedInCake,\n      finalNumber,\n      cakePerBracket,\n      countWinnersPerBracket,\n      rewardsBreakdown\n    } = lotteryData;\n    const statusKey = Object.keys(LotteryStatus)[status];\n    const serializedCakePerBracket = cakePerBracket.map(cakeInBracket => ethersToSerializedBigNumber(cakeInBracket));\n    const serializedCountWinnersPerBracket = countWinnersPerBracket.map(winnersInBracket => ethersToSerializedBigNumber(winnersInBracket));\n    const serializedRewardsBreakdown = rewardsBreakdown.map(reward => ethersToSerializedBigNumber(reward));\n    return {\n      isLoading: false,\n      status: LotteryStatus[statusKey],\n      startTime: startTime === null || startTime === void 0 ? void 0 : startTime.toString(),\n      endTime: endTime === null || endTime === void 0 ? void 0 : endTime.toString(),\n      priceTicketInCake: ethersToSerializedBigNumber(priceTicketInCake),\n      discountDivisor: discountDivisor === null || discountDivisor === void 0 ? void 0 : discountDivisor.toString(),\n      treasuryFee: treasuryFee === null || treasuryFee === void 0 ? void 0 : treasuryFee.toString(),\n      firstTicketId: firstTicketId === null || firstTicketId === void 0 ? void 0 : firstTicketId.toString(),\n      lastTicketId: lastTicketId === null || lastTicketId === void 0 ? void 0 : lastTicketId.toString(),\n      amountCollectedInCake: ethersToSerializedBigNumber(amountCollectedInCake),\n      finalNumber,\n      cakePerBracket: serializedCakePerBracket,\n      countWinnersPerBracket: serializedCountWinnersPerBracket,\n      rewardsBreakdown: serializedRewardsBreakdown\n    };\n  } catch (error) {\n    return {\n      isLoading: true,\n      status: LotteryStatus.PENDING,\n      startTime: '',\n      endTime: '',\n      priceTicketInCake: '',\n      discountDivisor: '',\n      treasuryFee: '',\n      firstTicketId: '',\n      lastTicketId: '',\n      amountCollectedInCake: '',\n      finalNumber: null,\n      cakePerBracket: [],\n      countWinnersPerBracket: [],\n      rewardsBreakdown: []\n    };\n  }\n};\nexport const fetchCurrentLotteryIdAndMaxBuy = async () => {\n  try {\n    const calls = ['currentLotteryId', 'maxNumberTicketsPerBuyOrClaim'].map(method => ({\n      address: getLotteryV2Address(),\n      name: method\n    }));\n    const [[currentLotteryId], [maxNumberTicketsPerBuyOrClaim]] = await multicallv2(lotteryV2Abi, calls);\n    return {\n      currentLotteryId: currentLotteryId ? currentLotteryId.toString() : null,\n      maxNumberTicketsPerBuyOrClaim: maxNumberTicketsPerBuyOrClaim ? maxNumberTicketsPerBuyOrClaim.toString() : null\n    };\n  } catch (error) {\n    return {\n      currentLotteryId: null,\n      maxNumberTicketsPerBuyOrClaim: null\n    };\n  }\n};\nexport const processRawTicketsResponse = ticketsResponse => {\n  const [ticketIds, ticketNumbers, ticketStatuses] = ticketsResponse;\n\n  if ((ticketIds === null || ticketIds === void 0 ? void 0 : ticketIds.length) > 0) {\n    return ticketIds.map((ticketId, index) => {\n      return {\n        id: ticketId.toString(),\n        number: ticketNumbers[index].toString(),\n        status: ticketStatuses[index]\n      };\n    });\n  }\n\n  return [];\n};\nexport const getViewUserTicketInfoCalls = (totalTicketsToRequest, account, lotteryId) => {\n  let cursor = 0;\n  const perRequestLimit = 1000;\n  const calls = [];\n\n  for (let i = 0; i < totalTicketsToRequest; i += perRequestLimit) {\n    cursor = i;\n    calls.push({\n      name: 'viewUserInfoForLotteryId',\n      address: getLotteryV2Address(),\n      params: [account, lotteryId, cursor, perRequestLimit]\n    });\n  }\n\n  return calls;\n};\nexport const mergeViewUserTicketInfoMulticallResponse = response => {\n  const mergedMulticallResponse = [[], [], []];\n  response.forEach(ticketResponse => {\n    mergedMulticallResponse[0].push(...ticketResponse[0]);\n    mergedMulticallResponse[1].push(...ticketResponse[1]);\n    mergedMulticallResponse[2].push(...ticketResponse[2]);\n  });\n  return mergedMulticallResponse;\n};\nexport const fetchTickets = async (account, lotteryId, userRoundData) => {\n  // If the subgraph is returning user totalTickets data for the round - use those totalTickets, if not - batch request up to 5000\n  const totalTicketsToRequest = userRoundData ? parseInt(userRoundData === null || userRoundData === void 0 ? void 0 : userRoundData.totalTickets, 10) : 5000;\n  const calls = getViewUserTicketInfoCalls(totalTicketsToRequest, account, lotteryId);\n\n  try {\n    const multicallRes = await multicallv2(lotteryV2Abi, calls, {\n      requireSuccess: false\n    }); // When using a static totalTicketsToRequest value - null responses may be returned\n\n    const filteredForNullResponses = multicallRes.filter(res => res);\n    const mergedMulticallResponse = mergeViewUserTicketInfoMulticallResponse(filteredForNullResponses);\n    const completeTicketData = processRawTicketsResponse(mergedMulticallResponse);\n    return completeTicketData;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\nexport const getGraphLotteries = async () => {\n  const response = await request(GRAPH_API_LOTTERY, gql`\n      query getLotteries {\n        lotteries(first: 100, orderDirection: desc, orderBy: block) {\n          id\n          totalUsers\n          totalTickets\n          status\n          finalNumber\n          winningTickets\n          startTime\n          endTime\n          ticketPrice\n          firstTicket\n          lastTicket\n        }\n      }\n    `);\n  const {\n    lotteries\n  } = response;\n  return lotteries;\n};\nexport const getGraphLotteryUser = async account => {\n  const response = await request(GRAPH_API_LOTTERY, gql`\n      query getUserLotteryData($account: ID!) {\n        user(id: $account) {\n          id\n          totalTickets\n          totalCake\n          rounds(first: 100, orderDirection: desc, orderBy: block) {\n            id\n            lottery {\n              id\n              endTime\n              status\n            }\n            claimed\n            totalTickets\n          }\n        }\n      }\n    `, {\n    account: account.toLowerCase()\n  });\n  const {\n    user\n  } = response; // If no subgraph response - return blank user\n\n  if (!response || !user) {\n    const blankUser = {\n      account,\n      totalCake: '',\n      totalTickets: '',\n      rounds: []\n    };\n    return blankUser;\n  }\n\n  const formattedUser = user && {\n    account: user.id,\n    totalCake: user.totalCake,\n    totalTickets: user.totalTickets,\n    rounds: user.rounds.map(round => {\n      var _round$lottery, _round$lottery2, _round$lottery3;\n\n      return {\n        lotteryId: round === null || round === void 0 ? void 0 : (_round$lottery = round.lottery) === null || _round$lottery === void 0 ? void 0 : _round$lottery.id,\n        endTime: round === null || round === void 0 ? void 0 : (_round$lottery2 = round.lottery) === null || _round$lottery2 === void 0 ? void 0 : _round$lottery2.endTime,\n        claimed: round === null || round === void 0 ? void 0 : round.claimed,\n        totalTickets: round === null || round === void 0 ? void 0 : round.totalTickets,\n        status: round === null || round === void 0 ? void 0 : (_round$lottery3 = round.lottery) === null || _round$lottery3 === void 0 ? void 0 : _round$lottery3.status\n      };\n    })\n  };\n  return formattedUser;\n};\nexport const useProcessLotteryResponse = lotteryData => {\n  _s();\n\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString\n  } = lotteryData;\n  const discountDivisor = useMemo(() => {\n    return new BigNumber(discountDivisorAsString);\n  }, [discountDivisorAsString]);\n  const priceTicketInCake = useMemo(() => {\n    return new BigNumber(priceTicketInCakeAsString);\n  }, [priceTicketInCakeAsString]);\n  const amountCollectedInCake = useMemo(() => {\n    return new BigNumber(amountCollectedInCakeAsString);\n  }, [amountCollectedInCakeAsString]);\n  return {\n    isLoading: lotteryData.isLoading,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown\n  };\n};\n\n_s(useProcessLotteryResponse, \"FnUdVBB2odZtpXQPLId0yuHMXOU=\");","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/state/lottery/helpers.ts"],"names":["BigNumber","request","gql","GRAPH_API_LOTTERY","LotteryStatus","lotteryV2Abi","getLotteryV2Address","multicallv2","getLotteryV2Contract","useMemo","ethersToSerializedBigNumber","lotteryContract","fetchLottery","lotteryId","lotteryData","viewLottery","status","startTime","endTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","statusKey","Object","keys","serializedCakePerBracket","map","cakeInBracket","serializedCountWinnersPerBracket","winnersInBracket","serializedRewardsBreakdown","reward","isLoading","toString","error","PENDING","fetchCurrentLotteryIdAndMaxBuy","calls","method","address","name","currentLotteryId","maxNumberTicketsPerBuyOrClaim","processRawTicketsResponse","ticketsResponse","ticketIds","ticketNumbers","ticketStatuses","length","ticketId","index","id","number","getViewUserTicketInfoCalls","totalTicketsToRequest","account","cursor","perRequestLimit","i","push","params","mergeViewUserTicketInfoMulticallResponse","response","mergedMulticallResponse","forEach","ticketResponse","fetchTickets","userRoundData","parseInt","totalTickets","multicallRes","requireSuccess","filteredForNullResponses","filter","res","completeTicketData","console","getGraphLotteries","lotteries","getGraphLotteryUser","toLowerCase","user","blankUser","totalCake","rounds","formattedUser","round","lottery","claimed","useProcessLotteryResponse","priceTicketInCakeAsString","discountDivisorAsString","amountCollectedInCakeAsString","userTickets"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AAEA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,SAASC,aAAT,QAA6C,wBAA7C;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAUA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,2BAAT,QAA4C,iBAA5C;AAEA,MAAMC,eAAe,GAAGH,oBAAoB,EAA5C;AAEA,OAAO,MAAMI,YAAY,GAAG,MAAOC,SAAP,IAAuD;AACjF,MAAI;AACF,UAAMC,WAAW,GAAG,MAAMH,eAAe,CAACI,WAAhB,CAA4BF,SAA5B,CAA1B;AACA,UAAM;AACJG,MAAAA,MADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,OAHI;AAIJC,MAAAA,iBAJI;AAKJC,MAAAA,eALI;AAMJC,MAAAA,WANI;AAOJC,MAAAA,aAPI;AAQJC,MAAAA,YARI;AASJC,MAAAA,qBATI;AAUJC,MAAAA,WAVI;AAWJC,MAAAA,cAXI;AAYJC,MAAAA,sBAZI;AAaJC,MAAAA;AAbI,QAcFd,WAdJ;AAgBA,UAAMe,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAY3B,aAAZ,EAA2BY,MAA3B,CAAlB;AACA,UAAMgB,wBAAwB,GAAGN,cAAc,CAACO,GAAf,CAAoBC,aAAD,IAAmBxB,2BAA2B,CAACwB,aAAD,CAAjE,CAAjC;AACA,UAAMC,gCAAgC,GAAGR,sBAAsB,CAACM,GAAvB,CAA4BG,gBAAD,IAClE1B,2BAA2B,CAAC0B,gBAAD,CADY,CAAzC;AAGA,UAAMC,0BAA0B,GAAGT,gBAAgB,CAACK,GAAjB,CAAsBK,MAAD,IAAY5B,2BAA2B,CAAC4B,MAAD,CAA5D,CAAnC;AAEA,WAAO;AACLC,MAAAA,SAAS,EAAE,KADN;AAELvB,MAAAA,MAAM,EAAEZ,aAAa,CAACyB,SAAD,CAFhB;AAGLZ,MAAAA,SAAS,EAAEA,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEuB,QAAX,EAHN;AAILtB,MAAAA,OAAO,EAAEA,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEsB,QAAT,EAJJ;AAKLrB,MAAAA,iBAAiB,EAAET,2BAA2B,CAACS,iBAAD,CALzC;AAMLC,MAAAA,eAAe,EAAEA,eAAF,aAAEA,eAAF,uBAAEA,eAAe,CAAEoB,QAAjB,EANZ;AAOLnB,MAAAA,WAAW,EAAEA,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEmB,QAAb,EAPR;AAQLlB,MAAAA,aAAa,EAAEA,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEkB,QAAf,EARV;AASLjB,MAAAA,YAAY,EAAEA,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEiB,QAAd,EATT;AAULhB,MAAAA,qBAAqB,EAAEd,2BAA2B,CAACc,qBAAD,CAV7C;AAWLC,MAAAA,WAXK;AAYLC,MAAAA,cAAc,EAAEM,wBAZX;AAaLL,MAAAA,sBAAsB,EAAEQ,gCAbnB;AAcLP,MAAAA,gBAAgB,EAAES;AAdb,KAAP;AAgBD,GAzCD,CAyCE,OAAOI,KAAP,EAAc;AACd,WAAO;AACLF,MAAAA,SAAS,EAAE,IADN;AAELvB,MAAAA,MAAM,EAAEZ,aAAa,CAACsC,OAFjB;AAGLzB,MAAAA,SAAS,EAAE,EAHN;AAILC,MAAAA,OAAO,EAAE,EAJJ;AAKLC,MAAAA,iBAAiB,EAAE,EALd;AAMLC,MAAAA,eAAe,EAAE,EANZ;AAOLC,MAAAA,WAAW,EAAE,EAPR;AAQLC,MAAAA,aAAa,EAAE,EARV;AASLC,MAAAA,YAAY,EAAE,EATT;AAULC,MAAAA,qBAAqB,EAAE,EAVlB;AAWLC,MAAAA,WAAW,EAAE,IAXR;AAYLC,MAAAA,cAAc,EAAE,EAZX;AAaLC,MAAAA,sBAAsB,EAAE,EAbnB;AAcLC,MAAAA,gBAAgB,EAAE;AAdb,KAAP;AAgBD;AACF,CA5DM;AA8DP,OAAO,MAAMe,8BAA8B,GAAG,YAAY;AACxD,MAAI;AACF,UAAMC,KAAK,GAAG,CAAC,kBAAD,EAAqB,+BAArB,EAAsDX,GAAtD,CAA2DY,MAAD,KAAa;AACnFC,MAAAA,OAAO,EAAExC,mBAAmB,EADuD;AAEnFyC,MAAAA,IAAI,EAAEF;AAF6E,KAAb,CAA1D,CAAd;AAIA,UAAM,CAAC,CAACG,gBAAD,CAAD,EAAqB,CAACC,6BAAD,CAArB,IAAyD,MAAM1C,WAAW,CAC9EF,YAD8E,EAE9EuC,KAF8E,CAAhF;AAKA,WAAO;AACLI,MAAAA,gBAAgB,EAAEA,gBAAgB,GAAGA,gBAAgB,CAACR,QAAjB,EAAH,GAAiC,IAD9D;AAELS,MAAAA,6BAA6B,EAAEA,6BAA6B,GAAGA,6BAA6B,CAACT,QAA9B,EAAH,GAA8C;AAFrG,KAAP;AAID,GAdD,CAcE,OAAOC,KAAP,EAAc;AACd,WAAO;AACLO,MAAAA,gBAAgB,EAAE,IADb;AAELC,MAAAA,6BAA6B,EAAE;AAF1B,KAAP;AAID;AACF,CArBM;AAuBP,OAAO,MAAMC,yBAAyB,GAAIC,eAAD,IAA2D;AAClG,QAAM,CAACC,SAAD,EAAYC,aAAZ,EAA2BC,cAA3B,IAA6CH,eAAnD;;AAEA,MAAI,CAAAC,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEG,MAAX,IAAoB,CAAxB,EAA2B;AACzB,WAAOH,SAAS,CAACnB,GAAV,CAAc,CAACuB,QAAD,EAAWC,KAAX,KAAqB;AACxC,aAAO;AACLC,QAAAA,EAAE,EAAEF,QAAQ,CAAChB,QAAT,EADC;AAELmB,QAAAA,MAAM,EAAEN,aAAa,CAACI,KAAD,CAAb,CAAqBjB,QAArB,EAFH;AAGLxB,QAAAA,MAAM,EAAEsC,cAAc,CAACG,KAAD;AAHjB,OAAP;AAKD,KANM,CAAP;AAOD;;AACD,SAAO,EAAP;AACD,CAbM;AAeP,OAAO,MAAMG,0BAA0B,GAAG,CAACC,qBAAD,EAAgCC,OAAhC,EAAiDjD,SAAjD,KAAuE;AAC/G,MAAIkD,MAAM,GAAG,CAAb;AACA,QAAMC,eAAe,GAAG,IAAxB;AACA,QAAMpB,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,qBAApB,EAA2CI,CAAC,IAAID,eAAhD,EAAiE;AAC/DD,IAAAA,MAAM,GAAGE,CAAT;AACArB,IAAAA,KAAK,CAACsB,IAAN,CAAW;AACTnB,MAAAA,IAAI,EAAE,0BADG;AAETD,MAAAA,OAAO,EAAExC,mBAAmB,EAFnB;AAGT6D,MAAAA,MAAM,EAAE,CAACL,OAAD,EAAUjD,SAAV,EAAqBkD,MAArB,EAA6BC,eAA7B;AAHC,KAAX;AAKD;;AACD,SAAOpB,KAAP;AACD,CAdM;AAgBP,OAAO,MAAMwB,wCAAwC,GAAIC,QAAD,IAAc;AACpE,QAAMC,uBAA4C,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArD;AAEAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,cAAD,IAAoB;AACnCF,IAAAA,uBAAuB,CAAC,CAAD,CAAvB,CAA2BJ,IAA3B,CAAgC,GAAGM,cAAc,CAAC,CAAD,CAAjD;AACAF,IAAAA,uBAAuB,CAAC,CAAD,CAAvB,CAA2BJ,IAA3B,CAAgC,GAAGM,cAAc,CAAC,CAAD,CAAjD;AACAF,IAAAA,uBAAuB,CAAC,CAAD,CAAvB,CAA2BJ,IAA3B,CAAgC,GAAGM,cAAc,CAAC,CAAD,CAAjD;AACD,GAJD;AAMA,SAAOF,uBAAP;AACD,CAVM;AAYP,OAAO,MAAMG,YAAY,GAAG,OAC1BX,OAD0B,EAE1BjD,SAF0B,EAG1B6D,aAH0B,KAIG;AAC7B;AACA,QAAMb,qBAAqB,GAAGa,aAAa,GAAGC,QAAQ,CAACD,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEE,YAAhB,EAA8B,EAA9B,CAAX,GAA+C,IAA1F;AACA,QAAMhC,KAAK,GAAGgB,0BAA0B,CAACC,qBAAD,EAAwBC,OAAxB,EAAiCjD,SAAjC,CAAxC;;AACA,MAAI;AACF,UAAMgE,YAAY,GAAG,MAAMtE,WAAW,CAACF,YAAD,EAAeuC,KAAf,EAAsB;AAAEkC,MAAAA,cAAc,EAAE;AAAlB,KAAtB,CAAtC,CADE,CAEF;;AACA,UAAMC,wBAAwB,GAAGF,YAAY,CAACG,MAAb,CAAqBC,GAAD,IAASA,GAA7B,CAAjC;AACA,UAAMX,uBAAuB,GAAGF,wCAAwC,CAACW,wBAAD,CAAxE;AACA,UAAMG,kBAAkB,GAAGhC,yBAAyB,CAACoB,uBAAD,CAApD;AACA,WAAOY,kBAAP;AACD,GAPD,CAOE,OAAOzC,KAAP,EAAc;AACd0C,IAAAA,OAAO,CAAC1C,KAAR,CAAcA,KAAd;AACA,WAAO,IAAP;AACD;AACF,CAnBM;AAqBP,OAAO,MAAM2C,iBAAiB,GAAG,YAAgD;AAC/E,QAAMf,QAAQ,GAAG,MAAMpE,OAAO,CAC5BE,iBAD4B,EAE5BD,GAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAlBgC,CAA9B;AAqBA,QAAM;AAAEmF,IAAAA;AAAF,MAAgBhB,QAAtB;AACA,SAAOgB,SAAP;AACD,CAxBM;AA0BP,OAAO,MAAMC,mBAAmB,GAAG,MAAOxB,OAAP,IAA4D;AAC7F,QAAMO,QAAQ,GAAG,MAAMpE,OAAO,CAC5BE,iBAD4B,EAE5BD,GAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApBgC,EAqB5B;AAAE4D,IAAAA,OAAO,EAAEA,OAAO,CAACyB,WAAR;AAAX,GArB4B,CAA9B;AAuBA,QAAM;AAAEC,IAAAA;AAAF,MAAWnB,QAAjB,CAxB6F,CA0B7F;;AACA,MAAI,CAACA,QAAD,IAAa,CAACmB,IAAlB,EAAwB;AACtB,UAAMC,SAAS,GAAG;AAChB3B,MAAAA,OADgB;AAEhB4B,MAAAA,SAAS,EAAE,EAFK;AAGhBd,MAAAA,YAAY,EAAE,EAHE;AAIhBe,MAAAA,MAAM,EAAE;AAJQ,KAAlB;AAOA,WAAOF,SAAP;AACD;;AAED,QAAMG,aAAa,GAAGJ,IAAI,IAAI;AAC5B1B,IAAAA,OAAO,EAAE0B,IAAI,CAAC9B,EADc;AAE5BgC,IAAAA,SAAS,EAAEF,IAAI,CAACE,SAFY;AAG5Bd,IAAAA,YAAY,EAAEY,IAAI,CAACZ,YAHS;AAI5Be,IAAAA,MAAM,EAAEH,IAAI,CAACG,MAAL,CAAY1D,GAAZ,CAAiB4D,KAAD,IAAW;AAAA;;AACjC,aAAO;AACLhF,QAAAA,SAAS,EAAEgF,KAAF,aAAEA,KAAF,yCAAEA,KAAK,CAAEC,OAAT,mDAAE,eAAgBpC,EADtB;AAELxC,QAAAA,OAAO,EAAE2E,KAAF,aAAEA,KAAF,0CAAEA,KAAK,CAAEC,OAAT,oDAAE,gBAAgB5E,OAFpB;AAGL6E,QAAAA,OAAO,EAAEF,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEE,OAHX;AAILnB,QAAAA,YAAY,EAAEiB,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEjB,YAJhB;AAKL5D,QAAAA,MAAM,EAAE6E,KAAF,aAAEA,KAAF,0CAAEA,KAAK,CAAEC,OAAT,oDAAE,gBAAgB9E;AALnB,OAAP;AAOD,KARO;AAJoB,GAA9B;AAeA,SAAO4E,aAAP;AACD,CAtDM;AAwDP,OAAO,MAAMI,yBAAyB,GACpClF,WADuC,IAEtB;AAAA;;AACjB,QAAM;AACJK,IAAAA,iBAAiB,EAAE8E,yBADf;AAEJ7E,IAAAA,eAAe,EAAE8E,uBAFb;AAGJ1E,IAAAA,qBAAqB,EAAE2E;AAHnB,MAIFrF,WAJJ;AAMA,QAAMM,eAAe,GAAGX,OAAO,CAAC,MAAM;AACpC,WAAO,IAAIT,SAAJ,CAAckG,uBAAd,CAAP;AACD,GAF8B,EAE5B,CAACA,uBAAD,CAF4B,CAA/B;AAIA,QAAM/E,iBAAiB,GAAGV,OAAO,CAAC,MAAM;AACtC,WAAO,IAAIT,SAAJ,CAAciG,yBAAd,CAAP;AACD,GAFgC,EAE9B,CAACA,yBAAD,CAF8B,CAAjC;AAIA,QAAMzE,qBAAqB,GAAGf,OAAO,CAAC,MAAM;AAC1C,WAAO,IAAIT,SAAJ,CAAcmG,6BAAd,CAAP;AACD,GAFoC,EAElC,CAACA,6BAAD,CAFkC,CAArC;AAIA,SAAO;AACL5D,IAAAA,SAAS,EAAEzB,WAAW,CAACyB,SADlB;AAEL6D,IAAAA,WAAW,EAAEtF,WAAW,CAACsF,WAFpB;AAGLpF,IAAAA,MAAM,EAAEF,WAAW,CAACE,MAHf;AAILC,IAAAA,SAAS,EAAEH,WAAW,CAACG,SAJlB;AAKLC,IAAAA,OAAO,EAAEJ,WAAW,CAACI,OALhB;AAMLC,IAAAA,iBANK;AAOLC,IAAAA,eAPK;AAQLC,IAAAA,WAAW,EAAEP,WAAW,CAACO,WARpB;AASLC,IAAAA,aAAa,EAAER,WAAW,CAACQ,aATtB;AAULC,IAAAA,YAAY,EAAET,WAAW,CAACS,YAVrB;AAWLC,IAAAA,qBAXK;AAYLC,IAAAA,WAAW,EAAEX,WAAW,CAACW,WAZpB;AAaLC,IAAAA,cAAc,EAAEZ,WAAW,CAACY,cAbvB;AAcLC,IAAAA,sBAAsB,EAAEb,WAAW,CAACa,sBAd/B;AAeLC,IAAAA,gBAAgB,EAAEd,WAAW,CAACc;AAfzB,GAAP;AAiBD,CAtCM;;GAAMoE,yB","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { request, gql } from 'graphql-request'\nimport { ethers } from 'ethers'\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\nimport { LotteryStatus, LotteryTicket } from 'config/constants/types'\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\nimport { getLotteryV2Address } from 'utils/addressHelpers'\nimport { multicallv2 } from 'utils/multicall'\nimport {\n  LotteryUserGraphEntity,\n  LotteryRoundGraphEntity,\n  LotteryRound,\n  UserTicketsResponse,\n  UserRound,\n  LotteryRoundUserTickets,\n  LotteryResponse,\n} from 'state/types'\nimport { getLotteryV2Contract } from 'utils/contractHelpers'\nimport { useMemo } from 'react'\nimport { ethersToSerializedBigNumber } from 'utils/bigNumber'\n\nconst lotteryContract = getLotteryV2Contract()\n\nexport const fetchLottery = async (lotteryId: string): Promise<LotteryResponse> => {\n  try {\n    const lotteryData = await lotteryContract.viewLottery(lotteryId)\n    const {\n      status,\n      startTime,\n      endTime,\n      priceTicketInCake,\n      discountDivisor,\n      treasuryFee,\n      firstTicketId,\n      lastTicketId,\n      amountCollectedInCake,\n      finalNumber,\n      cakePerBracket,\n      countWinnersPerBracket,\n      rewardsBreakdown,\n    } = lotteryData\n\n    const statusKey = Object.keys(LotteryStatus)[status]\n    const serializedCakePerBracket = cakePerBracket.map((cakeInBracket) => ethersToSerializedBigNumber(cakeInBracket))\n    const serializedCountWinnersPerBracket = countWinnersPerBracket.map((winnersInBracket) =>\n      ethersToSerializedBigNumber(winnersInBracket),\n    )\n    const serializedRewardsBreakdown = rewardsBreakdown.map((reward) => ethersToSerializedBigNumber(reward))\n\n    return {\n      isLoading: false,\n      status: LotteryStatus[statusKey],\n      startTime: startTime?.toString(),\n      endTime: endTime?.toString(),\n      priceTicketInCake: ethersToSerializedBigNumber(priceTicketInCake),\n      discountDivisor: discountDivisor?.toString(),\n      treasuryFee: treasuryFee?.toString(),\n      firstTicketId: firstTicketId?.toString(),\n      lastTicketId: lastTicketId?.toString(),\n      amountCollectedInCake: ethersToSerializedBigNumber(amountCollectedInCake),\n      finalNumber,\n      cakePerBracket: serializedCakePerBracket,\n      countWinnersPerBracket: serializedCountWinnersPerBracket,\n      rewardsBreakdown: serializedRewardsBreakdown,\n    }\n  } catch (error) {\n    return {\n      isLoading: true,\n      status: LotteryStatus.PENDING,\n      startTime: '',\n      endTime: '',\n      priceTicketInCake: '',\n      discountDivisor: '',\n      treasuryFee: '',\n      firstTicketId: '',\n      lastTicketId: '',\n      amountCollectedInCake: '',\n      finalNumber: null,\n      cakePerBracket: [],\n      countWinnersPerBracket: [],\n      rewardsBreakdown: [],\n    }\n  }\n}\n\nexport const fetchCurrentLotteryIdAndMaxBuy = async () => {\n  try {\n    const calls = ['currentLotteryId', 'maxNumberTicketsPerBuyOrClaim'].map((method) => ({\n      address: getLotteryV2Address(),\n      name: method,\n    }))\n    const [[currentLotteryId], [maxNumberTicketsPerBuyOrClaim]] = (await multicallv2(\n      lotteryV2Abi,\n      calls,\n    )) as ethers.BigNumber[][]\n\n    return {\n      currentLotteryId: currentLotteryId ? currentLotteryId.toString() : null,\n      maxNumberTicketsPerBuyOrClaim: maxNumberTicketsPerBuyOrClaim ? maxNumberTicketsPerBuyOrClaim.toString() : null,\n    }\n  } catch (error) {\n    return {\n      currentLotteryId: null,\n      maxNumberTicketsPerBuyOrClaim: null,\n    }\n  }\n}\n\nexport const processRawTicketsResponse = (ticketsResponse: UserTicketsResponse): LotteryTicket[] => {\n  const [ticketIds, ticketNumbers, ticketStatuses] = ticketsResponse\n\n  if (ticketIds?.length > 0) {\n    return ticketIds.map((ticketId, index) => {\n      return {\n        id: ticketId.toString(),\n        number: ticketNumbers[index].toString(),\n        status: ticketStatuses[index],\n      }\n    })\n  }\n  return []\n}\n\nexport const getViewUserTicketInfoCalls = (totalTicketsToRequest: number, account: string, lotteryId: string) => {\n  let cursor = 0\n  const perRequestLimit = 1000\n  const calls = []\n\n  for (let i = 0; i < totalTicketsToRequest; i += perRequestLimit) {\n    cursor = i\n    calls.push({\n      name: 'viewUserInfoForLotteryId',\n      address: getLotteryV2Address(),\n      params: [account, lotteryId, cursor, perRequestLimit],\n    })\n  }\n  return calls\n}\n\nexport const mergeViewUserTicketInfoMulticallResponse = (response) => {\n  const mergedMulticallResponse: UserTicketsResponse = [[], [], []]\n\n  response.forEach((ticketResponse) => {\n    mergedMulticallResponse[0].push(...ticketResponse[0])\n    mergedMulticallResponse[1].push(...ticketResponse[1])\n    mergedMulticallResponse[2].push(...ticketResponse[2])\n  })\n\n  return mergedMulticallResponse\n}\n\nexport const fetchTickets = async (\n  account: string,\n  lotteryId: string,\n  userRoundData?: UserRound,\n): Promise<LotteryTicket[]> => {\n  // If the subgraph is returning user totalTickets data for the round - use those totalTickets, if not - batch request up to 5000\n  const totalTicketsToRequest = userRoundData ? parseInt(userRoundData?.totalTickets, 10) : 5000\n  const calls = getViewUserTicketInfoCalls(totalTicketsToRequest, account, lotteryId)\n  try {\n    const multicallRes = await multicallv2(lotteryV2Abi, calls, { requireSuccess: false })\n    // When using a static totalTicketsToRequest value - null responses may be returned\n    const filteredForNullResponses = multicallRes.filter((res) => res)\n    const mergedMulticallResponse = mergeViewUserTicketInfoMulticallResponse(filteredForNullResponses)\n    const completeTicketData = processRawTicketsResponse(mergedMulticallResponse)\n    return completeTicketData\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n\nexport const getGraphLotteries = async (): Promise<LotteryRoundGraphEntity[]> => {\n  const response = await request(\n    GRAPH_API_LOTTERY,\n    gql`\n      query getLotteries {\n        lotteries(first: 100, orderDirection: desc, orderBy: block) {\n          id\n          totalUsers\n          totalTickets\n          status\n          finalNumber\n          winningTickets\n          startTime\n          endTime\n          ticketPrice\n          firstTicket\n          lastTicket\n        }\n      }\n    `,\n  )\n\n  const { lotteries } = response\n  return lotteries\n}\n\nexport const getGraphLotteryUser = async (account: string): Promise<LotteryUserGraphEntity> => {\n  const response = await request(\n    GRAPH_API_LOTTERY,\n    gql`\n      query getUserLotteryData($account: ID!) {\n        user(id: $account) {\n          id\n          totalTickets\n          totalCake\n          rounds(first: 100, orderDirection: desc, orderBy: block) {\n            id\n            lottery {\n              id\n              endTime\n              status\n            }\n            claimed\n            totalTickets\n          }\n        }\n      }\n    `,\n    { account: account.toLowerCase() },\n  )\n  const { user } = response\n\n  // If no subgraph response - return blank user\n  if (!response || !user) {\n    const blankUser = {\n      account,\n      totalCake: '',\n      totalTickets: '',\n      rounds: [],\n    }\n\n    return blankUser\n  }\n\n  const formattedUser = user && {\n    account: user.id,\n    totalCake: user.totalCake,\n    totalTickets: user.totalTickets,\n    rounds: user.rounds.map((round) => {\n      return {\n        lotteryId: round?.lottery?.id,\n        endTime: round?.lottery?.endTime,\n        claimed: round?.claimed,\n        totalTickets: round?.totalTickets,\n        status: round?.lottery?.status,\n      }\n    }),\n  }\n\n  return formattedUser\n}\n\nexport const useProcessLotteryResponse = (\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\n): LotteryRound => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString,\n  } = lotteryData\n\n  const discountDivisor = useMemo(() => {\n    return new BigNumber(discountDivisorAsString)\n  }, [discountDivisorAsString])\n\n  const priceTicketInCake = useMemo(() => {\n    return new BigNumber(priceTicketInCakeAsString)\n  }, [priceTicketInCakeAsString])\n\n  const amountCollectedInCake = useMemo(() => {\n    return new BigNumber(amountCollectedInCakeAsString)\n  }, [amountCollectedInCakeAsString])\n\n  return {\n    isLoading: lotteryData.isLoading,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}