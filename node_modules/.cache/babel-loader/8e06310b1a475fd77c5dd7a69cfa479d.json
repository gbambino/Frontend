{"ast":null,"code":"var _jsxFileName = \"/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Home/components/EarnAPRCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit';\nimport { ChainId } from '@pancakeswap/sdk';\nimport max from 'lodash/max';\nimport { NavLink } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { useFarms, usePriceCakeBusd } from 'state/hooks';\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms';\nimport { getFarmApr } from 'utils/apr';\nimport useIntersectionObserver from 'hooks/useIntersectionObserver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({\n  theme\n}) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`;\n_c = StyledFarmStakingCard;\nconst CardMidContent = styled(Heading).attrs({\n  scale: 'xl'\n})`\n  line-height: 44px;\n`;\n_c2 = CardMidContent;\n\nconst EarnAPRCard = () => {\n  _s();\n\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true);\n  const {\n    t\n  } = useTranslation();\n  const {\n    data: farmsLP\n  } = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const dispatch = useAppDispatch();\n  const {\n    observerRef,\n    isIntersecting\n  } = useIntersectionObserver(); // Fetch farm data once to get the max APR\n\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map(nonArchivedFarm => nonArchivedFarm.pid)));\n      } finally {\n        setIsFetchingFarmData(false);\n      }\n    };\n\n    if (isIntersecting) {\n      fetchFarmData();\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting]);\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map(farm => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice);\n          const {\n            cakeRewardsApr,\n            lpRewardsApr\n          } = getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET]);\n          return cakeRewardsApr + lpRewardsApr;\n        }\n\n        return null;\n      });\n      const maxApr = max(aprs);\n      return maxApr === null || maxApr === void 0 ? void 0 : maxApr.toLocaleString('en-US', {\n        maximumFractionDigits: 2\n      });\n    }\n\n    return null;\n  }, [cakePrice, farmsLP]);\n  const aprText = highestApr || '-';\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', {\n    highestApr: aprText\n  });\n  const [earnUpTo, InFarms] = earnAprText.split(aprText);\n  return /*#__PURE__*/_jsxDEV(StyledFarmStakingCard, {\n    children: /*#__PURE__*/_jsxDEV(NavLink, {\n      exact: true,\n      activeClassName: \"active\",\n      to: \"/farms\",\n      id: \"farm-apr-cta\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          color: \"contrast\",\n          scale: \"lg\",\n          children: earnUpTo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardMidContent, {\n          color: \"#7645d9\",\n          children: highestApr && !isFetchingFarmData ? `${highestApr}%` : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n              animation: \"pulse\",\n              variant: \"rect\",\n              height: \"44px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: observerRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            color: \"contrast\",\n            scale: \"lg\",\n            children: InFarms\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n            mt: 30,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EarnAPRCard, \"/kgnGbmL5bEfzmHNXp5e7u2dOCk=\", false, function () {\n  return [useTranslation, useFarms, usePriceCakeBusd, useAppDispatch, useIntersectionObserver];\n});\n\n_c3 = EarnAPRCard;\nexport default EarnAPRCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledFarmStakingCard\");\n$RefreshReg$(_c2, \"CardMidContent\");\n$RefreshReg$(_c3, \"EarnAPRCard\");","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Home/components/EarnAPRCard.tsx"],"names":["React","useEffect","useMemo","useState","styled","Heading","Card","CardBody","Flex","ArrowForwardIcon","Skeleton","ChainId","max","NavLink","BigNumber","useTranslation","useAppDispatch","useFarms","usePriceCakeBusd","fetchFarmsPublicDataAsync","nonArchivedFarms","getFarmApr","useIntersectionObserver","StyledFarmStakingCard","theme","mediaQueries","lg","CardMidContent","attrs","scale","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","t","data","farmsLP","cakePrice","dispatch","observerRef","isIntersecting","fetchFarmData","map","nonArchivedFarm","pid","highestApr","gt","aprs","farm","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","cakeRewardsApr","lpRewardsApr","poolWeight","lpAddresses","MAINNET","maxApr","toLocaleString","maximumFractionDigits","aprText","earnAprText","earnUpTo","InFarms","split"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    if (isIntersecting) {\n      fetchFarmData()\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n            new BigNumber(farm.poolWeight),\n            cakePrice,\n            totalLiquidity,\n            farm.lpAddresses[ChainId.MAINNET],\n          )\n          return cakeRewardsApr + lpRewardsApr\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <>\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n                <div ref={observerRef} />\n              </>\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n"]},"metadata":{},"sourceType":"module"}