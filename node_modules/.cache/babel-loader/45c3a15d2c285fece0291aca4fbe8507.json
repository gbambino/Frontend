{"ast":null,"code":"import _taggedTemplateLiteral from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _toConsumableArray from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject,_templateObject2;import BigNumber from'bignumber.js';import{request,gql}from'graphql-request';import{GRAPH_API_LOTTERY}from'config/constants/endpoints';import{LotteryStatus}from'config/constants/types';import lotteryV2Abi from'config/abi/lotteryV2.json';import{getLotteryV2Address}from'utils/addressHelpers';import{multicallv2}from'utils/multicall';import{getLotteryV2Contract}from'utils/contractHelpers';import{useMemo}from'react';import{ethersToSerializedBigNumber}from'utils/bigNumber';var lotteryContract=getLotteryV2Contract();export var fetchLottery=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(lotteryId){var lotteryData,status,startTime,endTime,priceTicketInCake,discountDivisor,treasuryFee,firstTicketId,lastTicketId,amountCollectedInCake,finalNumber,cakePerBracket,countWinnersPerBracket,rewardsBreakdown,statusKey,serializedCakePerBracket,serializedCountWinnersPerBracket,serializedRewardsBreakdown;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return lotteryContract.viewLottery(lotteryId);case 3:lotteryData=_context.sent;status=lotteryData.status,startTime=lotteryData.startTime,endTime=lotteryData.endTime,priceTicketInCake=lotteryData.priceTicketInCake,discountDivisor=lotteryData.discountDivisor,treasuryFee=lotteryData.treasuryFee,firstTicketId=lotteryData.firstTicketId,lastTicketId=lotteryData.lastTicketId,amountCollectedInCake=lotteryData.amountCollectedInCake,finalNumber=lotteryData.finalNumber,cakePerBracket=lotteryData.cakePerBracket,countWinnersPerBracket=lotteryData.countWinnersPerBracket,rewardsBreakdown=lotteryData.rewardsBreakdown;statusKey=Object.keys(LotteryStatus)[status];serializedCakePerBracket=cakePerBracket.map(function(cakeInBracket){return ethersToSerializedBigNumber(cakeInBracket);});serializedCountWinnersPerBracket=countWinnersPerBracket.map(function(winnersInBracket){return ethersToSerializedBigNumber(winnersInBracket);});serializedRewardsBreakdown=rewardsBreakdown.map(function(reward){return ethersToSerializedBigNumber(reward);});return _context.abrupt(\"return\",{isLoading:false,status:LotteryStatus[statusKey],startTime:startTime===null||startTime===void 0?void 0:startTime.toString(),endTime:endTime===null||endTime===void 0?void 0:endTime.toString(),priceTicketInCake:ethersToSerializedBigNumber(priceTicketInCake),discountDivisor:discountDivisor===null||discountDivisor===void 0?void 0:discountDivisor.toString(),treasuryFee:treasuryFee===null||treasuryFee===void 0?void 0:treasuryFee.toString(),firstTicketId:firstTicketId===null||firstTicketId===void 0?void 0:firstTicketId.toString(),lastTicketId:lastTicketId===null||lastTicketId===void 0?void 0:lastTicketId.toString(),amountCollectedInCake:ethersToSerializedBigNumber(amountCollectedInCake),finalNumber:finalNumber,cakePerBracket:serializedCakePerBracket,countWinnersPerBracket:serializedCountWinnersPerBracket,rewardsBreakdown:serializedRewardsBreakdown});case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",{isLoading:true,status:LotteryStatus.PENDING,startTime:'',endTime:'',priceTicketInCake:'',discountDivisor:'',treasuryFee:'',firstTicketId:'',lastTicketId:'',amountCollectedInCake:'',finalNumber:null,cakePerBracket:[],countWinnersPerBracket:[],rewardsBreakdown:[]});case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,12]]);}));return function fetchLottery(_x){return _ref.apply(this,arguments);};}();export var fetchCurrentLotteryIdAndMaxBuy=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var calls,_ref3,_ref4,_ref4$,currentLotteryId,_ref4$2,maxNumberTicketsPerBuyOrClaim;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;calls=['currentLotteryId','maxNumberTicketsPerBuyOrClaim'].map(function(method){return{address:getLotteryV2Address(),name:method};});_context2.next=4;return multicallv2(lotteryV2Abi,calls);case 4:_ref3=_context2.sent;_ref4=_slicedToArray(_ref3,2);_ref4$=_slicedToArray(_ref4[0],1);currentLotteryId=_ref4$[0];_ref4$2=_slicedToArray(_ref4[1],1);maxNumberTicketsPerBuyOrClaim=_ref4$2[0];return _context2.abrupt(\"return\",{currentLotteryId:currentLotteryId?currentLotteryId.toString():null,maxNumberTicketsPerBuyOrClaim:maxNumberTicketsPerBuyOrClaim?maxNumberTicketsPerBuyOrClaim.toString():null});case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",{currentLotteryId:null,maxNumberTicketsPerBuyOrClaim:null});case 16:case\"end\":return _context2.stop();}}},_callee2,null,[[0,13]]);}));return function fetchCurrentLotteryIdAndMaxBuy(){return _ref2.apply(this,arguments);};}();export var processRawTicketsResponse=function processRawTicketsResponse(ticketsResponse){var _ticketsResponse=_slicedToArray(ticketsResponse,3),ticketIds=_ticketsResponse[0],ticketNumbers=_ticketsResponse[1],ticketStatuses=_ticketsResponse[2];if((ticketIds===null||ticketIds===void 0?void 0:ticketIds.length)>0){return ticketIds.map(function(ticketId,index){return{id:ticketId.toString(),number:ticketNumbers[index].toString(),status:ticketStatuses[index]};});}return[];};export var getViewUserTicketInfoCalls=function getViewUserTicketInfoCalls(totalTicketsToRequest,account,lotteryId){var cursor=0;var perRequestLimit=1000;var calls=[];for(var i=0;i<totalTicketsToRequest;i+=perRequestLimit){cursor=i;calls.push({name:'viewUserInfoForLotteryId',address:getLotteryV2Address(),params:[account,lotteryId,cursor,perRequestLimit]});}return calls;};export var mergeViewUserTicketInfoMulticallResponse=function mergeViewUserTicketInfoMulticallResponse(response){var mergedMulticallResponse=[[],[],[]];response.forEach(function(ticketResponse){var _mergedMulticallRespo,_mergedMulticallRespo2,_mergedMulticallRespo3;(_mergedMulticallRespo=mergedMulticallResponse[0]).push.apply(_mergedMulticallRespo,_toConsumableArray(ticketResponse[0]));(_mergedMulticallRespo2=mergedMulticallResponse[1]).push.apply(_mergedMulticallRespo2,_toConsumableArray(ticketResponse[1]));(_mergedMulticallRespo3=mergedMulticallResponse[2]).push.apply(_mergedMulticallRespo3,_toConsumableArray(ticketResponse[2]));});return mergedMulticallResponse;};export var fetchTickets=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account,lotteryId,userRoundData){var totalTicketsToRequest,calls,multicallRes,filteredForNullResponses,mergedMulticallResponse,completeTicketData;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// If the subgraph is returning user totalTickets data for the round - use those totalTickets, if not - batch request up to 5000\ntotalTicketsToRequest=userRoundData?parseInt(userRoundData===null||userRoundData===void 0?void 0:userRoundData.totalTickets,10):5000;calls=getViewUserTicketInfoCalls(totalTicketsToRequest,account,lotteryId);_context3.prev=2;_context3.next=5;return multicallv2(lotteryV2Abi,calls,{requireSuccess:false});case 5:multicallRes=_context3.sent;// When using a static totalTicketsToRequest value - null responses may be returned\nfilteredForNullResponses=multicallRes.filter(function(res){return res;});mergedMulticallResponse=mergeViewUserTicketInfoMulticallResponse(filteredForNullResponses);completeTicketData=processRawTicketsResponse(mergedMulticallResponse);return _context3.abrupt(\"return\",completeTicketData);case 12:_context3.prev=12;_context3.t0=_context3[\"catch\"](2);console.error(_context3.t0);return _context3.abrupt(\"return\",null);case 16:case\"end\":return _context3.stop();}}},_callee3,null,[[2,12]]);}));return function fetchTickets(_x2,_x3,_x4){return _ref5.apply(this,arguments);};}();export var getGraphLotteries=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var response,lotteries;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return request(GRAPH_API_LOTTERY,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n      query getLotteries {\\n        lotteries(first: 100, orderDirection: desc, orderBy: block) {\\n          id\\n          totalUsers\\n          totalTickets\\n          status\\n          finalNumber\\n          winningTickets\\n          startTime\\n          endTime\\n          ticketPrice\\n          firstTicket\\n          lastTicket\\n        }\\n      }\\n    \"]))));case 2:response=_context4.sent;lotteries=response.lotteries;return _context4.abrupt(\"return\",lotteries);case 5:case\"end\":return _context4.stop();}}},_callee4);}));return function getGraphLotteries(){return _ref6.apply(this,arguments);};}();export var getGraphLotteryUser=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(account){var response,user,blankUser,formattedUser;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return request(GRAPH_API_LOTTERY,gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n      query getUserLotteryData($account: ID!) {\\n        user(id: $account) {\\n          id\\n          totalTickets\\n          totalCake\\n          rounds(first: 100, orderDirection: desc, orderBy: block) {\\n            id\\n            lottery {\\n              id\\n              endTime\\n              status\\n            }\\n            claimed\\n            totalTickets\\n          }\\n        }\\n      }\\n    \"]))),{account:account.toLowerCase()});case 2:response=_context5.sent;user=response.user;// If no subgraph response - return blank user\nif(!(!response||!user)){_context5.next=7;break;}blankUser={account:account,totalCake:'',totalTickets:'',rounds:[]};return _context5.abrupt(\"return\",blankUser);case 7:formattedUser=user&&{account:user.id,totalCake:user.totalCake,totalTickets:user.totalTickets,rounds:user.rounds.map(function(round){var _round$lottery,_round$lottery2,_round$lottery3;return{lotteryId:round===null||round===void 0?void 0:(_round$lottery=round.lottery)===null||_round$lottery===void 0?void 0:_round$lottery.id,endTime:round===null||round===void 0?void 0:(_round$lottery2=round.lottery)===null||_round$lottery2===void 0?void 0:_round$lottery2.endTime,claimed:round===null||round===void 0?void 0:round.claimed,totalTickets:round===null||round===void 0?void 0:round.totalTickets,status:round===null||round===void 0?void 0:(_round$lottery3=round.lottery)===null||_round$lottery3===void 0?void 0:_round$lottery3.status};})};return _context5.abrupt(\"return\",formattedUser);case 9:case\"end\":return _context5.stop();}}},_callee5);}));return function getGraphLotteryUser(_x5){return _ref7.apply(this,arguments);};}();export var useProcessLotteryResponse=function useProcessLotteryResponse(lotteryData){var priceTicketInCakeAsString=lotteryData.priceTicketInCake,discountDivisorAsString=lotteryData.discountDivisor,amountCollectedInCakeAsString=lotteryData.amountCollectedInCake;var discountDivisor=useMemo(function(){return new BigNumber(discountDivisorAsString);},[discountDivisorAsString]);var priceTicketInCake=useMemo(function(){return new BigNumber(priceTicketInCakeAsString);},[priceTicketInCakeAsString]);var amountCollectedInCake=useMemo(function(){return new BigNumber(amountCollectedInCakeAsString);},[amountCollectedInCakeAsString]);return{isLoading:lotteryData.isLoading,userTickets:lotteryData.userTickets,status:lotteryData.status,startTime:lotteryData.startTime,endTime:lotteryData.endTime,priceTicketInCake:priceTicketInCake,discountDivisor:discountDivisor,treasuryFee:lotteryData.treasuryFee,firstTicketId:lotteryData.firstTicketId,lastTicketId:lotteryData.lastTicketId,amountCollectedInCake:amountCollectedInCake,finalNumber:lotteryData.finalNumber,cakePerBracket:lotteryData.cakePerBracket,countWinnersPerBracket:lotteryData.countWinnersPerBracket,rewardsBreakdown:lotteryData.rewardsBreakdown};};","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/state/lottery/helpers.ts"],"names":["BigNumber","request","gql","GRAPH_API_LOTTERY","LotteryStatus","lotteryV2Abi","getLotteryV2Address","multicallv2","getLotteryV2Contract","useMemo","ethersToSerializedBigNumber","lotteryContract","fetchLottery","lotteryId","viewLottery","lotteryData","status","startTime","endTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","statusKey","Object","keys","serializedCakePerBracket","map","cakeInBracket","serializedCountWinnersPerBracket","winnersInBracket","serializedRewardsBreakdown","reward","isLoading","toString","PENDING","fetchCurrentLotteryIdAndMaxBuy","calls","method","address","name","currentLotteryId","maxNumberTicketsPerBuyOrClaim","processRawTicketsResponse","ticketsResponse","ticketIds","ticketNumbers","ticketStatuses","length","ticketId","index","id","number","getViewUserTicketInfoCalls","totalTicketsToRequest","account","cursor","perRequestLimit","i","push","params","mergeViewUserTicketInfoMulticallResponse","response","mergedMulticallResponse","forEach","ticketResponse","fetchTickets","userRoundData","parseInt","totalTickets","requireSuccess","multicallRes","filteredForNullResponses","filter","res","completeTicketData","console","error","getGraphLotteries","lotteries","getGraphLotteryUser","toLowerCase","user","blankUser","totalCake","rounds","formattedUser","round","lottery","claimed","useProcessLotteryResponse","priceTicketInCakeAsString","discountDivisorAsString","amountCollectedInCakeAsString","userTickets"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { request, gql } from 'graphql-request'\nimport { ethers } from 'ethers'\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\nimport { LotteryStatus, LotteryTicket } from 'config/constants/types'\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\nimport { getLotteryV2Address } from 'utils/addressHelpers'\nimport { multicallv2 } from 'utils/multicall'\nimport {\n  LotteryUserGraphEntity,\n  LotteryRoundGraphEntity,\n  LotteryRound,\n  UserTicketsResponse,\n  UserRound,\n  LotteryRoundUserTickets,\n  LotteryResponse,\n} from 'state/types'\nimport { getLotteryV2Contract } from 'utils/contractHelpers'\nimport { useMemo } from 'react'\nimport { ethersToSerializedBigNumber } from 'utils/bigNumber'\n\nconst lotteryContract = getLotteryV2Contract()\n\nexport const fetchLottery = async (lotteryId: string): Promise<LotteryResponse> => {\n  try {\n    const lotteryData = await lotteryContract.viewLottery(lotteryId)\n    const {\n      status,\n      startTime,\n      endTime,\n      priceTicketInCake,\n      discountDivisor,\n      treasuryFee,\n      firstTicketId,\n      lastTicketId,\n      amountCollectedInCake,\n      finalNumber,\n      cakePerBracket,\n      countWinnersPerBracket,\n      rewardsBreakdown,\n    } = lotteryData\n\n    const statusKey = Object.keys(LotteryStatus)[status]\n    const serializedCakePerBracket = cakePerBracket.map((cakeInBracket) => ethersToSerializedBigNumber(cakeInBracket))\n    const serializedCountWinnersPerBracket = countWinnersPerBracket.map((winnersInBracket) =>\n      ethersToSerializedBigNumber(winnersInBracket),\n    )\n    const serializedRewardsBreakdown = rewardsBreakdown.map((reward) => ethersToSerializedBigNumber(reward))\n\n    return {\n      isLoading: false,\n      status: LotteryStatus[statusKey],\n      startTime: startTime?.toString(),\n      endTime: endTime?.toString(),\n      priceTicketInCake: ethersToSerializedBigNumber(priceTicketInCake),\n      discountDivisor: discountDivisor?.toString(),\n      treasuryFee: treasuryFee?.toString(),\n      firstTicketId: firstTicketId?.toString(),\n      lastTicketId: lastTicketId?.toString(),\n      amountCollectedInCake: ethersToSerializedBigNumber(amountCollectedInCake),\n      finalNumber,\n      cakePerBracket: serializedCakePerBracket,\n      countWinnersPerBracket: serializedCountWinnersPerBracket,\n      rewardsBreakdown: serializedRewardsBreakdown,\n    }\n  } catch (error) {\n    return {\n      isLoading: true,\n      status: LotteryStatus.PENDING,\n      startTime: '',\n      endTime: '',\n      priceTicketInCake: '',\n      discountDivisor: '',\n      treasuryFee: '',\n      firstTicketId: '',\n      lastTicketId: '',\n      amountCollectedInCake: '',\n      finalNumber: null,\n      cakePerBracket: [],\n      countWinnersPerBracket: [],\n      rewardsBreakdown: [],\n    }\n  }\n}\n\nexport const fetchCurrentLotteryIdAndMaxBuy = async () => {\n  try {\n    const calls = ['currentLotteryId', 'maxNumberTicketsPerBuyOrClaim'].map((method) => ({\n      address: getLotteryV2Address(),\n      name: method,\n    }))\n    const [[currentLotteryId], [maxNumberTicketsPerBuyOrClaim]] = (await multicallv2(\n      lotteryV2Abi,\n      calls,\n    )) as ethers.BigNumber[][]\n\n    return {\n      currentLotteryId: currentLotteryId ? currentLotteryId.toString() : null,\n      maxNumberTicketsPerBuyOrClaim: maxNumberTicketsPerBuyOrClaim ? maxNumberTicketsPerBuyOrClaim.toString() : null,\n    }\n  } catch (error) {\n    return {\n      currentLotteryId: null,\n      maxNumberTicketsPerBuyOrClaim: null,\n    }\n  }\n}\n\nexport const processRawTicketsResponse = (ticketsResponse: UserTicketsResponse): LotteryTicket[] => {\n  const [ticketIds, ticketNumbers, ticketStatuses] = ticketsResponse\n\n  if (ticketIds?.length > 0) {\n    return ticketIds.map((ticketId, index) => {\n      return {\n        id: ticketId.toString(),\n        number: ticketNumbers[index].toString(),\n        status: ticketStatuses[index],\n      }\n    })\n  }\n  return []\n}\n\nexport const getViewUserTicketInfoCalls = (totalTicketsToRequest: number, account: string, lotteryId: string) => {\n  let cursor = 0\n  const perRequestLimit = 1000\n  const calls = []\n\n  for (let i = 0; i < totalTicketsToRequest; i += perRequestLimit) {\n    cursor = i\n    calls.push({\n      name: 'viewUserInfoForLotteryId',\n      address: getLotteryV2Address(),\n      params: [account, lotteryId, cursor, perRequestLimit],\n    })\n  }\n  return calls\n}\n\nexport const mergeViewUserTicketInfoMulticallResponse = (response) => {\n  const mergedMulticallResponse: UserTicketsResponse = [[], [], []]\n\n  response.forEach((ticketResponse) => {\n    mergedMulticallResponse[0].push(...ticketResponse[0])\n    mergedMulticallResponse[1].push(...ticketResponse[1])\n    mergedMulticallResponse[2].push(...ticketResponse[2])\n  })\n\n  return mergedMulticallResponse\n}\n\nexport const fetchTickets = async (\n  account: string,\n  lotteryId: string,\n  userRoundData?: UserRound,\n): Promise<LotteryTicket[]> => {\n  // If the subgraph is returning user totalTickets data for the round - use those totalTickets, if not - batch request up to 5000\n  const totalTicketsToRequest = userRoundData ? parseInt(userRoundData?.totalTickets, 10) : 5000\n  const calls = getViewUserTicketInfoCalls(totalTicketsToRequest, account, lotteryId)\n  try {\n    const multicallRes = await multicallv2(lotteryV2Abi, calls, { requireSuccess: false })\n    // When using a static totalTicketsToRequest value - null responses may be returned\n    const filteredForNullResponses = multicallRes.filter((res) => res)\n    const mergedMulticallResponse = mergeViewUserTicketInfoMulticallResponse(filteredForNullResponses)\n    const completeTicketData = processRawTicketsResponse(mergedMulticallResponse)\n    return completeTicketData\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n\nexport const getGraphLotteries = async (): Promise<LotteryRoundGraphEntity[]> => {\n  const response = await request(\n    GRAPH_API_LOTTERY,\n    gql`\n      query getLotteries {\n        lotteries(first: 100, orderDirection: desc, orderBy: block) {\n          id\n          totalUsers\n          totalTickets\n          status\n          finalNumber\n          winningTickets\n          startTime\n          endTime\n          ticketPrice\n          firstTicket\n          lastTicket\n        }\n      }\n    `,\n  )\n\n  const { lotteries } = response\n  return lotteries\n}\n\nexport const getGraphLotteryUser = async (account: string): Promise<LotteryUserGraphEntity> => {\n  const response = await request(\n    GRAPH_API_LOTTERY,\n    gql`\n      query getUserLotteryData($account: ID!) {\n        user(id: $account) {\n          id\n          totalTickets\n          totalCake\n          rounds(first: 100, orderDirection: desc, orderBy: block) {\n            id\n            lottery {\n              id\n              endTime\n              status\n            }\n            claimed\n            totalTickets\n          }\n        }\n      }\n    `,\n    { account: account.toLowerCase() },\n  )\n  const { user } = response\n\n  // If no subgraph response - return blank user\n  if (!response || !user) {\n    const blankUser = {\n      account,\n      totalCake: '',\n      totalTickets: '',\n      rounds: [],\n    }\n\n    return blankUser\n  }\n\n  const formattedUser = user && {\n    account: user.id,\n    totalCake: user.totalCake,\n    totalTickets: user.totalTickets,\n    rounds: user.rounds.map((round) => {\n      return {\n        lotteryId: round?.lottery?.id,\n        endTime: round?.lottery?.endTime,\n        claimed: round?.claimed,\n        totalTickets: round?.totalTickets,\n        status: round?.lottery?.status,\n      }\n    }),\n  }\n\n  return formattedUser\n}\n\nexport const useProcessLotteryResponse = (\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\n): LotteryRound => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString,\n  } = lotteryData\n\n  const discountDivisor = useMemo(() => {\n    return new BigNumber(discountDivisorAsString)\n  }, [discountDivisorAsString])\n\n  const priceTicketInCake = useMemo(() => {\n    return new BigNumber(priceTicketInCakeAsString)\n  }, [priceTicketInCakeAsString])\n\n  const amountCollectedInCake = useMemo(() => {\n    return new BigNumber(amountCollectedInCakeAsString)\n  }, [amountCollectedInCakeAsString])\n\n  return {\n    isLoading: lotteryData.isLoading,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}