{"ast":null,"code":"import _objectSpread from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* eslint-disable no-param-reassign */import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import{LotteryStatus}from'config/constants/types';import{getGraphLotteries,getGraphLotteryUser,fetchLottery,fetchCurrentLotteryIdAndMaxBuy,fetchTickets}from'./helpers';var initialState={currentLotteryId:null,isTransitioning:false,maxNumberTicketsPerBuyOrClaim:null,currentRound:{isLoading:true,status:LotteryStatus.PENDING,startTime:'',endTime:'',priceTicketInCake:'',discountDivisor:'',treasuryFee:'',firstTicketId:'',lastTicketId:'',amountCollectedInCake:'',finalNumber:null,cakePerBracket:[],countWinnersPerBracket:[],rewardsBreakdown:[],userTickets:{isLoading:true,tickets:[]}},lotteriesData:null,userLotteryData:{account:'',totalCake:'',totalTickets:'',rounds:[]}};export var fetchCurrentLottery=createAsyncThunk('lottery/fetchCurrentLottery',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var currentLotteryId,lotteryInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:currentLotteryId=_ref.currentLotteryId;_context.next=3;return fetchLottery(currentLotteryId);case 3:lotteryInfo=_context.sent;return _context.abrupt(\"return\",lotteryInfo);case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}());export var fetchCurrentLotteryId=createAsyncThunk('lottery/fetchCurrentLotteryId',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var currentIdAndMaxBuy;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetchCurrentLotteryIdAndMaxBuy();case 2:currentIdAndMaxBuy=_context2.sent;return _context2.abrupt(\"return\",currentIdAndMaxBuy);case 4:case\"end\":return _context2.stop();}}},_callee2);})));export var fetchUserTicketsAndLotteries=createAsyncThunk('lottery/fetchUserTicketsAndLotteries',/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4){var _userLotteriesRes$rou;var account,lotteryId,userLotteriesRes,userRoundData,userTickets;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:account=_ref4.account,lotteryId=_ref4.lotteryId;_context3.next=3;return getGraphLotteryUser(account);case 3:userLotteriesRes=_context3.sent;userRoundData=(_userLotteriesRes$rou=userLotteriesRes.rounds)===null||_userLotteriesRes$rou===void 0?void 0:_userLotteriesRes$rou.find(function(round){return round.lotteryId===lotteryId;});_context3.next=7;return fetchTickets(account,lotteryId,userRoundData);case 7:userTickets=_context3.sent;if(!(userTickets.length===0)){_context3.next=10;break;}return _context3.abrupt(\"return\",{userTickets:null,userLotteries:userLotteriesRes});case 10:return _context3.abrupt(\"return\",{userTickets:userTickets,userLotteries:userLotteriesRes});case 11:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref5.apply(this,arguments);};}());export var fetchPastLotteries=createAsyncThunk('lottery/fetchPastLotteries',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var lotteries;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return getGraphLotteries();case 2:lotteries=_context4.sent;return _context4.abrupt(\"return\",lotteries);case 4:case\"end\":return _context4.stop();}}},_callee4);})));export var fetchUserLotteries=createAsyncThunk('lottery/fetchUserLotteries',/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref7){var account,userLotteries;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:account=_ref7.account;_context5.next=3;return getGraphLotteryUser(account);case 3:userLotteries=_context5.sent;return _context5.abrupt(\"return\",userLotteries);case 5:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x3){return _ref8.apply(this,arguments);};}());export var setLotteryIsTransitioning=createAsyncThunk(\"lottery/setIsTransitioning\",/*#__PURE__*/function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref9){var isTransitioning;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:isTransitioning=_ref9.isTransitioning;return _context6.abrupt(\"return\",{isTransitioning:isTransitioning});case 2:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x4){return _ref10.apply(this,arguments);};}());export var LotterySlice=createSlice({name:'Lottery',initialState:initialState,reducers:{setLotteryPublicData:function setLotteryPublicData(state,action){state=action.payload;}},extraReducers:function extraReducers(builder){builder.addCase(fetchCurrentLottery.fulfilled,function(state,action){state.currentRound=_objectSpread(_objectSpread({},state.currentRound),action.payload);});builder.addCase(fetchCurrentLotteryId.fulfilled,function(state,action){state.currentLotteryId=action.payload.currentLotteryId;state.maxNumberTicketsPerBuyOrClaim=action.payload.maxNumberTicketsPerBuyOrClaim;});builder.addCase(fetchUserTicketsAndLotteries.fulfilled,function(state,action){state.currentRound.userTickets.isLoading=false;state.currentRound.userTickets.tickets=action.payload.userTickets;state.userLotteryData=action.payload.userLotteries;});builder.addCase(fetchPastLotteries.fulfilled,function(state,action){state.lotteriesData=action.payload;});builder.addCase(fetchUserLotteries.fulfilled,function(state,action){state.userLotteryData=action.payload;});builder.addCase(setLotteryIsTransitioning.fulfilled,function(state,action){state.isTransitioning=action.payload.isTransitioning;});}});// Actions\nvar setLotteryPublicData=LotterySlice.actions.setLotteryPublicData;export{setLotteryPublicData};export default LotterySlice.reducer;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/state/lottery/index.ts"],"names":["createAsyncThunk","createSlice","LotteryStatus","getGraphLotteries","getGraphLotteryUser","fetchLottery","fetchCurrentLotteryIdAndMaxBuy","fetchTickets","initialState","currentLotteryId","isTransitioning","maxNumberTicketsPerBuyOrClaim","currentRound","isLoading","status","PENDING","startTime","endTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","userTickets","tickets","lotteriesData","userLotteryData","account","totalCake","totalTickets","rounds","fetchCurrentLottery","lotteryInfo","fetchCurrentLotteryId","currentIdAndMaxBuy","fetchUserTicketsAndLotteries","lotteryId","userLotteriesRes","userRoundData","find","round","length","userLotteries","fetchPastLotteries","lotteries","fetchUserLotteries","setLotteryIsTransitioning","LotterySlice","name","reducers","setLotteryPublicData","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { LotteryTicket, LotteryStatus } from 'config/constants/types'\nimport { LotteryState, LotteryRoundGraphEntity, LotteryUserGraphEntity, LotteryResponse } from 'state/types'\nimport {\n  getGraphLotteries,\n  getGraphLotteryUser,\n  fetchLottery,\n  fetchCurrentLotteryIdAndMaxBuy,\n  fetchTickets,\n} from './helpers'\n\ninterface PublicLotteryData {\n  currentLotteryId: string\n  maxNumberTicketsPerBuyOrClaim: string\n}\n\nconst initialState: LotteryState = {\n  currentLotteryId: null,\n  isTransitioning: false,\n  maxNumberTicketsPerBuyOrClaim: null,\n  currentRound: {\n    isLoading: true,\n    status: LotteryStatus.PENDING,\n    startTime: '',\n    endTime: '',\n    priceTicketInCake: '',\n    discountDivisor: '',\n    treasuryFee: '',\n    firstTicketId: '',\n    lastTicketId: '',\n    amountCollectedInCake: '',\n    finalNumber: null,\n    cakePerBracket: [],\n    countWinnersPerBracket: [],\n    rewardsBreakdown: [],\n    userTickets: {\n      isLoading: true,\n      tickets: [],\n    },\n  },\n  lotteriesData: null,\n  userLotteryData: { account: '', totalCake: '', totalTickets: '', rounds: [] },\n}\n\nexport const fetchCurrentLottery = createAsyncThunk<LotteryResponse, { currentLotteryId: string }>(\n  'lottery/fetchCurrentLottery',\n  async ({ currentLotteryId }) => {\n    const lotteryInfo = await fetchLottery(currentLotteryId)\n    return lotteryInfo\n  },\n)\n\nexport const fetchCurrentLotteryId = createAsyncThunk<PublicLotteryData>('lottery/fetchCurrentLotteryId', async () => {\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy()\n  return currentIdAndMaxBuy\n})\n\nexport const fetchUserTicketsAndLotteries = createAsyncThunk<\n  { userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity },\n  { account: string; lotteryId: string }\n>('lottery/fetchUserTicketsAndLotteries', async ({ account, lotteryId }) => {\n  const userLotteriesRes = await getGraphLotteryUser(account)\n  const userRoundData = userLotteriesRes.rounds?.find((round) => round.lotteryId === lotteryId)\n  const userTickets = await fetchTickets(account, lotteryId, userRoundData)\n\n  // user has not bought tickets for the current lottery\n  if (userTickets.length === 0) {\n    return { userTickets: null, userLotteries: userLotteriesRes }\n  }\n\n  return { userTickets, userLotteries: userLotteriesRes }\n})\n\nexport const fetchPastLotteries = createAsyncThunk<LotteryRoundGraphEntity[]>(\n  'lottery/fetchPastLotteries',\n  async () => {\n    const lotteries = await getGraphLotteries()\n    return lotteries\n  },\n)\n\nexport const fetchUserLotteries = createAsyncThunk<LotteryUserGraphEntity, { account: string }>(\n  'lottery/fetchUserLotteries',\n  async ({ account }) => {\n    const userLotteries = await getGraphLotteryUser(account)\n    return userLotteries\n  },\n)\n\nexport const setLotteryIsTransitioning = createAsyncThunk<{ isTransitioning: boolean }, { isTransitioning: boolean }>(\n  `lottery/setIsTransitioning`,\n  async ({ isTransitioning }) => {\n    return { isTransitioning }\n  },\n)\n\nexport const LotterySlice = createSlice({\n  name: 'Lottery',\n  initialState,\n  reducers: {\n    setLotteryPublicData: (state, action) => {\n      state = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action: PayloadAction<LotteryResponse>) => {\n      state.currentRound = { ...state.currentRound, ...action.payload }\n    })\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action: PayloadAction<PublicLotteryData>) => {\n      state.currentLotteryId = action.payload.currentLotteryId\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim\n    })\n    builder.addCase(\n      fetchUserTicketsAndLotteries.fulfilled,\n      (state, action: PayloadAction<{ userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity }>) => {\n        state.currentRound.userTickets.isLoading = false\n        state.currentRound.userTickets.tickets = action.payload.userTickets\n        state.userLotteryData = action.payload.userLotteries\n      },\n    )\n    builder.addCase(fetchPastLotteries.fulfilled, (state, action: PayloadAction<LotteryRoundGraphEntity[]>) => {\n      state.lotteriesData = action.payload\n    })\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action: PayloadAction<LotteryUserGraphEntity>) => {\n      state.userLotteryData = action.payload\n    })\n    builder.addCase(\n      setLotteryIsTransitioning.fulfilled,\n      (state, action: PayloadAction<{ isTransitioning: boolean }>) => {\n        state.isTransitioning = action.payload.isTransitioning\n      },\n    )\n  },\n})\n\n// Actions\nexport const { setLotteryPublicData } = LotterySlice.actions\n\nexport default LotterySlice.reducer\n"]},"metadata":{},"sourceType":"module"}