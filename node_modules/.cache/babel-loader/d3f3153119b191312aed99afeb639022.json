{"ast":null,"code":"import React from'react';import{useRouteMatch,Link}from'react-router-dom';import{ButtonMenu,ButtonMenuItem,Toggle,Text,Flex,NotificationDot,useMatchBreakpoints}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import ToggleView from'./ToggleView/ToggleView';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PoolTabButtons=function PoolTabButtons(_ref){var stakedOnly=_ref.stakedOnly,setStakedOnly=_ref.setStakedOnly,hasStakeInFinishedPools=_ref.hasStakeInFinishedPools,viewMode=_ref.viewMode,setViewMode=_ref.setViewMode;var _useRouteMatch=useRouteMatch(),url=_useRouteMatch.url,isExact=_useRouteMatch.isExact;var _useMatchBreakpoints=useMatchBreakpoints(),isXs=_useMatchBreakpoints.isXs,isSm=_useMatchBreakpoints.isSm;var _useTranslation=useTranslation(),t=_useTranslation.t;var viewModeToggle=/*#__PURE__*/_jsx(ToggleView,{viewMode:viewMode,onToggle:function onToggle(mode){return setViewMode(mode);}});var liveOrFinishedSwitch=/*#__PURE__*/_jsxs(ButtonMenu,{activeIndex:isExact?0:1,scale:\"sm\",variant:\"subtle\",children:[/*#__PURE__*/_jsx(ButtonMenuItem,{as:Link,to:\"\".concat(url),children:t('Live')}),/*#__PURE__*/_jsx(NotificationDot,{show:hasStakeInFinishedPools,children:/*#__PURE__*/_jsx(ButtonMenuItem,{as:Link,to:\"\".concat(url,\"/history\"),children:t('Finished')})})]});var stakedOnlySwitch=/*#__PURE__*/_jsxs(Flex,{mt:['4px',null,0,null],ml:[0,null,'24px',null],justifyContent:\"center\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(Toggle,{scale:\"sm\",checked:stakedOnly,onChange:function onChange(){return setStakedOnly(function(prev){return!prev;});}}),/*#__PURE__*/_jsx(Text,{ml:['4px','4px','8px'],children:t('Staked only')})]});if(isXs||isSm){return/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",alignItems:\"flex-start\",mb:\"24px\",children:[/*#__PURE__*/_jsxs(Flex,{width:\"100%\",justifyContent:\"space-between\",children:[viewModeToggle,liveOrFinishedSwitch]}),stakedOnlySwitch]});}return/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:['space-around','space-around','flex-start'],mb:['24px','24px','24px','0px'],children:[viewModeToggle,liveOrFinishedSwitch,stakedOnlySwitch]});};export default PoolTabButtons;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Pools/components/PoolTabButtons.tsx"],"names":["React","useRouteMatch","Link","ButtonMenu","ButtonMenuItem","Toggle","Text","Flex","NotificationDot","useMatchBreakpoints","useTranslation","ToggleView","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","viewMode","setViewMode","url","isExact","isXs","isSm","t","viewModeToggle","mode","liveOrFinishedSwitch","stakedOnlySwitch","prev"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport {\n  ButtonMenu,\n  ButtonMenuItem,\n  Toggle,\n  Text,\n  Flex,\n  NotificationDot,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport ToggleView, { ViewMode } from './ToggleView/ToggleView'\n\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\n  const { url, isExact } = useRouteMatch()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n\n  const liveOrFinishedSwitch = (\n    <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n      <ButtonMenuItem as={Link} to={`${url}`}>\n        {t('Live')}\n      </ButtonMenuItem>\n      <NotificationDot show={hasStakeInFinishedPools}>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {t('Finished')}\n        </ButtonMenuItem>\n      </NotificationDot>\n    </ButtonMenu>\n  )\n\n  const stakedOnlySwitch = (\n    <Flex mt={['4px', null, 0, null]} ml={[0, null, '24px', null]} justifyContent=\"center\" alignItems=\"center\">\n      <Toggle scale=\"sm\" checked={stakedOnly} onChange={() => setStakedOnly((prev) => !prev)} />\n      <Text ml={['4px', '4px', '8px']}>{t('Staked only')}</Text>\n    </Flex>\n  )\n\n  if (isXs || isSm) {\n    return (\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\" mb=\"24px\">\n        <Flex width=\"100%\" justifyContent=\"space-between\">\n          {viewModeToggle}\n          {liveOrFinishedSwitch}\n        </Flex>\n        {stakedOnlySwitch}\n      </Flex>\n    )\n  }\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent={['space-around', 'space-around', 'flex-start']}\n      mb={['24px', '24px', '24px', '0px']}\n    >\n      {viewModeToggle}\n      {liveOrFinishedSwitch}\n      {stakedOnlySwitch}\n    </Flex>\n  )\n}\n\nexport default PoolTabButtons\n"]},"metadata":{},"sourceType":"module"}