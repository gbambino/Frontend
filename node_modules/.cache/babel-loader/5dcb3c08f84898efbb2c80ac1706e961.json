{"ast":null,"code":"import _taggedTemplateLiteral from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import BigNumber from'bignumber.js';import React from'react';import styled from'styled-components';import{Flex,Text,Box}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{BIG_ZERO}from'utils/bigNumber';import VaultApprovalAction from'./VaultApprovalAction';import VaultStakeActions from'./VaultStakeActions';import{useCheckVaultApprovalStatus}from'../../../hooks/useApprove';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var InlineText=styled(Text)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: inline;\\n\"])));var CakeVaultCardActions=function CakeVaultCardActions(_ref){var pool=_ref.pool,accountHasSharesStaked=_ref.accountHasSharesStaked,isLoading=_ref.isLoading;var stakingToken=pool.stakingToken,userData=pool.userData;var _useTranslation=useTranslation(),t=_useTranslation.t;var stakingTokenBalance=(userData===null||userData===void 0?void 0:userData.stakingTokenBalance)?new BigNumber(userData.stakingTokenBalance):BIG_ZERO;var _useCheckVaultApprova=useCheckVaultApprovalStatus(),isVaultApproved=_useCheckVaultApprova.isVaultApproved,setLastUpdated=_useCheckVaultApprova.setLastUpdated;return/*#__PURE__*/_jsx(Flex,{flexDirection:\"column\",children:/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",children:[/*#__PURE__*/_jsxs(Box,{display:\"inline\",children:[/*#__PURE__*/_jsxs(InlineText,{color:accountHasSharesStaked?'secondary':'textSubtle',textTransform:\"uppercase\",bold:true,fontSize:\"12px\",children:[accountHasSharesStaked?stakingToken.symbol:t('Stake'),' ']}),/*#__PURE__*/_jsx(InlineText,{color:accountHasSharesStaked?'textSubtle':'secondary',textTransform:\"uppercase\",bold:true,fontSize:\"12px\",children:accountHasSharesStaked?t('Staked (compounding)'):\"\".concat(stakingToken.symbol)})]}),isVaultApproved?/*#__PURE__*/_jsx(VaultStakeActions,{isLoading:isLoading,pool:pool,stakingTokenBalance:stakingTokenBalance,accountHasSharesStaked:accountHasSharesStaked}):/*#__PURE__*/_jsx(VaultApprovalAction,{isLoading:isLoading,setLastUpdated:setLastUpdated})]})});};export default CakeVaultCardActions;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx"],"names":["BigNumber","React","styled","Flex","Text","Box","useTranslation","BIG_ZERO","VaultApprovalAction","VaultStakeActions","useCheckVaultApprovalStatus","InlineText","CakeVaultCardActions","pool","accountHasSharesStaked","isLoading","stakingToken","userData","t","stakingTokenBalance","isVaultApproved","setLastUpdated","symbol"],"mappings":"oMAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,IAAT,CAAeC,IAAf,CAAqBC,GAArB,KAAgC,oBAAhC,CACA,OAASC,cAAT,KAA+B,uBAA/B,CAEA,OAASC,QAAT,KAAyB,iBAAzB,CACA,MAAOC,CAAAA,mBAAP,KAAgC,uBAAhC,CACA,MAAOC,CAAAA,iBAAP,KAA8B,qBAA9B,CACA,OAASC,2BAAT,KAA4C,2BAA5C,C,wFAEA,GAAMC,CAAAA,UAAU,CAAGT,MAAM,CAACE,IAAD,CAAT,uFAAhB,CAIA,GAAMQ,CAAAA,oBAIJ,CAAG,QAJCA,CAAAA,oBAID,MAAiD,IAA9CC,CAAAA,IAA8C,MAA9CA,IAA8C,CAAxCC,sBAAwC,MAAxCA,sBAAwC,CAAhBC,SAAgB,MAAhBA,SAAgB,CACpD,GAAQC,CAAAA,YAAR,CAAmCH,IAAnC,CAAQG,YAAR,CAAsBC,QAAtB,CAAmCJ,IAAnC,CAAsBI,QAAtB,CACA,oBAAcX,cAAc,EAA5B,CAAQY,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,mBAAmB,CAAG,CAAAF,QAAQ,OAAR,EAAAA,QAAQ,SAAR,QAAAA,QAAQ,CAAEE,mBAAV,EAAgC,GAAInB,CAAAA,SAAJ,CAAciB,QAAQ,CAACE,mBAAvB,CAAhC,CAA8EZ,QAA1G,CAEA,0BAA4CG,2BAA2B,EAAvE,CAAQU,eAAR,uBAAQA,eAAR,CAAyBC,cAAzB,uBAAyBA,cAAzB,CAEA,mBACE,KAAC,IAAD,EAAM,aAAa,CAAC,QAApB,uBACE,MAAC,IAAD,EAAM,aAAa,CAAC,QAApB,wBACE,MAAC,GAAD,EAAK,OAAO,CAAC,QAAb,wBACE,MAAC,UAAD,EACE,KAAK,CAAEP,sBAAsB,CAAG,WAAH,CAAiB,YADhD,CAEE,aAAa,CAAC,WAFhB,CAGE,IAAI,KAHN,CAIE,QAAQ,CAAC,MAJX,WAMGA,sBAAsB,CAAGE,YAAY,CAACM,MAAhB,CAAyBJ,CAAC,CAAC,OAAD,CANnD,CAM8D,GAN9D,GADF,cASE,KAAC,UAAD,EACE,KAAK,CAAEJ,sBAAsB,CAAG,YAAH,CAAkB,WADjD,CAEE,aAAa,CAAC,WAFhB,CAGE,IAAI,KAHN,CAIE,QAAQ,CAAC,MAJX,UAMGA,sBAAsB,CAAGI,CAAC,CAAC,sBAAD,CAAJ,WAAkCF,YAAY,CAACM,MAA/C,CANzB,EATF,GADF,CAmBGF,eAAe,cACd,KAAC,iBAAD,EACE,SAAS,CAAEL,SADb,CAEE,IAAI,CAAEF,IAFR,CAGE,mBAAmB,CAAEM,mBAHvB,CAIE,sBAAsB,CAAEL,sBAJ1B,EADc,cAQd,KAAC,mBAAD,EAAqB,SAAS,CAAEC,SAAhC,CAA2C,cAAc,CAAEM,cAA3D,EA3BJ,GADF,EADF,CAkCD,CA7CD,CA+CA,cAAeT,CAAAA,oBAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n"]},"metadata":{},"sourceType":"module"}