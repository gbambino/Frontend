{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { getPredictionsContract } from 'utils/contractHelpers';\n\nconst useIsRefundable = epoch => {\n  _s();\n\n  const [isRefundable, setIsRefundable] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract();\n      const canClaim = await predictionsContract.claimable(epoch, account);\n\n      if (canClaim) {\n        const refundable = await predictionsContract.refundable(epoch, account);\n        setIsRefundable(refundable);\n      } else {\n        setIsRefundable(false);\n      }\n    };\n\n    if (account) {\n      fetchRefundableStatus();\n    }\n  }, [account, epoch, setIsRefundable]);\n  return {\n    isRefundable,\n    setIsRefundable\n  };\n};\n\n_s(useIsRefundable, \"bb238Rk90BpggObAKig+6Y0BDz8=\", false, function () {\n  return [useWeb3React];\n});\n\nexport default useIsRefundable;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/views/Predictions/hooks/useIsRefundable.ts"],"names":["useEffect","useState","useWeb3React","getPredictionsContract","useIsRefundable","epoch","isRefundable","setIsRefundable","account","fetchRefundableStatus","predictionsContract","canClaim","claimable","refundable"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,sBAAT,QAAuC,uBAAvC;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAmB;AAAA;;AACzC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,qBAAqB,GAAG,YAAY;AACxC,YAAMC,mBAAmB,GAAGP,sBAAsB,EAAlD;AACA,YAAMQ,QAAQ,GAAG,MAAMD,mBAAmB,CAACE,SAApB,CAA8BP,KAA9B,EAAqCG,OAArC,CAAvB;;AAEA,UAAIG,QAAJ,EAAc;AACZ,cAAME,UAAU,GAAG,MAAMH,mBAAmB,CAACG,UAApB,CAA+BR,KAA/B,EAAsCG,OAAtC,CAAzB;AACAD,QAAAA,eAAe,CAACM,UAAD,CAAf;AACD,OAHD,MAGO;AACLN,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,KAVD;;AAYA,QAAIC,OAAJ,EAAa;AACXC,MAAAA,qBAAqB;AACtB;AACF,GAhBQ,EAgBN,CAACD,OAAD,EAAUH,KAAV,EAAiBE,eAAjB,CAhBM,CAAT;AAkBA,SAAO;AAAED,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAP;AACD,CAvBD;;GAAMH,e;UAEgBF,Y;;;AAuBtB,eAAeE,eAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getPredictionsContract } from 'utils/contractHelpers'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract()\n      const canClaim = await predictionsContract.claimable(epoch, account)\n\n      if (canClaim) {\n        const refundable = await predictionsContract.refundable(epoch, account)\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n"]},"metadata":{},"sourceType":"module"}