{"ast":null,"code":"var _jsxFileName = \"/home/kodachi/Desktop/Frontend1/src/views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport BigNumber from 'bignumber.js';\nimport styled from 'styled-components';\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport { useTranslation } from 'contexts/Localization';\nimport { Flex, MetamaskIcon, Text, TooltipText, LinkExternal, TimerIcon, Skeleton, useTooltip, Button, Link, HelpIcon } from '@pancakeswap/uikit';\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config';\nimport { useBlock, useCakeVault } from 'state/hooks';\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers';\nimport { registerToken } from 'utils/wallet';\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan';\nimport Balance from 'components/Balance';\nimport { getPoolBlockInfo } from 'views/Pools/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`;\n_c = ExpandedWrapper;\n\nconst ExpandedFooter = ({\n  pool,\n  account\n}) => {\n  _s();\n\n  var _window$ethereum;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    currentBlock\n  } = useBlock();\n  const {\n    totalCakeInVault,\n    fees: {\n      performanceFee\n    }\n  } = useCakeVault();\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault\n  } = pool;\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : '';\n  const poolContractAddress = getAddress(contractAddress);\n  const cakeVaultContractAddress = getCakeVaultAddress();\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`;\n  const isMetaMaskInScope = !!((_window$ethereum = window.ethereum) === null || _window$ethereum === void 0 ? void 0 : _window$ethereum.isMetaMask);\n  const isManualCakePool = sousId === 0;\n  const {\n    shouldShowBlockCountdown,\n    blocksUntilStart,\n    blocksRemaining,\n    hasPoolStarted,\n    blocksToDisplay\n  } = getPoolBlockInfo(pool, currentBlock);\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip(t('Subtracted automatically from each yield harvest and burned.'), {\n    placement: 'bottom-start'\n  });\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals);\n    }\n\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault);\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals);\n    }\n\n    return getBalanceNumber(totalStaked, stakingToken.decimals);\n  };\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', {\n    symbol: stakingToken.symbol\n  }), {\n    placement: 'bottom'\n  });\n  return /*#__PURE__*/_jsxDEV(ExpandedWrapper, {\n    flexDirection: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        small: true,\n        children: [t('Total staked'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"flex-start\",\n        children: [totalStaked && totalStaked.gte(0) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Balance, {\n            small: true,\n            value: getTotalStakedBalance(),\n            decimals: 0,\n            unit: ` ${stakingToken.symbol}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            ref: totalStakedTargetRef,\n            children: /*#__PURE__*/_jsxDEV(HelpIcon, {\n              color: \"textSubtle\",\n              width: \"20px\",\n              ml: \"6px\",\n              mt: \"4px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"90px\",\n          height: \"21px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), totalStakedTooltipVisible && totalStakedTooltip]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), stakingLimit && stakingLimit.gt(0) && /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        small: true,\n        children: [t('Max. stake per user'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        small: true,\n        children: `${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), shouldShowBlockCountdown && /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        small: true,\n        children: [hasPoolStarted ? t('Ends in') : t('Starts in'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), blocksRemaining || blocksUntilStart ? /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          external: true,\n          href: getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock),\n          children: [/*#__PURE__*/_jsxDEV(Balance, {\n            small: true,\n            value: blocksToDisplay,\n            decimals: 0,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            small: true,\n            ml: \"4px\",\n            color: \"primary\",\n            textTransform: \"lowercase\",\n            children: t('Blocks')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TimerIcon, {\n            ml: \"4px\",\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"54px\",\n        height: \"21px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), isAutoVault && /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(TooltipText, {\n        ref: targetRef,\n        small: true,\n        children: t('Performance Fee')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          small: true,\n          children: [performanceFee / 100, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(LinkExternal, {\n        href: `https://pancakeswap.info/token/${getAddress(earningToken.address)}`,\n        bold: false,\n        small: true,\n        children: t('See Token Info')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(LinkExternal, {\n        href: earningToken.projectLink,\n        bold: false,\n        small: true,\n        children: t('View Project Site')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), poolContractAddress && /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(LinkExternal, {\n        href: `${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`,\n        bold: false,\n        small: true,\n        children: t('View Contract')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), account && isMetaMaskInScope && tokenAddress && /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"text\",\n        p: \"0\",\n        height: \"auto\",\n        onClick: () => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc),\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          color: \"primary\",\n          fontSize: \"14px\",\n          children: t('Add to Metamask')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MetamaskIcon, {\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpandedFooter, \"Z4fZPb//Ludd6nxjl4GmhaS3H7Q=\", false, function () {\n  return [useTranslation, useBlock, useCakeVault, useTooltip, useTooltip];\n});\n\n_c2 = ExpandedFooter;\nexport default _c3 = /*#__PURE__*/React.memo(ExpandedFooter);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ExpandedWrapper\");\n$RefreshReg$(_c2, \"ExpandedFooter\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx"],"names":["React","BigNumber","styled","getBalanceNumber","getFullDisplayBalance","useTranslation","Flex","MetamaskIcon","Text","TooltipText","LinkExternal","TimerIcon","Skeleton","useTooltip","Button","Link","HelpIcon","BASE_BSC_SCAN_URL","BASE_URL","useBlock","useCakeVault","getAddress","getCakeVaultAddress","registerToken","getBscScanBlockCountdownUrl","Balance","getPoolBlockInfo","ExpandedWrapper","ExpandedFooter","pool","account","t","currentBlock","totalCakeInVault","fees","performanceFee","stakingToken","earningToken","totalStaked","startBlock","endBlock","stakingLimit","contractAddress","sousId","isAutoVault","tokenAddress","address","poolContractAddress","cakeVaultContractAddress","imageSrc","isMetaMaskInScope","window","ethereum","isMetaMask","isManualCakePool","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","targetRef","tooltip","tooltipVisible","placement","getTotalStakedBalance","decimals","manualCakeTotalMinusAutoVault","minus","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","symbol","gte","gt","projectLink","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanBlockCountdownUrl } from 'utils/bscscan'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault,\n  } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${tokenAddress}.png`\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanBlockCountdownUrl(hasPoolStarted ? endBlock : startBlock)}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`https://pancakeswap.info/token/${getAddress(earningToken.address)}`} bold={false} small>\n          {t('See Token Info')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n"]},"metadata":{},"sourceType":"module"}