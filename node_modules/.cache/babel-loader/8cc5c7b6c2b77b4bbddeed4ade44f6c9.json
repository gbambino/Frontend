{"ast":null,"code":"export var tokenEarnedPerThousandDollarsCompounding=function tokenEarnedPerThousandDollarsCompounding(_ref){var numberOfDays=_ref.numberOfDays,farmApr=_ref.farmApr,tokenPrice=_ref.tokenPrice,_ref$roundingDecimals=_ref.roundingDecimals,roundingDecimals=_ref$roundingDecimals===void 0?2:_ref$roundingDecimals,_ref$compoundFrequenc=_ref.compoundFrequency,compoundFrequency=_ref$compoundFrequenc===void 0?1:_ref$compoundFrequenc,_ref$performanceFee=_ref.performanceFee,performanceFee=_ref$performanceFee===void 0?0:_ref$performanceFee;// Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\nvar timesCompounded=365*compoundFrequency;// We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\nvar aprAsDecimal=farmApr/100;if(performanceFee){// Reduce the APR by the % performance fee\nvar feeRelativeToApr=farmApr/100*performanceFee;var aprAfterFee=farmApr-feeRelativeToApr;aprAsDecimal=aprAfterFee/100;}var daysAsDecimalOfYear=numberOfDays/365;// Calculate the starting TOKEN balance with a dollar balance of $1000.\nvar principal=1000/tokenPrice;// This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\nvar finalAmount=principal*Math.pow(1+aprAsDecimal/timesCompounded,timesCompounded*daysAsDecimalOfYear);// To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\nvar interestEarned=finalAmount-principal;return parseFloat(interestEarned.toFixed(roundingDecimals));};export var getRoi=function getRoi(_ref2){var amountEarned=_ref2.amountEarned,amountInvested=_ref2.amountInvested;var percentage=amountEarned/amountInvested*100;return percentage;};","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/utils/compoundApyHelpers.ts"],"names":["tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","feeRelativeToApr","aprAfterFee","daysAsDecimalOfYear","principal","finalAmount","interestEarned","parseFloat","toFixed","getRoi","amountEarned","amountInvested","percentage"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,wCAAwC,CAAG,QAA3CA,CAAAA,wCAA2C,MAOlD,IANJC,CAAAA,YAMI,MANJA,YAMI,CALJC,OAKI,MALJA,OAKI,CAJJC,UAII,MAJJA,UAII,4BAHJC,gBAGI,CAHJA,gBAGI,gCAHe,CAGf,kDAFJC,iBAEI,CAFJA,iBAEI,gCAFgB,CAEhB,gDADJC,cACI,CADJA,cACI,8BADa,CACb,qBACJ;AACA,GAAMC,CAAAA,eAAe,CAAG,IAAMF,iBAA9B,CACA;AACA,GAAIG,CAAAA,YAAY,CAAGN,OAAO,CAAG,GAA7B,CAEA,GAAII,cAAJ,CAAoB,CAClB;AACA,GAAMG,CAAAA,gBAAgB,CAAIP,OAAO,CAAG,GAAX,CAAkBI,cAA3C,CACA,GAAMI,CAAAA,WAAW,CAAGR,OAAO,CAAGO,gBAA9B,CACAD,YAAY,CAAGE,WAAW,CAAG,GAA7B,CACD,CAED,GAAMC,CAAAA,mBAAmB,CAAGV,YAAY,CAAG,GAA3C,CACA;AACA,GAAMW,CAAAA,SAAS,CAAG,KAAOT,UAAzB,CACA;AACA,GAAMU,CAAAA,WAAW,CAAGD,SAAS,UAAI,EAAIJ,YAAY,CAAGD,eAAvB,CAA4CA,eAAe,CAAGI,mBAA9D,CAA7B,CACA;AACA,GAAMG,CAAAA,cAAc,CAAGD,WAAW,CAAGD,SAArC,CAEA,MAAOG,CAAAA,UAAU,CAACD,cAAc,CAACE,OAAf,CAAuBZ,gBAAvB,CAAD,CAAjB,CACD,CA7BM,CA+BP,MAAO,IAAMa,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,OAAsC,IAAnCC,CAAAA,YAAmC,OAAnCA,YAAmC,CAArBC,cAAqB,OAArBA,cAAqB,CAC1D,GAAMC,CAAAA,UAAU,CAAIF,YAAY,CAAGC,cAAhB,CAAkC,GAArD,CACA,MAAOC,CAAAA,UAAP,CACD,CAHM","sourcesContent":["export const tokenEarnedPerThousandDollarsCompounding = ({\n  numberOfDays,\n  farmApr,\n  tokenPrice,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  let aprAsDecimal = farmApr / 100\n\n  if (performanceFee) {\n    // Reduce the APR by the % performance fee\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\n    const aprAfterFee = farmApr - feeRelativeToApr\n    aprAsDecimal = aprAfterFee / 100\n  }\n\n  const daysAsDecimalOfYear = numberOfDays / 365\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\n  const principal = 1000 / tokenPrice\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n  const interestEarned = finalAmount - principal\n\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage\n}\n"]},"metadata":{},"sourceType":"module"}