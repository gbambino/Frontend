{"ast":null,"code":"import BigNumber from'bignumber.js';import{getRoi,tokenEarnedPerThousandDollarsCompounding}from'utils/compoundApyHelpers';import{getBalanceNumber,getFullDisplayBalance,getDecimalAmount}from'utils/formatBalance';export var convertSharesToCake=function convertSharesToCake(shares,cakePerFullShare){var decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:18;var decimalsToRound=arguments.length>3&&arguments[3]!==undefined?arguments[3]:3;var sharePriceNumber=getBalanceNumber(cakePerFullShare,decimals);var amountInCake=new BigNumber(shares.multipliedBy(sharePriceNumber));var cakeAsNumberBalance=getBalanceNumber(amountInCake,decimals);var cakeAsBigNumber=getDecimalAmount(new BigNumber(cakeAsNumberBalance),decimals);var cakeAsDisplayBalance=getFullDisplayBalance(amountInCake,decimals,decimalsToRound);return{cakeAsNumberBalance:cakeAsNumberBalance,cakeAsBigNumber:cakeAsBigNumber,cakeAsDisplayBalance:cakeAsDisplayBalance};};export var convertCakeToShares=function convertCakeToShares(cake,cakePerFullShare){var decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:18;var decimalsToRound=arguments.length>3&&arguments[3]!==undefined?arguments[3]:3;var sharePriceNumber=getBalanceNumber(cakePerFullShare,decimals);var amountInShares=new BigNumber(cake.dividedBy(sharePriceNumber));var sharesAsNumberBalance=getBalanceNumber(amountInShares,decimals);var sharesAsBigNumber=getDecimalAmount(new BigNumber(sharesAsNumberBalance),decimals);var sharesAsDisplayBalance=getFullDisplayBalance(amountInShares,decimals,decimalsToRound);return{sharesAsNumberBalance:sharesAsNumberBalance,sharesAsBigNumber:sharesAsBigNumber,sharesAsDisplayBalance:sharesAsDisplayBalance};};var AUTO_VAULT_COMPOUND_FREQUENCY=288;var MANUAL_POOL_COMPOUND_FREQUENCY=1;export var getAprData=function getAprData(pool,performanceFee){var isAutoVault=pool.isAutoVault,earningTokenPrice=pool.earningTokenPrice,apr=pool.apr;// special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\nvar isHighValueToken=Math.round(earningTokenPrice/1000)>0;var roundingDecimals=isHighValueToken?4:2;//   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\nvar compoundFrequency=isAutoVault?AUTO_VAULT_COMPOUND_FREQUENCY:MANUAL_POOL_COMPOUND_FREQUENCY;if(isAutoVault){var oneThousandDollarsWorthOfToken=1000/earningTokenPrice;var tokenEarnedPerThousand365D=tokenEarnedPerThousandDollarsCompounding({numberOfDays:365,farmApr:apr,tokenPrice:earningTokenPrice,roundingDecimals:roundingDecimals,compoundFrequency:compoundFrequency,performanceFee:performanceFee});var autoApr=getRoi({amountEarned:tokenEarnedPerThousand365D,amountInvested:oneThousandDollarsWorthOfToken});return{apr:autoApr,isHighValueToken:isHighValueToken,roundingDecimals:roundingDecimals,compoundFrequency:compoundFrequency};}return{apr:apr,isHighValueToken:isHighValueToken,roundingDecimals:roundingDecimals,compoundFrequency:compoundFrequency};};export var getCakeVaultEarnings=function getCakeVaultEarnings(account,cakeAtLastUserAction,userShares,pricePerFullShare,earningTokenPrice){var hasAutoEarnings=account&&cakeAtLastUserAction&&cakeAtLastUserAction.gt(0)&&userShares&&userShares.gt(0);var _convertSharesToCake=convertSharesToCake(userShares,pricePerFullShare),cakeAsBigNumber=_convertSharesToCake.cakeAsBigNumber;var autoCakeProfit=cakeAsBigNumber.minus(cakeAtLastUserAction);var autoCakeToDisplay=autoCakeProfit.gte(0)?getBalanceNumber(autoCakeProfit,18):0;var autoUsdProfit=autoCakeProfit.times(earningTokenPrice);var autoUsdToDisplay=autoUsdProfit.gte(0)?getBalanceNumber(autoUsdProfit,18):0;return{hasAutoEarnings:hasAutoEarnings,autoCakeToDisplay:autoCakeToDisplay,autoUsdToDisplay:autoUsdToDisplay};};export var getPoolBlockInfo=function getPoolBlockInfo(pool,currentBlock){var startBlock=pool.startBlock,endBlock=pool.endBlock,isFinished=pool.isFinished;var shouldShowBlockCountdown=Boolean(!isFinished&&startBlock&&endBlock);var blocksUntilStart=Math.max(startBlock-currentBlock,0);var blocksRemaining=Math.max(endBlock-currentBlock,0);var hasPoolStarted=blocksUntilStart===0&&blocksRemaining>0;var blocksToDisplay=hasPoolStarted?blocksRemaining:blocksUntilStart;return{shouldShowBlockCountdown:shouldShowBlockCountdown,blocksUntilStart:blocksUntilStart,blocksRemaining:blocksRemaining,hasPoolStarted:hasPoolStarted,blocksToDisplay:blocksToDisplay};};","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/views/Pools/helpers.tsx"],"names":["BigNumber","getRoi","tokenEarnedPerThousandDollarsCompounding","getBalanceNumber","getFullDisplayBalance","getDecimalAmount","convertSharesToCake","shares","cakePerFullShare","decimals","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertCakeToShares","cake","amountInShares","dividedBy","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","AUTO_VAULT_COMPOUND_FREQUENCY","MANUAL_POOL_COMPOUND_FREQUENCY","getAprData","pool","performanceFee","isAutoVault","earningTokenPrice","apr","isHighValueToken","Math","round","roundingDecimals","compoundFrequency","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand365D","numberOfDays","farmApr","tokenPrice","autoApr","amountEarned","amountInvested","getCakeVaultEarnings","account","cakeAtLastUserAction","userShares","pricePerFullShare","hasAutoEarnings","gt","autoCakeProfit","minus","autoCakeToDisplay","gte","autoUsdProfit","times","autoUsdToDisplay","getPoolBlockInfo","currentBlock","startBlock","endBlock","isFinished","shouldShowBlockCountdown","Boolean","blocksUntilStart","max","blocksRemaining","hasPoolStarted","blocksToDisplay"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { getRoi, tokenEarnedPerThousandDollarsCompounding } from 'utils/compoundApyHelpers'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 288\nconst MANUAL_POOL_COMPOUND_FREQUENCY = 1\n\nexport const getAprData = (pool: Pool, performanceFee: number) => {\n  const { isAutoVault, earningTokenPrice, apr } = pool\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimals = isHighValueToken ? 4 : 2\n\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const compoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_COMPOUND_FREQUENCY\n\n  if (isAutoVault) {\n    const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\n    const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n      numberOfDays: 365,\n      farmApr: apr,\n      tokenPrice: earningTokenPrice,\n      roundingDecimals,\n      compoundFrequency,\n      performanceFee,\n    })\n    const autoApr = getRoi({\n      amountEarned: tokenEarnedPerThousand365D,\n      amountInvested: oneThousandDollarsWorthOfToken,\n    })\n    return { apr: autoApr, isHighValueToken, roundingDecimals, compoundFrequency }\n  }\n  return { apr, isHighValueToken, roundingDecimals, compoundFrequency }\n}\n\nexport const getCakeVaultEarnings = (\n  account: string,\n  cakeAtLastUserAction: BigNumber,\n  userShares: BigNumber,\n  pricePerFullShare: BigNumber,\n  earningTokenPrice: number,\n) => {\n  const hasAutoEarnings =\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\n\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\n}\n\nexport const getPoolBlockInfo = (pool: Pool, currentBlock: number) => {\n  const { startBlock, endBlock, isFinished } = pool\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\n}\n"]},"metadata":{},"sourceType":"module"}