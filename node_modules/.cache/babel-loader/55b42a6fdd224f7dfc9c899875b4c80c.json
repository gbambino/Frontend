{"ast":null,"code":"import _objectSpread from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"nft\"];import React,{useEffect,useState}from'react';import{useWeb3React}from'@web3-react/core';import{useSpecialBunnyCakeVaultContract}from'hooks/useContract';import{getBunnySpecialCakeVaultContract}from'utils/contractHelpers';import NftCard from'./index';import{jsx as _jsx}from\"react/jsx-runtime\";var BunnySpecialCakeVaultCard=function BunnySpecialCakeVaultCard(_ref){var nft=_ref.nft,props=_objectWithoutProperties(_ref,_excluded);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isClaimable=_useState2[0],setIsClaimable=_useState2[1];var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var bunnySpecialCakeVaultContract=useSpecialBunnyCakeVaultContract();var variationId=nft.variationId;var handleClaim=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return bunnySpecialCakeVaultContract.mintNFT();case 2:response=_context.sent;_context.next=5;return response.wait();case 5:setIsClaimable(false);return _context.abrupt(\"return\",response);case 7:case\"end\":return _context.stop();}}},_callee);}));return function handleClaim(){return _ref2.apply(this,arguments);};}();useEffect(function(){var fetchClaimStatus=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var contract,canClaim;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:contract=getBunnySpecialCakeVaultContract();_context2.next=3;return contract.canClaim(account);case 3:canClaim=_context2.sent;setIsClaimable(canClaim);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchClaimStatus(){return _ref3.apply(this,arguments);};}();if(account){fetchClaimStatus();}},[account,variationId,bunnySpecialCakeVaultContract,setIsClaimable]);return/*#__PURE__*/_jsx(NftCard,_objectSpread(_objectSpread({nft:nft},props),{},{canClaim:isClaimable,onClaim:handleClaim}));};export default BunnySpecialCakeVaultCard;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Collectibles/components/NftCard/BunnySpecialCakeVaultCard.tsx"],"names":["React","useEffect","useState","useWeb3React","useSpecialBunnyCakeVaultContract","getBunnySpecialCakeVaultContract","NftCard","BunnySpecialCakeVaultCard","nft","props","isClaimable","setIsClaimable","account","bunnySpecialCakeVaultContract","variationId","handleClaim","mintNFT","response","wait","fetchClaimStatus","contract","canClaim"],"mappings":"s0BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,YAAT,KAA6B,kBAA7B,CAEA,OAASC,gCAAT,KAAiD,mBAAjD,CACA,OAASC,gCAAT,KAAiD,uBAAjD,CACA,MAAOC,CAAAA,OAAP,KAAsC,SAAtC,C,2CAEA,GAAMC,CAAAA,yBAAiD,CAAG,QAApDA,CAAAA,yBAAoD,MAAuB,IAApBC,CAAAA,GAAoB,MAApBA,GAAoB,CAAZC,KAAY,0CAC/E,cAAsCP,QAAQ,CAAC,KAAD,CAA9C,wCAAOQ,WAAP,eAAoBC,cAApB,eACA,kBAAoBR,YAAY,EAAhC,CAAQS,OAAR,eAAQA,OAAR,CACA,GAAMC,CAAAA,6BAA6B,CAAGT,gCAAgC,EAAtE,CACA,GAAQU,CAAAA,WAAR,CAAwBN,GAAxB,CAAQM,WAAR,CAEA,GAAMC,CAAAA,WAAW,2FAAG,sKAC2CF,CAAAA,6BAA6B,CAACG,OAA9B,EAD3C,QACZC,QADY,qCAEZA,CAAAA,QAAQ,CAACC,IAAT,EAFY,QAGlBP,cAAc,CAAC,KAAD,CAAd,CAHkB,gCAIXM,QAJW,wDAAH,kBAAXF,CAAAA,WAAW,2CAAjB,CAOAd,SAAS,CAAC,UAAM,CACd,GAAMkB,CAAAA,gBAAgB,2FAAG,8JACjBC,QADiB,CACNf,gCAAgC,EAD1B,wBAEAe,CAAAA,QAAQ,CAACC,QAAT,CAAkBT,OAAlB,CAFA,QAEjBS,QAFiB,gBAGvBV,cAAc,CAACU,QAAD,CAAd,CAHuB,wDAAH,kBAAhBF,CAAAA,gBAAgB,2CAAtB,CAMA,GAAIP,OAAJ,CAAa,CACXO,gBAAgB,GACjB,CACF,CAVQ,CAUN,CAACP,OAAD,CAAUE,WAAV,CAAuBD,6BAAvB,CAAsDF,cAAtD,CAVM,CAAT,CAYA,mBAAO,KAAC,OAAD,8BAAS,GAAG,CAAEH,GAAd,EAAuBC,KAAvB,MAA8B,QAAQ,CAAEC,WAAxC,CAAqD,OAAO,CAAEK,WAA9D,GAAP,CACD,CA1BD,CA4BA,cAAeR,CAAAA,yBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useSpecialBunnyCakeVaultContract } from 'hooks/useContract'\nimport { getBunnySpecialCakeVaultContract } from 'utils/contractHelpers'\nimport NftCard, { NftCardProps } from './index'\n\nconst BunnySpecialCakeVaultCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const bunnySpecialCakeVaultContract = useSpecialBunnyCakeVaultContract()\n  const { variationId } = nft\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await bunnySpecialCakeVaultContract.mintNFT()\n    await response.wait()\n    setIsClaimable(false)\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const contract = getBunnySpecialCakeVaultContract()\n      const canClaim = await contract.canClaim(account)\n      setIsClaimable(canClaim)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, variationId, bunnySpecialCakeVaultContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default BunnySpecialCakeVaultCard\n"]},"metadata":{},"sourceType":"module"}