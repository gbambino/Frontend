{"ast":null,"code":"import _regeneratorRuntime from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from'react';import{Modal,Flex,Text}from'@pancakeswap/uikit';import{useAppDispatch}from'state';import BigNumber from'bignumber.js';import{useTranslation}from'contexts/Localization';import{useCake,useProfile}from'hooks/useContract';import useApproveConfirmTransaction from'hooks/useApproveConfirmTransaction';import{fetchProfile}from'state/profile';import useToast from'hooks/useToast';import{REGISTER_COST}from'../ProfileCreation/config';import ApproveConfirmButtons from'./ApproveConfirmButtons';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ConfirmProfileCreationModal=function ConfirmProfileCreationModal(_ref){var account=_ref.account,teamId=_ref.teamId,selectedNft=_ref.selectedNft,minimumCakeRequired=_ref.minimumCakeRequired,allowance=_ref.allowance,onDismiss=_ref.onDismiss;var _useTranslation=useTranslation(),t=_useTranslation.t;var profileContract=useProfile();var dispatch=useAppDispatch();var _useToast=useToast(),toastSuccess=_useToast.toastSuccess;var cakeContract=useCake();var _useApproveConfirmTra=useApproveConfirmTransaction({onRequiresApproval:function(){var _onRequiresApproval=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,currentAllowance;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return cakeContract.allowance(account,profileContract.address);case 3:response=_context.sent;currentAllowance=new BigNumber(response.toString());return _context.abrupt(\"return\",currentAllowance.gte(minimumCakeRequired));case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",false);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));function onRequiresApproval(){return _onRequiresApproval.apply(this,arguments);}return onRequiresApproval;}(),onApprove:function onApprove(){return cakeContract.approve(profileContract.address,allowance.toJSON());},onConfirm:function onConfirm(){return profileContract.createProfile(teamId,selectedNft.nftAddress,selectedNft.tokenId);},onSuccess:function(){var _onSuccess=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return dispatch(fetchProfile(account));case 2:onDismiss();toastSuccess(t('Profile created!'));case 4:case\"end\":return _context2.stop();}}},_callee2);}));function onSuccess(){return _onSuccess.apply(this,arguments);}return onSuccess;}()}),isApproving=_useApproveConfirmTra.isApproving,isApproved=_useApproveConfirmTra.isApproved,isConfirmed=_useApproveConfirmTra.isConfirmed,isConfirming=_useApproveConfirmTra.isConfirming,handleApprove=_useApproveConfirmTra.handleApprove,handleConfirm=_useApproveConfirmTra.handleConfirm;return/*#__PURE__*/_jsxs(Modal,{title:t('Complete Profile'),onDismiss:onDismiss,children:[/*#__PURE__*/_jsx(Text,{color:\"textSubtle\",mb:\"8px\",children:t('Submitting NFT to contract and confirming User Name and Team.')}),/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",mb:\"16px\",children:[/*#__PURE__*/_jsx(Text,{children:t('Cost')}),/*#__PURE__*/_jsx(Text,{children:t('%num% CAKE',{num:REGISTER_COST})})]}),/*#__PURE__*/_jsx(ApproveConfirmButtons,{isApproveDisabled:isConfirmed||isConfirming||isApproved,isApproving:isApproving,isConfirmDisabled:!isApproved||isConfirmed,isConfirming:isConfirming,onApprove:handleApprove,onConfirm:handleConfirm})]});};export default ConfirmProfileCreationModal;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/views/Profile/components/ConfirmProfileCreationModal.tsx"],"names":["React","Modal","Flex","Text","useAppDispatch","BigNumber","useTranslation","useCake","useProfile","useApproveConfirmTransaction","fetchProfile","useToast","REGISTER_COST","ApproveConfirmButtons","ConfirmProfileCreationModal","account","teamId","selectedNft","minimumCakeRequired","allowance","onDismiss","t","profileContract","dispatch","toastSuccess","cakeContract","onRequiresApproval","address","response","currentAllowance","toString","gte","onApprove","approve","toJSON","onConfirm","createProfile","nftAddress","tokenId","onSuccess","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","num"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Modal, Flex, Text } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useProfile } from 'hooks/useContract'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { REGISTER_COST } from '../ProfileCreation/config'\nimport ApproveConfirmButtons from './ApproveConfirmButtons'\nimport { State } from '../ProfileCreation/contexts/types'\n\ninterface Props {\n  userName: string\n  selectedNft: State['selectedNft']\n  account: string\n  teamId: number\n  minimumCakeRequired: BigNumber\n  allowance: BigNumber\n  onDismiss?: () => void\n}\n\nconst ConfirmProfileCreationModal: React.FC<Props> = ({\n  account,\n  teamId,\n  selectedNft,\n  minimumCakeRequired,\n  allowance,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const profileContract = useProfile()\n  const dispatch = useAppDispatch()\n  const { toastSuccess } = useToast()\n  const cakeContract = useCake()\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await cakeContract.allowance(account, profileContract.address)\n          const currentAllowance = new BigNumber(response.toString())\n          return currentAllowance.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return cakeContract.approve(profileContract.address, allowance.toJSON())\n      },\n      onConfirm: () => {\n        return profileContract.createProfile(teamId, selectedNft.nftAddress, selectedNft.tokenId)\n      },\n      onSuccess: async () => {\n        await dispatch(fetchProfile(account))\n        onDismiss()\n        toastSuccess(t('Profile created!'))\n      },\n    })\n\n  return (\n    <Modal title={t('Complete Profile')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Submitting NFT to contract and confirming User Name and Team.')}\n      </Text>\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\n        <Text>{t('Cost')}</Text>\n        <Text>{t('%num% CAKE', { num: REGISTER_COST })}</Text>\n      </Flex>\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n    </Modal>\n  )\n}\n\nexport default ConfirmProfileCreationModal\n"]},"metadata":{},"sourceType":"module"}