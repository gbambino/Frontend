{"ast":null,"code":"import _taggedTemplateLiteral from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React from'react';import{Card,CardBody,Heading,Text}from'@pancakeswap/uikit';import styled from'styled-components';import{getBalanceNumber}from'utils/formatBalance';import{useTotalSupply,useBurnedBalance}from'hooks/useTokenBalance';import{useTranslation}from'contexts/Localization';import{getCakeAddress}from'utils/addressHelpers';import CardValue from'./CardValue';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCakeStats=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: auto;\\n\"])));var Row=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  align-items: center;\\n  display: flex;\\n  font-size: 14px;\\n  justify-content: space-between;\\n  margin-bottom: 8px;\\n\"])));var CakeStats=function CakeStats(){var _useTranslation=useTranslation(),t=_useTranslation.t;var totalSupply=useTotalSupply();var burnedBalance=getBalanceNumber(useBurnedBalance(getCakeAddress()));var cakeSupply=totalSupply?getBalanceNumber(totalSupply)-burnedBalance:0;return/*#__PURE__*/_jsx(StyledCakeStats,{children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(Heading,{scale:\"xl\",mb:\"24px\",children:t('TOCO Stats')}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:t('Total TOCO Supply')}),cakeSupply&&/*#__PURE__*/_jsx(CardValue,{fontSize:\"14px\",value:1000000})]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:t('Total TOCO Burned')}),/*#__PURE__*/_jsx(CardValue,{fontSize:\"14px\",decimals:0,value:500000})]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:t('New TOCO/block')}),/*#__PURE__*/_jsx(CardValue,{fontSize:\"14px\",decimals:0,value:5})]})]})});};export default CakeStats;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Home/components/CakeStats.tsx"],"names":["React","Card","CardBody","Heading","Text","styled","getBalanceNumber","useTotalSupply","useBurnedBalance","useTranslation","getCakeAddress","CardValue","StyledCakeStats","Row","div","CakeStats","t","totalSupply","burnedBalance","cakeSupply"],"mappings":"qNAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,QAAf,CAAyBC,OAAzB,CAAkCC,IAAlC,KAA8C,oBAA9C,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,OAASC,cAAT,CAAyBC,gBAAzB,KAAiD,uBAAjD,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,cAAT,KAA+B,sBAA/B,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,C,wFAEA,GAAMC,CAAAA,eAAe,CAAGP,MAAM,CAACJ,IAAD,CAAT,gHAArB,CAKA,GAAMY,CAAAA,GAAG,CAAGR,MAAM,CAACS,GAAV,6LAAT,CAQA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,oBAAcN,cAAc,EAA5B,CAAQO,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,WAAW,CAAGV,cAAc,EAAlC,CACA,GAAMW,CAAAA,aAAa,CAAGZ,gBAAgB,CAACE,gBAAgB,CAACE,cAAc,EAAf,CAAjB,CAAtC,CACA,GAAMS,CAAAA,UAAU,CAAGF,WAAW,CAAGX,gBAAgB,CAACW,WAAD,CAAhB,CAAgCC,aAAnC,CAAmD,CAAjF,CAEA,mBACE,KAAC,eAAD,wBACE,MAAC,QAAD,yBACE,KAAC,OAAD,EAAS,KAAK,CAAC,IAAf,CAAoB,EAAE,CAAC,MAAvB,UACGF,CAAC,CAAC,YAAD,CADJ,EADF,cAIE,MAAC,GAAD,yBACE,KAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,UAAuBA,CAAC,CAAC,mBAAD,CAAxB,EADF,CAEGG,UAAU,eAAI,KAAC,SAAD,EAAW,QAAQ,CAAC,MAApB,CAA2B,KAAK,CAAE,OAAlC,EAFjB,GAJF,cAQE,MAAC,GAAD,yBACE,KAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,UAAuBH,CAAC,CAAC,mBAAD,CAAxB,EADF,cAEE,KAAC,SAAD,EAAW,QAAQ,CAAC,MAApB,CAA2B,QAAQ,CAAE,CAArC,CAAwC,KAAK,CAAE,MAA/C,EAFF,GARF,cAYE,MAAC,GAAD,yBACE,KAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,UAAuBA,CAAC,CAAC,gBAAD,CAAxB,EADF,cAEE,KAAC,SAAD,EAAW,QAAQ,CAAC,MAApB,CAA2B,QAAQ,CAAE,CAArC,CAAwC,KAAK,CAAE,CAA/C,EAFF,GAZF,GADF,EADF,CAqBD,CA3BD,CA6BA,cAAeD,CAAAA,SAAf","sourcesContent":["import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('TOCO Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total TOCO Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={1000000} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total TOCO Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={500000} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('New TOCO/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={5} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n"]},"metadata":{},"sourceType":"module"}