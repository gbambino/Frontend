{"ast":null,"code":"import React from'react';import{CardBody,Flex,Spinner,WaitIcon,TooltipText,useTooltip,InfoIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{BetPosition}from'state/types';import{useGetTotalIntervalBlocks}from'state/hooks';import{RoundResultBox}from'../RoundResult';import MultiplierArrow from'./MultiplierArrow';import Card from'./Card';import CardHeader from'./CardHeader';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var CalculatingCard=function CalculatingCard(_ref){var round=_ref.round;var _useTranslation=useTranslation(),t=_useTranslation.t;var interval=useGetTotalIntervalBlocks();var estimatedEndBlock=round.startBlock+interval;var _useTooltip=useTooltip(t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),{placement:'bottom'}),targetRef=_useTooltip.targetRef,tooltip=_useTooltip.tooltip,tooltipVisible=_useTooltip.tooltipVisible;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(CardHeader,{status:\"calculating\",icon:/*#__PURE__*/_jsx(WaitIcon,{mr:\"4px\",width:\"21px\"}),title:t('Calculating'),epoch:round.epoch,blockNumber:estimatedEndBlock}),/*#__PURE__*/_jsxs(CardBody,{p:\"16px\",children:[/*#__PURE__*/_jsx(MultiplierArrow,{isDisabled:true}),/*#__PURE__*/_jsx(RoundResultBox,{children:/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"center\",flexDirection:\"column\",children:[/*#__PURE__*/_jsx(Spinner,{size:96}),/*#__PURE__*/_jsxs(Flex,{mt:\"8px\",ref:targetRef,children:[/*#__PURE__*/_jsx(TooltipText,{children:t('Calculating')}),/*#__PURE__*/_jsx(InfoIcon,{ml:\"4px\"})]})]})}),/*#__PURE__*/_jsx(MultiplierArrow,{betPosition:BetPosition.BEAR,isDisabled:true})]})]}),tooltipVisible&&tooltip]});};export default CalculatingCard;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Predictions/components/RoundCard/CalculatingCard.tsx"],"names":["React","CardBody","Flex","Spinner","WaitIcon","TooltipText","useTooltip","InfoIcon","useTranslation","BetPosition","useGetTotalIntervalBlocks","RoundResultBox","MultiplierArrow","Card","CardHeader","CalculatingCard","round","t","interval","estimatedEndBlock","startBlock","placement","targetRef","tooltip","tooltipVisible","epoch","BEAR"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,CAAmBC,IAAnB,CAAyBC,OAAzB,CAAkCC,QAAlC,CAA4CC,WAA5C,CAAyDC,UAAzD,CAAqEC,QAArE,KAAqF,oBAArF,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAAoBC,WAApB,KAAuC,aAAvC,CACA,OAASC,yBAAT,KAA0C,aAA1C,CACA,OAASC,cAAT,KAA+B,gBAA/B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,C,6IAMA,GAAMC,CAAAA,eAA+C,CAAG,QAAlDA,CAAAA,eAAkD,MAAe,IAAZC,CAAAA,KAAY,MAAZA,KAAY,CACrE,oBAAcR,cAAc,EAA5B,CAAQS,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGR,yBAAyB,EAA1C,CACA,GAAMS,CAAAA,iBAAiB,CAAGH,KAAK,CAACI,UAAN,CAAmBF,QAA7C,CACA,gBAA+CZ,UAAU,CACvDW,CAAC,CAAC,sGAAD,CADsD,CAEvD,CAAEI,SAAS,CAAE,QAAb,CAFuD,CAAzD,CAAQC,SAAR,aAAQA,SAAR,CAAmBC,OAAnB,aAAmBA,OAAnB,CAA4BC,cAA5B,aAA4BA,cAA5B,CAKA,mBACE,wCACE,MAAC,IAAD,yBACE,KAAC,UAAD,EACE,MAAM,CAAC,aADT,CAEE,IAAI,cAAE,KAAC,QAAD,EAAU,EAAE,CAAC,KAAb,CAAmB,KAAK,CAAC,MAAzB,EAFR,CAGE,KAAK,CAAEP,CAAC,CAAC,aAAD,CAHV,CAIE,KAAK,CAAED,KAAK,CAACS,KAJf,CAKE,WAAW,CAAEN,iBALf,EADF,cAQE,MAAC,QAAD,EAAU,CAAC,CAAC,MAAZ,wBACE,KAAC,eAAD,EAAiB,UAAU,KAA3B,EADF,cAEE,KAAC,cAAD,wBACE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,CAA0B,cAAc,CAAC,QAAzC,CAAkD,aAAa,CAAC,QAAhE,wBACE,KAAC,OAAD,EAAS,IAAI,CAAE,EAAf,EADF,cAEE,MAAC,IAAD,EAAM,EAAE,CAAC,KAAT,CAAe,GAAG,CAAEG,SAApB,wBACE,KAAC,WAAD,WAAcL,CAAC,CAAC,aAAD,CAAf,EADF,cAEE,KAAC,QAAD,EAAU,EAAE,CAAC,KAAb,EAFF,GAFF,GADF,EAFF,cAWE,KAAC,eAAD,EAAiB,WAAW,CAAER,WAAW,CAACiB,IAA1C,CAAgD,UAAU,KAA1D,EAXF,GARF,GADF,CAuBGF,cAAc,EAAID,OAvBrB,GADF,CA2BD,CApCD,CAsCA,cAAeR,CAAAA,eAAf","sourcesContent":["import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: NodeRound\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n"]},"metadata":{},"sourceType":"module"}