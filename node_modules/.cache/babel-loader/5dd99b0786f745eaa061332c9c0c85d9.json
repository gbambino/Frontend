{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useWeb3React}from'@web3-react/core';import{Flex,Button,Text,AutoRenewIcon,PresentWonIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{getBalanceAmount}from'utils/formatBalance';import{callWithEstimateGas}from'utils/calls';import{useLottery,usePriceCakeBusd}from'state/hooks';import{fetchUserLotteries}from'state/lottery';import{useAppDispatch}from'state';import Balance from'components/Balance';import useToast from'hooks/useToast';import{useLotteryV2Contract}from'hooks/useContract';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ClaimInnerContainer=function ClaimInnerContainer(_ref){var onSuccess=_ref.onSuccess,roundsToClaim=_ref.roundsToClaim;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useTranslation=useTranslation(),t=_useTranslation.t;var dispatch=useAppDispatch();var _useLottery=useLottery(),maxNumberTicketsPerBuyOrClaim=_useLottery.maxNumberTicketsPerBuyOrClaim;var _useToast=useToast(),toastSuccess=_useToast.toastSuccess,toastError=_useToast.toastError;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),activeClaimIndex=_useState2[0],setActiveClaimIndex=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),pendingTx=_useState4[0],setPendingTx=_useState4[1];var lotteryContract=useLotteryV2Contract();var activeClaimData=roundsToClaim[activeClaimIndex];var cakePriceBusd=usePriceCakeBusd();var cakeReward=activeClaimData.cakeTotal;var dollarReward=cakeReward.times(cakePriceBusd);var rewardAsBalance=getBalanceAmount(cakeReward).toNumber();var dollarRewardAsBalance=getBalanceAmount(dollarReward).toNumber();var parseUnclaimedTicketDataForClaimCall=function parseUnclaimedTicketDataForClaimCall(ticketsWithUnclaimedRewards,lotteryId){var ticketIds=ticketsWithUnclaimedRewards.map(function(ticket){return ticket.id;});var brackets=ticketsWithUnclaimedRewards.map(function(ticket){return ticket.rewardBracket;});return{lotteryId:lotteryId,ticketIds:ticketIds,brackets:brackets};};var claimTicketsCallData=parseUnclaimedTicketDataForClaimCall(activeClaimData.ticketsWithUnclaimedRewards,activeClaimData.roundId);var shouldBatchRequest=maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length);var totalNumClaimsForRound=function totalNumClaimsForRound(){return Math.ceil(roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length/maxNumberTicketsPerBuyOrClaim.toNumber());};var handleProgressToNextClaim=function handleProgressToNextClaim(){if(roundsToClaim.length>activeClaimIndex+1){// If there are still rounds to claim, move onto the next claim\nsetActiveClaimIndex(activeClaimIndex+1);dispatch(fetchUserLotteries({account:account}));}else{onSuccess();}};var getTicketBatches=function getTicketBatches(ticketIds,brackets){var requests=[];var maxAsNumber=maxNumberTicketsPerBuyOrClaim.toNumber();for(var i=0;i<ticketIds.length;i+=maxAsNumber){var ticketIdsSlice=ticketIds.slice(i,maxAsNumber+i);var bracketsSlice=brackets.slice(i,maxAsNumber+i);requests.push({ticketIds:ticketIdsSlice,brackets:bracketsSlice});}return requests;};var handleClaim=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var lotteryId,ticketIds,brackets,tx,receipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:lotteryId=claimTicketsCallData.lotteryId,ticketIds=claimTicketsCallData.ticketIds,brackets=claimTicketsCallData.brackets;setPendingTx(true);_context.prev=2;_context.next=5;return callWithEstimateGas(lotteryContract,'claimTickets',[lotteryId,ticketIds,brackets]);case 5:tx=_context.sent;_context.next=8;return tx.wait();case 8:receipt=_context.sent;if(receipt.status){toastSuccess(t('Prizes Collected!'),t('Your CAKE prizes for round %lotteryId% have been sent to your wallet',{lotteryId:lotteryId}));setPendingTx(false);handleProgressToNextClaim();}_context.next=17;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](2);console.error(_context.t0);toastError(t('Error'),t('%error% - Please try again.',{error:_context.t0.message}));setPendingTx(false);case 17:case\"end\":return _context.stop();}}},_callee,null,[[2,12]]);}));return function handleClaim(){return _ref2.apply(this,arguments);};}();var handleBatchClaim=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var lotteryId,ticketIds,brackets,ticketBatches,transactionsToFire,receipts,_iterator,_step,ticketBatch,tx,receipt;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:lotteryId=claimTicketsCallData.lotteryId,ticketIds=claimTicketsCallData.ticketIds,brackets=claimTicketsCallData.brackets;ticketBatches=getTicketBatches(ticketIds,brackets);transactionsToFire=ticketBatches.length;receipts=[];setPendingTx(true);// eslint-disable-next-line no-restricted-syntax\n_iterator=_createForOfIteratorHelper(ticketBatches);_context2.prev=6;_iterator.s();case 8:if((_step=_iterator.n()).done){_context2.next=26;break;}ticketBatch=_step.value;_context2.prev=10;_context2.next=13;return callWithEstimateGas(lotteryContract,'claimTickets',[lotteryId,ticketBatch.ticketIds,ticketBatch.brackets]);case 13:tx=_context2.sent;_context2.next=16;return tx.wait();case 16:receipt=_context2.sent;/* eslint-enable no-await-in-loop */if(receipt.status){// One transaction within batch has succeeded\nreceipts.push(receipt);// More transactions are to be done within the batch. Issue toast to give user feedback.\nif(receipts.length!==transactionsToFire){toastSuccess(t('Prizes Collected!'),t('Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transation',{claimNum:receipts.length,claimTotal:transactionsToFire,lotteryId:lotteryId}));}}_context2.next=24;break;case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](10);console.error(_context2.t0);toastError(t('Error'),t('%error% - Please try again.',{error:_context2.t0.message}));case 24:_context2.next=8;break;case 26:_context2.next=31;break;case 28:_context2.prev=28;_context2.t1=_context2[\"catch\"](6);_iterator.e(_context2.t1);case 31:_context2.prev=31;_iterator.f();return _context2.finish(31);case 34:// Batch is finished\nif(receipts.length===transactionsToFire){setPendingTx(false);toastSuccess(t('Prizes Collected!'),t('Your CAKE prizes for round %lotteryId% have been sent to your wallet',{lotteryId:lotteryId}));handleProgressToNextClaim();}case 35:case\"end\":return _context2.stop();}}},_callee2,null,[[6,28,31,34],[10,20]]);}));return function handleBatchClaim(){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",children:[/*#__PURE__*/_jsx(Text,{mb:\"4px\",textAlign:['center',null,'left'],children:t('You won')}),/*#__PURE__*/_jsxs(Flex,{alignItems:['flex-start',null,'center'],justifyContent:['flex-start',null,'space-between'],flexDirection:['column',null,'row'],children:[/*#__PURE__*/_jsx(Balance,{textAlign:['center',null,'left'],lineHeight:\"1.1\",value:rewardAsBalance,fontSize:\"44px\",bold:true,color:\"secondary\",unit:\" CAKE!\"}),/*#__PURE__*/_jsx(PresentWonIcon,{ml:['0',null,'12px'],width:\"64px\"})]}),/*#__PURE__*/_jsx(Balance,{mt:['12px',null,'0'],textAlign:['center',null,'left'],value:dollarRewardAsBalance,fontSize:\"12px\",color:\"textSubtle\",unit:\" USD\",prefix:\"~\"})]}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",justifyContent:\"center\",children:/*#__PURE__*/_jsxs(Text,{mt:\"8px\",fontSize:\"12px\",color:\"textSubtle\",children:[t('Round'),\" #\",activeClaimData.roundId]})}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",justifyContent:\"center\",children:/*#__PURE__*/_jsxs(Button,{isLoading:pendingTx,endIcon:pendingTx?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,mt:\"20px\",width:\"100%\",onClick:function onClick(){return shouldBatchRequest?handleBatchClaim():handleClaim();},children:[pendingTx?t('Claiming'):t('Claim'),\" \",totalNumClaimsForRound()>1?\"(\".concat(totalNumClaimsForRound(),\")\"):'']})})]});};export default ClaimInnerContainer;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx"],"names":["React","useState","useWeb3React","Flex","Button","Text","AutoRenewIcon","PresentWonIcon","useTranslation","getBalanceAmount","callWithEstimateGas","useLottery","usePriceCakeBusd","fetchUserLotteries","useAppDispatch","Balance","useToast","useLotteryV2Contract","ClaimInnerContainer","onSuccess","roundsToClaim","account","t","dispatch","maxNumberTicketsPerBuyOrClaim","toastSuccess","toastError","activeClaimIndex","setActiveClaimIndex","pendingTx","setPendingTx","lotteryContract","activeClaimData","cakePriceBusd","cakeReward","cakeTotal","dollarReward","times","rewardAsBalance","toNumber","dollarRewardAsBalance","parseUnclaimedTicketDataForClaimCall","ticketsWithUnclaimedRewards","lotteryId","ticketIds","map","ticket","id","brackets","rewardBracket","claimTicketsCallData","roundId","shouldBatchRequest","lt","length","totalNumClaimsForRound","Math","ceil","handleProgressToNextClaim","getTicketBatches","requests","maxAsNumber","i","ticketIdsSlice","slice","bracketsSlice","push","handleClaim","tx","wait","receipt","status","console","error","message","handleBatchClaim","ticketBatches","transactionsToFire","receipts","ticketBatch","claimNum","claimTotal"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { callWithEstimateGas } from 'utils/calls'\nimport { useLottery, usePriceCakeBusd } from 'state/hooks'\nimport { fetchUserLotteries } from 'state/lottery'\nimport { useAppDispatch } from 'state'\nimport Balance from 'components/Balance'\nimport useToast from 'hooks/useToast'\nimport { useLotteryV2Contract } from 'hooks/useContract'\n\ninterface ClaimInnerProps {\n  roundsToClaim: LotteryTicketClaimData[]\n  onSuccess?: () => void\n}\n\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { maxNumberTicketsPerBuyOrClaim } = useLottery()\n  const { toastSuccess, toastError } = useToast()\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\n  const [pendingTx, setPendingTx] = useState(false)\n  const lotteryContract = useLotteryV2Contract()\n  const activeClaimData = roundsToClaim[activeClaimIndex]\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const cakeReward = activeClaimData.cakeTotal\n  const dollarReward = cakeReward.times(cakePriceBusd)\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber()\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber()\n\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.id\n    })\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.rewardBracket\n    })\n    return { lotteryId, ticketIds, brackets }\n  }\n\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\n    activeClaimData.ticketsWithUnclaimedRewards,\n    activeClaimData.roundId,\n  )\n\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\n\n  const totalNumClaimsForRound = () =>\n    Math.ceil(\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\n    )\n\n  const handleProgressToNextClaim = () => {\n    if (roundsToClaim.length > activeClaimIndex + 1) {\n      // If there are still rounds to claim, move onto the next claim\n      setActiveClaimIndex(activeClaimIndex + 1)\n      dispatch(fetchUserLotteries({ account }))\n    } else {\n      onSuccess()\n    }\n  }\n\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\n    const requests = []\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\n\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\n    }\n\n    return requests\n  }\n\n  const handleClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    setPendingTx(true)\n    try {\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets])\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(\n          t('Prizes Collected!'),\n          t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\n        )\n        setPendingTx(false)\n        handleProgressToNextClaim()\n      }\n    } catch (error) {\n      console.error(error)\n      toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n      setPendingTx(false)\n    }\n  }\n\n  const handleBatchClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\n    const transactionsToFire = ticketBatches.length\n    const receipts = []\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const ticketBatch of ticketBatches) {\n      try {\n        /* eslint-disable no-await-in-loop */\n        const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [\n          lotteryId,\n          ticketBatch.ticketIds,\n          ticketBatch.brackets,\n        ])\n        const receipt = await tx.wait()\n        /* eslint-enable no-await-in-loop */\n        if (receipt.status) {\n          // One transaction within batch has succeeded\n          receipts.push(receipt)\n\n          // More transactions are to be done within the batch. Issue toast to give user feedback.\n          if (receipts.length !== transactionsToFire) {\n            toastSuccess(\n              t('Prizes Collected!'),\n              t(\n                'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transation',\n                {\n                  claimNum: receipts.length,\n                  claimTotal: transactionsToFire,\n                  lotteryId,\n                },\n              ),\n            )\n          }\n        }\n      } catch (error) {\n        console.error(error)\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n      }\n    }\n\n    // Batch is finished\n    if (receipts.length === transactionsToFire) {\n      setPendingTx(false)\n      toastSuccess(\n        t('Prizes Collected!'),\n        t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\n      )\n      handleProgressToNextClaim()\n    }\n  }\n\n  return (\n    <>\n      <Flex flexDirection=\"column\">\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\n          {t('You won')}\n        </Text>\n        <Flex\n          alignItems={['flex-start', null, 'center']}\n          justifyContent={['flex-start', null, 'space-between']}\n          flexDirection={['column', null, 'row']}\n        >\n          <Balance\n            textAlign={['center', null, 'left']}\n            lineHeight=\"1.1\"\n            value={rewardAsBalance}\n            fontSize=\"44px\"\n            bold\n            color=\"secondary\"\n            unit=\" CAKE!\"\n          />\n          <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" />\n        </Flex>\n        <Balance\n          mt={['12px', null, '0']}\n          textAlign={['center', null, 'left']}\n          value={dollarRewardAsBalance}\n          fontSize=\"12px\"\n          color=\"textSubtle\"\n          unit=\" USD\"\n          prefix=\"~\"\n        />\n      </Flex>\n\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\n          {t('Round')} #{activeClaimData.roundId}\n        </Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          mt=\"20px\"\n          width=\"100%\"\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\n        >\n          {pendingTx ? t('Claiming') : t('Claim')} {totalNumClaimsForRound() > 1 ? `(${totalNumClaimsForRound()})` : ''}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ClaimInnerContainer\n"]},"metadata":{},"sourceType":"module"}