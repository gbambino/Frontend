{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$(),\n    _s19 = $RefreshSig$(),\n    _s20 = $RefreshSig$(),\n    _s21 = $RefreshSig$(),\n    _s22 = $RefreshSig$(),\n    _s23 = $RefreshSig$(),\n    _s24 = $RefreshSig$(),\n    _s25 = $RefreshSig$(),\n    _s26 = $RefreshSig$(),\n    _s27 = $RefreshSig$(),\n    _s28 = $RefreshSig$(),\n    _s29 = $RefreshSig$(),\n    _s30 = $RefreshSig$(),\n    _s31 = $RefreshSig$(),\n    _s32 = $RefreshSig$(),\n    _s33 = $RefreshSig$(),\n    _s34 = $RefreshSig$(),\n    _s35 = $RefreshSig$(),\n    _s36 = $RefreshSig$(),\n    _s37 = $RefreshSig$(),\n    _s38 = $RefreshSig$(),\n    _s39 = $RefreshSig$(),\n    _s40 = $RefreshSig$(),\n    _s41 = $RefreshSig$(),\n    _s42 = $RefreshSig$(),\n    _s43 = $RefreshSig$(),\n    _s44 = $RefreshSig$(),\n    _s45 = $RefreshSig$(),\n    _s46 = $RefreshSig$(),\n    _s47 = $RefreshSig$(),\n    _s48 = $RefreshSig$(),\n    _s49 = $RefreshSig$(),\n    _s50 = $RefreshSig$(),\n    _s51 = $RefreshSig$(),\n    _s52 = $RefreshSig$(),\n    _s53 = $RefreshSig$(),\n    _s54 = $RefreshSig$(),\n    _s55 = $RefreshSig$(),\n    _s56 = $RefreshSig$(),\n    _s57 = $RefreshSig$(),\n    _s58 = $RefreshSig$(),\n    _s59 = $RefreshSig$(),\n    _s60 = $RefreshSig$(),\n    _s61 = $RefreshSig$(),\n    _s62 = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport { minBy, orderBy } from 'lodash';\nimport { useAppDispatch } from 'state';\nimport Nfts from 'config/constants/nfts';\nimport { farmsConfig } from 'config/constants';\nimport { simpleRpcProvider } from 'utils/providers';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport useRefresh from 'hooks/useRefresh';\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers';\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, fetchCakeVaultPublicData, fetchCakeVaultUserData, fetchCakeVaultFees, setBlock } from './actions';\nimport { fetchProfile } from './profile';\nimport { fetchTeam, fetchTeams } from './teams';\nimport { fetchAchievements } from './achievements';\nimport { fetchWalletNfts } from './collectibles';\nimport { parseBigNumberObj } from './predictions/helpers';\nimport { transformPool } from './pools/helpers';\nimport { fetchPoolsStakingLimitsAsync } from './pools';\nimport { fetchFarmUserDataAsync, nonArchivedFarms } from './farms';\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPastLotteries } from './lottery';\nimport { useProcessLotteryResponse } from './lottery/helpers';\nexport const usePollFarmsData = (includeArchive = false) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms;\n    const pids = farmsToFetch.map(farmToFetch => farmToFetch.pid);\n    dispatch(fetchFarmsPublicDataAsync(pids));\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids\n      }));\n    }\n  }, [includeArchive, dispatch, slowRefresh, account]);\n};\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\n\n_s(usePollFarmsData, \"GA0abdQx+3VL0XheKTRFc99Dfws=\", false, function () {\n  return [useAppDispatch, useRefresh, useWeb3React];\n});\n\nexport const usePollCoreFarmData = () => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]));\n  }, [dispatch, fastRefresh]);\n};\n\n_s2(usePollCoreFarmData, \"ioW+pQi/3pF1VdJGlRLsvLuQtVc=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\n\nexport const usePollBlockNumber = () => {\n  _s3();\n\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const blockNumber = await simpleRpcProvider.getBlockNumber();\n      dispatch(setBlock(blockNumber));\n    }, 6000);\n    return () => clearInterval(interval);\n  }, [dispatch]);\n}; // Farms\n\n_s3(usePollBlockNumber, \"DKdeqxp2QYw2p6z8/ErYMRK/Ubo=\", false, function () {\n  return [useAppDispatch];\n});\n\nexport const useFarms = () => {\n  _s4();\n\n  const farms = useSelector(state => state.farms);\n  return farms;\n};\n\n_s4(useFarms, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromPid = pid => {\n  _s5();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return farm;\n};\n\n_s5(useFarmFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromLpSymbol = lpSymbol => {\n  _s6();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n\n_s6(useFarmFromLpSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmUser = pid => {\n  _s7();\n\n  const farm = useFarmFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO\n  };\n}; // Return a farm for a given token symbol. The farm is filtered based on attempting to return a farm with a quote token from an array of preferred quote tokens\n\n_s7(useFarmUser, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useFarmFromTokenSymbol = (tokenSymbol, preferredQuoteTokens) => {\n  _s8();\n\n  const farms = useSelector(state => state.farms.data.filter(farm => farm.token.symbol === tokenSymbol));\n  const filteredFarm = filterFarmsByQuoteToken(farms, preferredQuoteTokens);\n  return filteredFarm;\n}; // Return the base token price for a farm, from a given pid\n\n_s8(useFarmFromTokenSymbol, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const useBusdPriceFromPid = pid => {\n  _s9();\n\n  const farm = useFarmFromPid(pid);\n  return farm && new BigNumber(farm.token.busdPrice);\n};\n\n_s9(useBusdPriceFromPid, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useBusdPriceFromToken = tokenSymbol => {\n  _s10();\n\n  const tokenFarm = useFarmFromTokenSymbol(tokenSymbol);\n  const tokenPrice = useBusdPriceFromPid(tokenFarm === null || tokenFarm === void 0 ? void 0 : tokenFarm.pid);\n  return tokenPrice;\n};\n\n_s10(useBusdPriceFromToken, \"ycv/ZEOiBreIKK0JuL3rH2ItlMU=\", false, function () {\n  return [useFarmFromTokenSymbol, useBusdPriceFromPid];\n});\n\nexport const useLpTokenPrice = symbol => {\n  _s11();\n\n  const farm = useFarmFromLpSymbol(symbol);\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid);\n  let lpTokenPrice = BIG_ZERO;\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal); // Double it to get overall value in LP\n\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2); // Divide total value of all tokens, by the number of LP tokens\n\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply));\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens);\n  }\n\n  return lpTokenPrice;\n}; // Pools\n\n_s11(useLpTokenPrice, \"+hyoswFTXS+XugOwGpb7EaPFmo4=\", false, function () {\n  return [useFarmFromLpSymbol, useBusdPriceFromPid];\n});\n\nexport const useFetchPublicPoolsData = () => {\n  _s12();\n\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await simpleRpcProvider.getBlockNumber();\n      dispatch(fetchPoolsPublicDataAsync(blockNumber));\n    };\n\n    fetchPoolsPublicData();\n    dispatch(fetchPoolsStakingLimitsAsync());\n  }, [dispatch, slowRefresh]);\n};\n\n_s12(useFetchPublicPoolsData, \"wXP7/5vEIZ/qynMYpAGvmXRZfss=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\n\nexport const usePools = account => {\n  _s13();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const {\n    pools,\n    userDataLoaded\n  } = useSelector(state => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded\n  }));\n  return {\n    pools: pools.map(transformPool),\n    userDataLoaded\n  };\n};\n\n_s13(usePools, \"VWrZ+2b3tUz/gcjLdR//y/C6C5s=\", false, function () {\n  return [useRefresh, useAppDispatch, useSelector];\n});\n\nexport const usePoolFromPid = sousId => {\n  _s14();\n\n  const pool = useSelector(state => state.pools.data.find(p => p.sousId === sousId));\n  return transformPool(pool);\n};\n\n_s14(usePoolFromPid, \"NElEvYvoNsaNFrfsmEnHfa4jRII=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFetchCakeVault = () => {\n  _s15();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData());\n  }, [dispatch, fastRefresh]);\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({\n      account\n    }));\n  }, [dispatch, fastRefresh, account]);\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees());\n  }, [dispatch]);\n};\n\n_s15(useFetchCakeVault, \"pDYnJ+ssV2U9HKPEmASotePCeog=\", false, function () {\n  return [useWeb3React, useRefresh, useAppDispatch];\n});\n\nexport const useCakeVault = () => {\n  _s16();\n\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod\n    },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime\n    }\n  } = useSelector(state => state.pools.cakeVault);\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString);\n  }, [estimatedCakeBountyRewardAsString]);\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString);\n  }, [totalPendingCakeHarvestAsString]);\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString);\n  }, [totalSharesAsString]);\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString);\n  }, [pricePerFullShareAsString]);\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString);\n  }, [totalCakeInVaultAsString]);\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString);\n  }, [userSharesAsString]);\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString);\n  }, [cakeAtLastUserActionAsString]);\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime\n    }\n  };\n}; // Profile\n\n_s16(useCakeVault, \"YV6Q9wLle93kMiaCPuN9BNIY1fg=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFetchProfile = () => {\n  _s17();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchProfile(account));\n  }, [account, dispatch]);\n};\n\n_s17(useFetchProfile, \"+HYujYX/SnZ0I8i3/v+l9OV5PuY=\", false, function () {\n  return [useWeb3React, useAppDispatch];\n});\n\nexport const useProfile = () => {\n  _s18();\n\n  const {\n    isInitialized,\n    isLoading,\n    data,\n    hasRegistered\n  } = useSelector(state => state.profile);\n  return {\n    profile: data,\n    hasProfile: isInitialized && hasRegistered,\n    isInitialized,\n    isLoading\n  };\n}; // Teams\n\n_s18(useProfile, \"IKFRbj5HxYVQqavhAzR0F+CGiS4=\", false, function () {\n  return [useSelector];\n});\n\nexport const useTeam = id => {\n  _s19();\n\n  const team = useSelector(state => state.teams.data[id]);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchTeam(id));\n  }, [id, dispatch]);\n  return team;\n};\n\n_s19(useTeam, \"DyuMdVerOKX5fcfe5TyEmnC8m+o=\", false, function () {\n  return [useSelector, useAppDispatch];\n});\n\nexport const useTeams = () => {\n  _s20();\n\n  const {\n    isInitialized,\n    isLoading,\n    data\n  } = useSelector(state => state.teams);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchTeams());\n  }, [dispatch]);\n  return {\n    teams: data,\n    isInitialized,\n    isLoading\n  };\n}; // Achievements\n\n_s20(useTeams, \"MG/rX3obHehsmT4LdcT3JsnsVRA=\", false, function () {\n  return [useSelector, useAppDispatch];\n});\n\nexport const useFetchAchievements = () => {\n  _s21();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account));\n    }\n  }, [account, dispatch]);\n};\n\n_s21(useFetchAchievements, \"+HYujYX/SnZ0I8i3/v+l9OV5PuY=\", false, function () {\n  return [useWeb3React, useAppDispatch];\n});\n\nexport const useAchievements = () => {\n  _s22();\n\n  const achievements = useSelector(state => state.achievements.data);\n  return achievements;\n};\n\n_s22(useAchievements, \"YSK51t5rwnyiHZ93Q8BnGfHM9jA=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePriceBnbBusd = () => {\n  _s23();\n\n  const bnbBusdFarm = useFarmFromPid(252);\n  return new BigNumber(bnbBusdFarm.quoteToken.busdPrice);\n};\n\n_s23(usePriceBnbBusd, \"bjYi8xZd8XQhAOGMAQ3jqbWQ3+Y=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const usePriceCakeBusd = () => {\n  _s24();\n\n  const cakeBnbFarm = useFarmFromPid(251);\n  return new BigNumber(cakeBnbFarm.token.busdPrice);\n}; // Block\n\n_s24(usePriceCakeBusd, \"E5WhNAo4Xw4nRZacFzMD7GdwxEU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useBlock = () => {\n  _s25();\n\n  return useSelector(state => state.block);\n};\n\n_s25(useBlock, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useInitialBlock = () => {\n  _s26();\n\n  return useSelector(state => state.block.initialBlock);\n}; // Predictions\n\n_s26(useInitialBlock, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetRounds = () => {\n  _s27();\n\n  const rounds = useSelector(state => state.predictions.rounds);\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return { ...accum,\n      [epoch]: parseBigNumberObj(rounds[epoch])\n    };\n  }, {});\n};\n\n_s27(useGetRounds, \"NzcuGjY7/e8ANpMudDUPNEr2P38=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetRound = epoch => {\n  _s28();\n\n  const round = useSelector(state => state.predictions.rounds[epoch]);\n  return parseBigNumberObj(round);\n};\n\n_s28(useGetRound, \"I9yr3H2jZEg2pVJJxnbwqUm8+Vg=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetSortedRounds = () => {\n  _s29();\n\n  const roundData = useGetRounds();\n  return orderBy(Object.values(roundData), ['epoch'], ['asc']);\n};\n\n_s29(useGetSortedRounds, \"jFCo8rqHdnklGdNQF/awTvojkG0=\", false, function () {\n  return [useGetRounds];\n});\n\nexport const useGetBetByEpoch = (account, epoch) => {\n  _s30();\n\n  const bets = useSelector(state => state.predictions.ledgers);\n\n  if (!bets[account]) {\n    return null;\n  }\n\n  if (!bets[account][epoch]) {\n    return null;\n  }\n\n  return parseBigNumberObj(bets[account][epoch]);\n};\n\n_s30(useGetBetByEpoch, \"l2hU2dIovtccD4bBSsew9DdDw24=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIsClaimable = epoch => {\n  _s31();\n\n  const claimableStatuses = useSelector(state => state.predictions.claimableStatuses);\n  return claimableStatuses[epoch] || false;\n};\n/**\n * Used to get the range of rounds to poll for\n */\n\n_s31(useGetIsClaimable, \"w8QNveyYtGfi9T0Sqff9LkqaoO0=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetEarliestEpoch = () => {\n  _s32();\n\n  return useSelector(state => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch');\n    return earliestRound === null || earliestRound === void 0 ? void 0 : earliestRound.epoch;\n  });\n};\n\n_s32(useGetEarliestEpoch, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsHistoryPaneOpen = () => {\n  _s33();\n\n  return useSelector(state => state.predictions.isHistoryPaneOpen);\n};\n\n_s33(useIsHistoryPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsChartPaneOpen = () => {\n  _s34();\n\n  return useSelector(state => state.predictions.isChartPaneOpen);\n};\n\n_s34(useIsChartPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentEpoch = () => {\n  _s35();\n\n  return useSelector(state => state.predictions.currentEpoch);\n};\n\n_s35(useGetCurrentEpoch, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIntervalBlocks = () => {\n  _s36();\n\n  return useSelector(state => state.predictions.intervalBlocks);\n};\n\n_s36(useGetIntervalBlocks, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetBufferBlocks = () => {\n  _s37();\n\n  return useSelector(state => state.predictions.bufferBlocks);\n};\n\n_s37(useGetBufferBlocks, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetTotalIntervalBlocks = () => {\n  _s38();\n\n  const intervalBlocks = useGetIntervalBlocks();\n  const bufferBlocks = useGetBufferBlocks();\n  return intervalBlocks + bufferBlocks;\n};\n\n_s38(useGetTotalIntervalBlocks, \"Tu40sOrNdwBfiHoai7qebXljDAY=\", false, function () {\n  return [useGetIntervalBlocks, useGetBufferBlocks];\n});\n\nexport const useGetCurrentRound = () => {\n  _s39();\n\n  const currentEpoch = useGetCurrentEpoch();\n  const rounds = useGetSortedRounds();\n  return rounds.find(round => round.epoch === currentEpoch);\n};\n\n_s39(useGetCurrentRound, \"cJlTwdlLYEKE4Qc5JxH6Xhb/WXY=\", false, function () {\n  return [useGetCurrentEpoch, useGetSortedRounds];\n});\n\nexport const useGetPredictionsStatus = () => {\n  _s40();\n\n  return useSelector(state => state.predictions.status);\n};\n\n_s40(useGetPredictionsStatus, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryFilter = () => {\n  _s41();\n\n  return useSelector(state => state.predictions.historyFilter);\n};\n\n_s41(useGetHistoryFilter, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  _s42();\n\n  return useSelector(state => state.predictions.currentRoundStartBlockNumber);\n};\n\n_s42(useGetCurrentRoundBlockNumber, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetMinBetAmount = () => {\n  _s43();\n\n  const minBetAmount = useSelector(state => state.predictions.minBetAmount);\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount]);\n};\n\n_s43(useGetMinBetAmount, \"0dRfTS7F/4osBkgeEhhyeRmd26g=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetRewardRate = () => {\n  _s44();\n\n  const rewardRate = useSelector(state => state.predictions.rewardRate);\n  return rewardRate / 100;\n};\n\n_s44(useGetRewardRate, \"lTwF82Fzexvd7Gewn8ORgBHi/OY=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIsFetchingHistory = () => {\n  _s45();\n\n  return useSelector(state => state.predictions.isFetchingHistory);\n};\n\n_s45(useGetIsFetchingHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistory = () => {\n  _s46();\n\n  return useSelector(state => state.predictions.history);\n};\n\n_s46(useGetHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryByAccount = account => {\n  _s47();\n\n  const bets = useGetHistory();\n  return bets ? bets[account] : [];\n};\n\n_s47(useGetHistoryByAccount, \"Yrp7yExhLjDp2kAaHnofs1ZdL7U=\", false, function () {\n  return [useGetHistory];\n});\n\nexport const useGetLedgerByRoundId = (account, roundId) => {\n  _s48();\n\n  const ledgers = useSelector(state => state.predictions.ledgers);\n\n  if (!ledgers[account]) {\n    return null;\n  }\n\n  if (!ledgers[account][roundId]) {\n    return null;\n  }\n\n  return ledgers[account][roundId];\n};\n\n_s48(useGetLedgerByRoundId, \"SiwK0RMfROek9ZWxxfWi0Br8aa8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetLastOraclePrice = () => {\n  _s49();\n\n  const lastOraclePrice = useSelector(state => state.predictions.lastOraclePrice);\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice);\n  }, [lastOraclePrice]);\n}; // Collectibles\n\n_s49(useGetLastOraclePrice, \"sP8ZCewbYE0zHEHJigP6zSqhRXs=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCollectibles = () => {\n  _s50();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const {\n    isInitialized,\n    isLoading,\n    data\n  } = useSelector(state => state.collectibles);\n  const identifiers = Object.keys(data);\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account));\n    }\n  }, [isInitialized, account, dispatch]);\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter(nft => identifiers.includes(nft.identifier))\n  };\n}; // Voting\n\n_s50(useGetCollectibles, \"+OJP6i7Yx7acr6GgAtxV2TRO7fk=\", false, function () {\n  return [useWeb3React, useAppDispatch, useSelector];\n});\n\nexport const useGetProposals = () => {\n  _s51();\n\n  const proposals = useSelector(state => state.voting.proposals);\n  return Object.values(proposals);\n};\n\n_s51(useGetProposals, \"m9b/AXU73mU/tBxy+JvWtSa/i3Y=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetProposal = proposalId => {\n  _s52();\n\n  const proposal = useSelector(state => state.voting.proposals[proposalId]);\n  return proposal;\n};\n\n_s52(useGetProposal, \"y99N7HPlCimdFWCyS6yk8qAvemA=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetVotes = proposalId => {\n  _s53();\n\n  const votes = useSelector(state => state.voting.votes[proposalId]);\n  return votes ? votes.filter(vote => vote._inValid !== true) : [];\n};\n\n_s53(useGetVotes, \"MqzTwDuat8ShLL/imhuaiuxVawk=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetVotingStateLoadingStatus = () => {\n  _s54();\n\n  const votingStatus = useSelector(state => state.voting.voteLoadingStatus);\n  return votingStatus;\n};\n\n_s54(useGetVotingStateLoadingStatus, \"ThxaONkPWb4psbkwQU9hP54IohU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetProposalLoadingStatus = () => {\n  _s55();\n\n  const votingStatus = useSelector(state => state.voting.proposalLoadingStatus);\n  return votingStatus;\n}; // Lottery\n\n_s55(useGetProposalLoadingStatus, \"ThxaONkPWb4psbkwQU9hP54IohU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentLotteryId = () => {\n  _s56();\n\n  return useSelector(state => state.lottery.currentLotteryId);\n};\n\n_s56(useGetCurrentLotteryId, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetUserLotteriesGraphData = () => {\n  _s57();\n\n  return useSelector(state => state.lottery.userLotteryData);\n};\n\n_s57(useGetUserLotteriesGraphData, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetUserLotteryGraphRoundById = lotteryId => {\n  _s58();\n\n  const userLotteriesData = useGetUserLotteriesGraphData();\n  return userLotteriesData.rounds.find(userRound => userRound.lotteryId === lotteryId);\n};\n\n_s58(useGetUserLotteryGraphRoundById, \"z8N4awSf+GNb6r9G/MrGRF+GqRY=\", false, function () {\n  return [useGetUserLotteriesGraphData];\n});\n\nexport const useGetLotteriesGraphData = () => {\n  _s59();\n\n  return useSelector(state => state.lottery.lotteriesData);\n};\n\n_s59(useGetLotteriesGraphData, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetLotteryGraphDataById = lotteryId => {\n  _s60();\n\n  const lotteriesData = useGetLotteriesGraphData();\n  return lotteriesData.find(lottery => lottery.id === lotteryId);\n};\n\n_s60(useGetLotteryGraphDataById, \"jI7TCRvqCYJcawyD+w3dAwafvtM=\", false, function () {\n  return [useGetLotteriesGraphData];\n});\n\nexport const useFetchLottery = () => {\n  _s61();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  const currentLotteryId = useGetCurrentLotteryId();\n  useEffect(() => {\n    // get current lottery ID, max tickets and historical lottery subgraph data\n    dispatch(fetchCurrentLotteryId());\n    dispatch(fetchPastLotteries());\n  }, [dispatch]);\n  useEffect(() => {\n    // get public data for current lottery\n    if (currentLotteryId) {\n      dispatch(fetchCurrentLottery({\n        currentLotteryId\n      }));\n    }\n  }, [dispatch, currentLotteryId, fastRefresh]);\n  useEffect(() => {\n    // get user tickets for current lottery, and user lottery subgraph data\n    if (account && currentLotteryId) {\n      dispatch(fetchUserTicketsAndLotteries({\n        account,\n        lotteryId: currentLotteryId\n      }));\n    }\n  }, [dispatch, currentLotteryId, account]);\n};\n\n_s61(useFetchLottery, \"J3IdVYsSzHSNha/vHhWZX5SgbmQ=\", false, function () {\n  return [useWeb3React, useRefresh, useAppDispatch, useGetCurrentLotteryId];\n});\n\nexport const useLottery = () => {\n  _s62();\n\n  const currentRound = useSelector(state => state.lottery.currentRound);\n  const processedCurrentRound = useProcessLotteryResponse(currentRound);\n  const isTransitioning = useSelector(state => state.lottery.isTransitioning);\n  const currentLotteryId = useGetCurrentLotteryId();\n  const userLotteryData = useGetUserLotteriesGraphData();\n  const lotteriesData = useGetLotteriesGraphData();\n  const maxNumberTicketsPerBuyOrClaimAsString = useSelector(state => state.lottery.maxNumberTicketsPerBuyOrClaim);\n  const maxNumberTicketsPerBuyOrClaim = useMemo(() => {\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString);\n  }, [maxNumberTicketsPerBuyOrClaimAsString]);\n  return {\n    currentLotteryId,\n    maxNumberTicketsPerBuyOrClaim,\n    isTransitioning,\n    userLotteryData,\n    lotteriesData,\n    currentRound: processedCurrentRound\n  };\n};\n\n_s62(useLottery, \"oKkMY3Lc45r20/N2JqtZ+jgRftc=\", false, function () {\n  return [useSelector, useProcessLotteryResponse, useSelector, useGetCurrentLotteryId, useGetUserLotteriesGraphData, useGetLotteriesGraphData, useSelector];\n});","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/state/hooks.ts"],"names":["useEffect","useMemo","BigNumber","useWeb3React","useSelector","ethers","minBy","orderBy","useAppDispatch","Nfts","farmsConfig","simpleRpcProvider","getBalanceAmount","BIG_ZERO","useRefresh","filterFarmsByQuoteToken","fetchFarmsPublicDataAsync","fetchPoolsPublicDataAsync","fetchPoolsUserDataAsync","fetchCakeVaultPublicData","fetchCakeVaultUserData","fetchCakeVaultFees","setBlock","fetchProfile","fetchTeam","fetchTeams","fetchAchievements","fetchWalletNfts","parseBigNumberObj","transformPool","fetchPoolsStakingLimitsAsync","fetchFarmUserDataAsync","nonArchivedFarms","fetchCurrentLotteryId","fetchCurrentLottery","fetchUserTicketsAndLotteries","fetchPastLotteries","useProcessLotteryResponse","usePollFarmsData","includeArchive","dispatch","slowRefresh","account","farmsToFetch","pids","map","farmToFetch","pid","usePollCoreFarmData","fastRefresh","usePollBlockNumber","interval","setInterval","blockNumber","getBlockNumber","clearInterval","useFarms","farms","state","useFarmFromPid","farm","data","find","f","useFarmFromLpSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","useFarmFromTokenSymbol","tokenSymbol","preferredQuoteTokens","filter","token","symbol","filteredFarm","useBusdPriceFromPid","busdPrice","useBusdPriceFromToken","tokenFarm","tokenPrice","useLpTokenPrice","farmTokenPriceInUsd","lpTokenPrice","lpTotalSupply","lpTotalInQuoteToken","valueOfBaseTokenInFarm","times","tokenAmountTotal","overallValueOfAllTokensInFarm","totalLpTokens","div","useFetchPublicPoolsData","fetchPoolsPublicData","usePools","pools","userDataLoaded","usePoolFromPid","sousId","pool","p","useFetchCakeVault","useCakeVault","totalShares","totalSharesAsString","pricePerFullShare","pricePerFullShareAsString","totalCakeInVault","totalCakeInVaultAsString","estimatedCakeBountyReward","estimatedCakeBountyRewardAsString","totalPendingCakeHarvest","totalPendingCakeHarvestAsString","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","isLoading","userShares","userSharesAsString","cakeAtLastUserAction","cakeAtLastUserActionAsString","lastDepositedTime","lastUserActionTime","cakeVault","useFetchProfile","useProfile","isInitialized","hasRegistered","profile","hasProfile","useTeam","id","team","teams","useTeams","useFetchAchievements","useAchievements","achievements","usePriceBnbBusd","bnbBusdFarm","quoteToken","usePriceCakeBusd","cakeBnbFarm","useBlock","block","useInitialBlock","initialBlock","useGetRounds","rounds","predictions","Object","keys","reduce","accum","epoch","useGetRound","round","useGetSortedRounds","roundData","values","useGetBetByEpoch","bets","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalBlocks","intervalBlocks","useGetBufferBlocks","bufferBlocks","useGetTotalIntervalBlocks","useGetCurrentRound","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetCurrentRoundBlockNumber","currentRoundStartBlockNumber","useGetMinBetAmount","minBetAmount","from","useGetRewardRate","rewardRate","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetHistoryByAccount","useGetLedgerByRoundId","roundId","useGetLastOraclePrice","lastOraclePrice","useGetCollectibles","collectibles","identifiers","tokenIds","nftsInWallet","nft","includes","identifier","useGetProposals","proposals","voting","useGetProposal","proposalId","proposal","useGetVotes","votes","vote","_inValid","useGetVotingStateLoadingStatus","votingStatus","voteLoadingStatus","useGetProposalLoadingStatus","proposalLoadingStatus","useGetCurrentLotteryId","lottery","currentLotteryId","useGetUserLotteriesGraphData","userLotteryData","useGetUserLotteryGraphRoundById","lotteryId","userLotteriesData","userRound","useGetLotteriesGraphData","lotteriesData","useGetLotteryGraphDataById","useFetchLottery","useLottery","currentRound","processedCurrentRound","isTransitioning","maxNumberTicketsPerBuyOrClaimAsString","maxNumberTicketsPerBuyOrClaim"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { Team } from 'config/constants/types'\nimport Nfts from 'config/constants/nfts'\nimport { farmsConfig } from 'config/constants'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useRefresh from 'hooks/useRefresh'\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\nimport {\n  fetchFarmsPublicDataAsync,\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakeVaultFees,\n  setBlock,\n} from './actions'\nimport {\n  State,\n  Farm,\n  Pool,\n  ProfileState,\n  TeamsState,\n  AchievementState,\n  FarmsState,\n  NodeRound,\n  ReduxNodeLedger,\n  NodeLedger,\n  ReduxNodeRound,\n} from './types'\nimport { fetchProfile } from './profile'\nimport { fetchTeam, fetchTeams } from './teams'\nimport { fetchAchievements } from './achievements'\nimport { fetchWalletNfts } from './collectibles'\nimport { parseBigNumberObj } from './predictions/helpers'\nimport { transformPool } from './pools/helpers'\nimport { fetchPoolsStakingLimitsAsync } from './pools'\nimport { fetchFarmUserDataAsync, nonArchivedFarms } from './farms'\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPastLotteries } from './lottery'\nimport { useProcessLotteryResponse } from './lottery/helpers'\n\nexport const usePollFarmsData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\n\n    dispatch(fetchFarmsPublicDataAsync(pids))\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\n    }\n  }, [includeArchive, dispatch, slowRefresh, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]))\n  }, [dispatch, fastRefresh])\n}\n\nexport const usePollBlockNumber = () => {\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\n      dispatch(setBlock(blockNumber))\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [dispatch])\n}\n\n// Farms\n\nexport const useFarms = (): FarmsState => {\n  const farms = useSelector((state: State) => state.farms)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\n// Return a farm for a given token symbol. The farm is filtered based on attempting to return a farm with a quote token from an array of preferred quote tokens\nexport const useFarmFromTokenSymbol = (tokenSymbol: string, preferredQuoteTokens?: string[]): Farm => {\n  const farms = useSelector((state: State) => state.farms.data.filter((farm) => farm.token.symbol === tokenSymbol))\n  const filteredFarm = filterFarmsByQuoteToken(farms, preferredQuoteTokens)\n  return filteredFarm\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid)\n  return farm && new BigNumber(farm.token.busdPrice)\n}\n\nexport const useBusdPriceFromToken = (tokenSymbol: string): BigNumber => {\n  const tokenFarm = useFarmFromTokenSymbol(tokenSymbol)\n  const tokenPrice = useBusdPriceFromPid(tokenFarm?.pid)\n  return tokenPrice\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol)\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\n  let lpTokenPrice = BIG_ZERO\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\n  }\n\n  return lpTokenPrice\n}\n\n// Pools\n\nexport const useFetchPublicPoolsData = () => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\n    }\n\n    fetchPoolsPublicData()\n    dispatch(fetchPoolsStakingLimitsAsync())\n  }, [dispatch, slowRefresh])\n}\n\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded,\n  }))\n  return { pools: pools.map(transformPool), userDataLoaded }\n}\n\nexport const usePoolFromPid = (sousId: number): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return transformPool(pool)\n}\n\nexport const useFetchCakeVault = () => {\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n  }, [dispatch, fastRefresh])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({ account }))\n  }, [dispatch, fastRefresh, account])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n}\n\nexport const useCakeVault = () => {\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  } = useSelector((state: State) => state.pools.cakeVault)\n\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString)\n  }, [estimatedCakeBountyRewardAsString])\n\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString)\n  }, [totalPendingCakeHarvestAsString])\n\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString)\n  }, [totalSharesAsString])\n\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString)\n  }, [pricePerFullShareAsString])\n\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString)\n  }, [totalCakeInVaultAsString])\n\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString)\n  }, [userSharesAsString])\n\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString)\n  }, [cakeAtLastUserActionAsString])\n\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n\n// Profile\n\nexport const useFetchProfile = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchProfile(account))\n  }, [account, dispatch])\n}\n\nexport const useProfile = () => {\n  const { isInitialized, isLoading, data, hasRegistered }: ProfileState = useSelector((state: State) => state.profile)\n  return { profile: data, hasProfile: isInitialized && hasRegistered, isInitialized, isLoading }\n}\n\n// Teams\n\nexport const useTeam = (id: number) => {\n  const team: Team = useSelector((state: State) => state.teams.data[id])\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeam(id))\n  }, [id, dispatch])\n\n  return team\n}\n\nexport const useTeams = () => {\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeams())\n  }, [dispatch])\n\n  return { teams: data, isInitialized, isLoading }\n}\n\n// Achievements\n\nexport const useFetchAchievements = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account))\n    }\n  }, [account, dispatch])\n}\n\nexport const useAchievements = () => {\n  const achievements: AchievementState['data'] = useSelector((state: State) => state.achievements.data)\n  return achievements\n}\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const bnbBusdFarm = useFarmFromPid(252)\n  return new BigNumber(bnbBusdFarm.quoteToken.busdPrice)\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const cakeBnbFarm = useFarmFromPid(251)\n  return new BigNumber(cakeBnbFarm.token.busdPrice)\n}\n\n// Block\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n\n// Predictions\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalBlocks = () => {\n  return useSelector((state: State) => state.predictions.intervalBlocks)\n}\n\nexport const useGetBufferBlocks = () => {\n  return useSelector((state: State) => state.predictions.bufferBlocks)\n}\n\nexport const useGetTotalIntervalBlocks = () => {\n  const intervalBlocks = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  return intervalBlocks + bufferBlocks\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  return rounds.find((round) => round.epoch === currentEpoch)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetRewardRate = () => {\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\n  return rewardRate / 100\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!ledgers[account]) {\n    return null\n  }\n\n  if (!ledgers[account][roundId]) {\n    return null\n  }\n\n  return ledgers[account][roundId]\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n// Collectibles\nexport const useGetCollectibles = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\n  const identifiers = Object.keys(data)\n\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account))\n    }\n  }, [isInitialized, account, dispatch])\n\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\n  }\n}\n\n// Voting\nexport const useGetProposals = () => {\n  const proposals = useSelector((state: State) => state.voting.proposals)\n  return Object.values(proposals)\n}\n\nexport const useGetProposal = (proposalId: string) => {\n  const proposal = useSelector((state: State) => state.voting.proposals[proposalId])\n  return proposal\n}\n\nexport const useGetVotes = (proposalId: string) => {\n  const votes = useSelector((state: State) => state.voting.votes[proposalId])\n  return votes ? votes.filter((vote) => vote._inValid !== true) : []\n}\n\nexport const useGetVotingStateLoadingStatus = () => {\n  const votingStatus = useSelector((state: State) => state.voting.voteLoadingStatus)\n  return votingStatus\n}\n\nexport const useGetProposalLoadingStatus = () => {\n  const votingStatus = useSelector((state: State) => state.voting.proposalLoadingStatus)\n  return votingStatus\n}\n\n// Lottery\nexport const useGetCurrentLotteryId = () => {\n  return useSelector((state: State) => state.lottery.currentLotteryId)\n}\n\nexport const useGetUserLotteriesGraphData = () => {\n  return useSelector((state: State) => state.lottery.userLotteryData)\n}\n\nexport const useGetUserLotteryGraphRoundById = (lotteryId: string) => {\n  const userLotteriesData = useGetUserLotteriesGraphData()\n  return userLotteriesData.rounds.find((userRound) => userRound.lotteryId === lotteryId)\n}\n\nexport const useGetLotteriesGraphData = () => {\n  return useSelector((state: State) => state.lottery.lotteriesData)\n}\n\nexport const useGetLotteryGraphDataById = (lotteryId: string) => {\n  const lotteriesData = useGetLotteriesGraphData()\n  return lotteriesData.find((lottery) => lottery.id === lotteryId)\n}\n\nexport const useFetchLottery = () => {\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  const currentLotteryId = useGetCurrentLotteryId()\n\n  useEffect(() => {\n    // get current lottery ID, max tickets and historical lottery subgraph data\n    dispatch(fetchCurrentLotteryId())\n    dispatch(fetchPastLotteries())\n  }, [dispatch])\n\n  useEffect(() => {\n    // get public data for current lottery\n    if (currentLotteryId) {\n      dispatch(fetchCurrentLottery({ currentLotteryId }))\n    }\n  }, [dispatch, currentLotteryId, fastRefresh])\n\n  useEffect(() => {\n    // get user tickets for current lottery, and user lottery subgraph data\n    if (account && currentLotteryId) {\n      dispatch(fetchUserTicketsAndLotteries({ account, lotteryId: currentLotteryId }))\n    }\n  }, [dispatch, currentLotteryId, account])\n}\n\nexport const useLottery = () => {\n  const currentRound = useSelector((state: State) => state.lottery.currentRound)\n  const processedCurrentRound = useProcessLotteryResponse(currentRound)\n\n  const isTransitioning = useSelector((state: State) => state.lottery.isTransitioning)\n\n  const currentLotteryId = useGetCurrentLotteryId()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const lotteriesData = useGetLotteriesGraphData()\n\n  const maxNumberTicketsPerBuyOrClaimAsString = useSelector(\n    (state: State) => state.lottery.maxNumberTicketsPerBuyOrClaim,\n  )\n  const maxNumberTicketsPerBuyOrClaim = useMemo(() => {\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString)\n  }, [maxNumberTicketsPerBuyOrClaimAsString])\n\n  return {\n    currentLotteryId,\n    maxNumberTicketsPerBuyOrClaim,\n    isTransitioning,\n    userLotteryData,\n    lotteriesData,\n    currentRound: processedCurrentRound,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}