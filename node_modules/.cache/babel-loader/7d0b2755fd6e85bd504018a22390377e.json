{"ast":null,"code":"import _defineProperty from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject,_templateObject2,_templateObject3;import{request,gql}from'graphql-request';import{GRAPH_API_PREDICTION}from'config/constants/endpoints';import{ethers}from'ethers';import{BetPosition,PredictionStatus}from'state/types';import{multicallv2}from'utils/multicall';import predictionsAbi from'config/abi/predictions.json';import{getPredictionsAddress}from'utils/addressHelpers';import{getRoundBaseFields,getBetBaseFields,getUserBaseFields}from'./queries';export var Result;(function(Result){Result[\"WIN\"]=\"win\";Result[\"LOSE\"]=\"lose\";Result[\"CANCELED\"]=\"canceled\";Result[\"LIVE\"]=\"live\";})(Result||(Result={}));export var numberOrNull=function numberOrNull(value){if(value===null){return null;}var valueNum=Number(value);return Number.isNaN(valueNum)?null:valueNum;};export var transformBetResponse=function transformBetResponse(betResponse){var bet={id:betResponse.id,hash:betResponse.hash,amount:betResponse.amount?parseFloat(betResponse.amount):0,position:betResponse.position==='Bull'?BetPosition.BULL:BetPosition.BEAR,claimed:betResponse.claimed,claimedHash:betResponse.claimedHash,user:{id:betResponse.user.id,address:betResponse.user.address,block:numberOrNull(betResponse.user.block),totalBets:numberOrNull(betResponse.user.totalBets),totalBNB:numberOrNull(betResponse.user.totalBNB)}};if(betResponse.round){bet.round=transformRoundResponse(betResponse.round);}return bet;};export var transformRoundResponse=function transformRoundResponse(roundResponse){var id=roundResponse.id,epoch=roundResponse.epoch,failed=roundResponse.failed,startBlock=roundResponse.startBlock,startAt=roundResponse.startAt,lockAt=roundResponse.lockAt,lockBlock=roundResponse.lockBlock,lockPrice=roundResponse.lockPrice,endBlock=roundResponse.endBlock,closePrice=roundResponse.closePrice,totalBets=roundResponse.totalBets,totalAmount=roundResponse.totalAmount,bullBets=roundResponse.bullBets,bearBets=roundResponse.bearBets,bearAmount=roundResponse.bearAmount,bullAmount=roundResponse.bullAmount,position=roundResponse.position,_roundResponse$bets=roundResponse.bets,bets=_roundResponse$bets===void 0?[]:_roundResponse$bets;var getRoundPosition=function getRoundPosition(positionResponse){if(positionResponse==='Bull'){return BetPosition.BULL;}if(positionResponse==='Bear'){return BetPosition.BEAR;}return null;};return{id:id,failed:failed,epoch:numberOrNull(epoch),startBlock:numberOrNull(startBlock),startAt:numberOrNull(startAt),lockAt:numberOrNull(lockAt),lockBlock:numberOrNull(lockBlock),lockPrice:lockPrice?parseFloat(lockPrice):null,endBlock:numberOrNull(endBlock),closePrice:closePrice?parseFloat(closePrice):null,totalBets:numberOrNull(totalBets),totalAmount:totalAmount?parseFloat(totalAmount):0,bullBets:numberOrNull(bullBets),bearBets:numberOrNull(bearBets),bearAmount:numberOrNull(bearAmount),bullAmount:numberOrNull(bullAmount),position:getRoundPosition(position),bets:bets.map(transformBetResponse)};};export var transformTotalWonResponse=function transformTotalWonResponse(marketResponse,roundResponse){var houseRounds=roundResponse.reduce(function(accum,round){return accum+(round.totalAmount?parseFloat(round.totalAmount):0);},0);var totalBNB=marketResponse.totalBNB?parseFloat(marketResponse.totalBNB):0;var totalBNBTreasury=marketResponse.totalBNBTreasury?parseFloat(marketResponse.totalBNBTreasury):0;return Math.max(totalBNB-(totalBNBTreasury+houseRounds),0);};export var getRoundResult=function getRoundResult(bet,currentEpoch){var round=bet.round;if(round.failed){return Result.CANCELED;}if(round.epoch>=currentEpoch-1){return Result.LIVE;}var roundResultPosition=round.closePrice>round.lockPrice?BetPosition.BULL:BetPosition.BEAR;return bet.position===roundResultPosition?Result.WIN:Result.LOSE;};/**\n * Given a bet object, check if it is eligible to be claimed or refunded\n */export var getCanClaim=function getCanClaim(bet){return!bet.claimed&&(bet.position===bet.round.position||bet.round.failed===true);};/**\n * Returns only bets where the user has won.\n * This is necessary because the API currently cannot distinguish between an uncliamed bet that has won or lost\n */export var getUnclaimedWinningBets=function getUnclaimedWinningBets(bets){return bets.filter(getCanClaim);};export var getTotalWon=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return request(GRAPH_API_PREDICTION,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n      query getTotalWonData($position: String) {\\n        market(id: 1) {\\n          totalBNB\\n          totalBNBTreasury\\n        }\\n        rounds(where: { position: $position }) {\\n          totalAmount\\n        }\\n      }\\n    \"]))),{position:BetPosition.HOUSE});case 2:response=_context.sent;return _context.abrupt(\"return\",transformTotalWonResponse(response.market,response.rounds));case 4:case\"end\":return _context.stop();}}},_callee);}));return function getTotalWon(){return _ref.apply(this,arguments);};}();export var getBetHistory=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var where,first,skip,response,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:where=_args2.length>0&&_args2[0]!==undefined?_args2[0]:{};first=_args2.length>1&&_args2[1]!==undefined?_args2[1]:1000;skip=_args2.length>2&&_args2[2]!==undefined?_args2[2]:0;_context2.next=5;return request(GRAPH_API_PREDICTION,gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\\n        bets(first: $first, skip: $skip, where: $where) {\\n          \",\"\\n          round {\\n            \",\"\\n          }\\n          user {\\n            \",\"\\n          } \\n        }\\n      }\\n    \"])),getBetBaseFields(),getRoundBaseFields(),getUserBaseFields()),{first:first,skip:skip,where:where});case 5:response=_context2.sent;return _context2.abrupt(\"return\",response.bets);case 7:case\"end\":return _context2.stop();}}},_callee2);}));return function getBetHistory(){return _ref2.apply(this,arguments);};}();export var getBet=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(betId){var response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return request(GRAPH_API_PREDICTION,gql(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n      query getBet($id: ID!) {\\n        bet(id: $id) {\\n          \",\"\\n          round {\\n            \",\"\\n          }\\n          user {\\n            \",\"\\n          } \\n        }\\n      }\\n  \"])),getBetBaseFields(),getRoundBaseFields(),getUserBaseFields()),{id:betId.toLowerCase()});case 2:response=_context3.sent;return _context3.abrupt(\"return\",response.bet);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function getBet(_x){return _ref3.apply(this,arguments);};}();// V2 REFACTOR\nexport var getLedgerData=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account,epochs){var address,ledgerCalls,response;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:address=getPredictionsAddress();ledgerCalls=epochs.map(function(epoch){return{address:address,name:'ledger',params:[epoch,account]};});_context4.next=4;return multicallv2(predictionsAbi,ledgerCalls);case 4:response=_context4.sent;return _context4.abrupt(\"return\",response);case 6:case\"end\":return _context4.stop();}}},_callee4);}));return function getLedgerData(_x2,_x3){return _ref4.apply(this,arguments);};}();export var getClaimStatuses=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(account,epochs){var address,claimableCalls,claimableResponses,ledgerResponses;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:address=getPredictionsAddress();claimableCalls=epochs.map(function(epoch){return{address:address,name:'claimable',params:[epoch,account]};});_context5.next=4;return multicallv2(predictionsAbi,claimableCalls);case 4:claimableResponses=_context5.sent;_context5.next=7;return getLedgerData(account,epochs);case 7:ledgerResponses=_context5.sent;return _context5.abrupt(\"return\",claimableResponses.reduce(function(accum,claimableResponse,index){var _ledgerResponses$inde=ledgerResponses[index],amount=_ledgerResponses$inde.amount,claimed=_ledgerResponses$inde.claimed;var epoch=epochs[index];var _claimableResponse=_slicedToArray(claimableResponse,1),claimable=_claimableResponse[0];return _objectSpread(_objectSpread({},accum),{},_defineProperty({},epoch,claimable&&amount.gt(0)&&!claimed));},{}));case 9:case\"end\":return _context5.stop();}}},_callee5);}));return function getClaimStatuses(_x4,_x5){return _ref5.apply(this,arguments);};}();export var getPredictionData=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var address,staticCalls,_yield$multicallv,_yield$multicallv2,_yield$multicallv2$,currentEpoch,_yield$multicallv2$2,intervalBlocks,_yield$multicallv2$3,minBetAmount,_yield$multicallv2$4,paused,_yield$multicallv2$5,bufferBlocks,_yield$multicallv2$6,rewardRate;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:address=getPredictionsAddress();staticCalls=['currentEpoch','intervalBlocks','minBetAmount','paused','bufferBlocks','rewardRate'].map(function(method){return{address:address,name:method};});_context6.next=4;return multicallv2(predictionsAbi,staticCalls);case 4:_yield$multicallv=_context6.sent;_yield$multicallv2=_slicedToArray(_yield$multicallv,6);_yield$multicallv2$=_slicedToArray(_yield$multicallv2[0],1);currentEpoch=_yield$multicallv2$[0];_yield$multicallv2$2=_slicedToArray(_yield$multicallv2[1],1);intervalBlocks=_yield$multicallv2$2[0];_yield$multicallv2$3=_slicedToArray(_yield$multicallv2[2],1);minBetAmount=_yield$multicallv2$3[0];_yield$multicallv2$4=_slicedToArray(_yield$multicallv2[3],1);paused=_yield$multicallv2$4[0];_yield$multicallv2$5=_slicedToArray(_yield$multicallv2[4],1);bufferBlocks=_yield$multicallv2$5[0];_yield$multicallv2$6=_slicedToArray(_yield$multicallv2[5],1);rewardRate=_yield$multicallv2$6[0];return _context6.abrupt(\"return\",{status:paused?PredictionStatus.PAUSED:PredictionStatus.LIVE,currentEpoch:currentEpoch.toNumber(),intervalBlocks:intervalBlocks.toNumber(),bufferBlocks:bufferBlocks.toNumber(),minBetAmount:minBetAmount.toString(),rewardRate:rewardRate.toNumber()});case 19:case\"end\":return _context6.stop();}}},_callee6);}));return function getPredictionData(){return _ref6.apply(this,arguments);};}();export var getRoundsData=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(epochs){var address,calls,response;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:address=getPredictionsAddress();calls=epochs.map(function(epoch){return{address:address,name:'rounds',params:[epoch]};});_context7.next=4;return multicallv2(predictionsAbi,calls);case 4:response=_context7.sent;return _context7.abrupt(\"return\",response);case 6:case\"end\":return _context7.stop();}}},_callee7);}));return function getRoundsData(_x6){return _ref7.apply(this,arguments);};}();export var makeFutureRoundResponse=function makeFutureRoundResponse(epoch,startBlock){return{epoch:epoch,startBlock:startBlock,lockBlock:null,endBlock:null,lockPrice:null,closePrice:null,totalAmount:ethers.BigNumber.from(0).toJSON(),bullAmount:ethers.BigNumber.from(0).toJSON(),bearAmount:ethers.BigNumber.from(0).toJSON(),rewardBaseCalAmount:ethers.BigNumber.from(0).toJSON(),rewardAmount:ethers.BigNumber.from(0).toJSON(),oracleCalled:false};};export var makeRoundData=function makeRoundData(rounds){return rounds.reduce(function(accum,round){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},round.epoch.toString(),round));},{});};export var serializePredictionsLedgerResponse=function serializePredictionsLedgerResponse(ledgerResponse){return{position:ledgerResponse.position===0?BetPosition.BULL:BetPosition.BEAR,amount:ledgerResponse.amount.toJSON(),claimed:ledgerResponse.claimed};};export var makeLedgerData=function makeLedgerData(account,ledgers,epochs){return ledgers.reduce(function(accum,ledgerResponse,index){if(!ledgerResponse){return accum;}// If the amount is zero that means the user did not bet\nif(ledgerResponse.amount.eq(0)){return accum;}var epoch=epochs[index].toString();return _objectSpread(_objectSpread({},accum),{},_defineProperty({},account,_objectSpread(_objectSpread({},accum[account]),{},_defineProperty({},epoch,serializePredictionsLedgerResponse(ledgerResponse)))));},{});};/**\n * Serializes the return from the \"rounds\" call for redux\n */export var serializePredictionsRoundsResponse=function serializePredictionsRoundsResponse(response){var epoch=response.epoch,startBlock=response.startBlock,lockBlock=response.lockBlock,endBlock=response.endBlock,lockPrice=response.lockPrice,closePrice=response.closePrice,totalAmount=response.totalAmount,bullAmount=response.bullAmount,bearAmount=response.bearAmount,rewardAmount=response.rewardAmount,rewardBaseCalAmount=response.rewardBaseCalAmount,oracleCalled=response.oracleCalled;return{epoch:epoch.toNumber(),startBlock:startBlock.toNumber(),lockBlock:lockBlock.toNumber(),endBlock:endBlock.toNumber(),lockPrice:lockPrice.eq(0)?null:lockPrice.toJSON(),closePrice:closePrice.eq(0)?null:closePrice.toJSON(),totalAmount:totalAmount.toJSON(),bullAmount:bullAmount.toJSON(),bearAmount:bearAmount.toJSON(),rewardAmount:rewardAmount.toJSON(),rewardBaseCalAmount:rewardBaseCalAmount.toJSON(),oracleCalled:oracleCalled};};/**\n * Parse serialized values back into ethers.BigNumber\n * ethers.BigNumber values are stored with the \"toJSJON()\" method, e.g  { type: \"BigNumber\", hex: string }\n */export var parseBigNumberObj=function parseBigNumberObj(data){return Object.keys(data).reduce(function(accum,key){var value=data[key];if(value&&(value===null||value===void 0?void 0:value.type)==='BigNumber'){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},key,ethers.BigNumber.from(value)));}return _objectSpread(_objectSpread({},accum),{},_defineProperty({},key,value));},{});};","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/state/predictions/helpers.ts"],"names":["request","gql","GRAPH_API_PREDICTION","ethers","BetPosition","PredictionStatus","multicallv2","predictionsAbi","getPredictionsAddress","getRoundBaseFields","getBetBaseFields","getUserBaseFields","Result","numberOrNull","value","valueNum","Number","isNaN","transformBetResponse","betResponse","bet","id","hash","amount","parseFloat","position","BULL","BEAR","claimed","claimedHash","user","address","block","totalBets","totalBNB","round","transformRoundResponse","roundResponse","epoch","failed","startBlock","startAt","lockAt","lockBlock","lockPrice","endBlock","closePrice","totalAmount","bullBets","bearBets","bearAmount","bullAmount","bets","getRoundPosition","positionResponse","map","transformTotalWonResponse","marketResponse","houseRounds","reduce","accum","totalBNBTreasury","Math","max","getRoundResult","currentEpoch","CANCELED","LIVE","roundResultPosition","WIN","LOSE","getCanClaim","getUnclaimedWinningBets","filter","getTotalWon","HOUSE","response","market","rounds","getBetHistory","where","first","skip","getBet","betId","toLowerCase","getLedgerData","account","epochs","ledgerCalls","name","params","getClaimStatuses","claimableCalls","claimableResponses","ledgerResponses","claimableResponse","index","claimable","gt","getPredictionData","staticCalls","method","intervalBlocks","minBetAmount","paused","bufferBlocks","rewardRate","status","PAUSED","toNumber","toString","getRoundsData","calls","makeFutureRoundResponse","BigNumber","from","toJSON","rewardBaseCalAmount","rewardAmount","oracleCalled","makeRoundData","serializePredictionsLedgerResponse","ledgerResponse","makeLedgerData","ledgers","eq","serializePredictionsRoundsResponse","parseBigNumberObj","data","Object","keys","key","type"],"mappings":"ogCAAA,OAASA,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,oBAAT,KAAqC,4BAArC,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAGEC,WAHF,CAKEC,gBALF,KAUO,aAVP,CAWA,OAASC,WAAT,KAA4B,iBAA5B,CACA,MAAOC,CAAAA,cAAP,KAA2B,6BAA3B,CACA,OAASC,qBAAT,KAAsC,sBAAtC,CAEA,OAEEC,kBAFF,CAGEC,gBAHF,CAIEC,iBAJF,KAQO,WARP,CAUA,UAAYC,CAAAA,MAAZ,C,UAAYA,M,EAAAA,M,cAAAA,M,gBAAAA,M,wBAAAA,M,mBAAAA,M,GAAAA,M,MAOZ,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAmB,CAC7C,GAAIA,KAAK,GAAK,IAAd,CAAoB,CAClB,MAAO,KAAP,CACD,CAED,GAAMC,CAAAA,QAAQ,CAAGC,MAAM,CAACF,KAAD,CAAvB,CACA,MAAOE,CAAAA,MAAM,CAACC,KAAP,CAAaF,QAAb,EAAyB,IAAzB,CAAgCA,QAAvC,CACD,CAPM,CASP,MAAO,IAAMG,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,WAAD,CAAmC,CACrE,GAAMC,CAAAA,GAAG,CAAG,CACVC,EAAE,CAAEF,WAAW,CAACE,EADN,CAEVC,IAAI,CAAEH,WAAW,CAACG,IAFR,CAGVC,MAAM,CAAEJ,WAAW,CAACI,MAAZ,CAAqBC,UAAU,CAACL,WAAW,CAACI,MAAb,CAA/B,CAAsD,CAHpD,CAIVE,QAAQ,CAAEN,WAAW,CAACM,QAAZ,GAAyB,MAAzB,CAAkCrB,WAAW,CAACsB,IAA9C,CAAqDtB,WAAW,CAACuB,IAJjE,CAKVC,OAAO,CAAET,WAAW,CAACS,OALX,CAMVC,WAAW,CAAEV,WAAW,CAACU,WANf,CAOVC,IAAI,CAAE,CACJT,EAAE,CAAEF,WAAW,CAACW,IAAZ,CAAiBT,EADjB,CAEJU,OAAO,CAAEZ,WAAW,CAACW,IAAZ,CAAiBC,OAFtB,CAGJC,KAAK,CAAEnB,YAAY,CAACM,WAAW,CAACW,IAAZ,CAAiBE,KAAlB,CAHf,CAIJC,SAAS,CAAEpB,YAAY,CAACM,WAAW,CAACW,IAAZ,CAAiBG,SAAlB,CAJnB,CAKJC,QAAQ,CAAErB,YAAY,CAACM,WAAW,CAACW,IAAZ,CAAiBI,QAAlB,CALlB,CAPI,CAAZ,CAgBA,GAAIf,WAAW,CAACgB,KAAhB,CAAuB,CACrBf,GAAG,CAACe,KAAJ,CAAYC,sBAAsB,CAACjB,WAAW,CAACgB,KAAb,CAAlC,CACD,CAED,MAAOf,CAAAA,GAAP,CACD,CAtBM,CAwBP,MAAO,IAAMgB,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,aAAD,CAAyC,CAC7E,GACEhB,CAAAA,EADF,CAmBIgB,aAnBJ,CACEhB,EADF,CAEEiB,KAFF,CAmBID,aAnBJ,CAEEC,KAFF,CAGEC,MAHF,CAmBIF,aAnBJ,CAGEE,MAHF,CAIEC,UAJF,CAmBIH,aAnBJ,CAIEG,UAJF,CAKEC,OALF,CAmBIJ,aAnBJ,CAKEI,OALF,CAMEC,MANF,CAmBIL,aAnBJ,CAMEK,MANF,CAOEC,SAPF,CAmBIN,aAnBJ,CAOEM,SAPF,CAQEC,SARF,CAmBIP,aAnBJ,CAQEO,SARF,CASEC,QATF,CAmBIR,aAnBJ,CASEQ,QATF,CAUEC,UAVF,CAmBIT,aAnBJ,CAUES,UAVF,CAWEb,SAXF,CAmBII,aAnBJ,CAWEJ,SAXF,CAYEc,WAZF,CAmBIV,aAnBJ,CAYEU,WAZF,CAaEC,QAbF,CAmBIX,aAnBJ,CAaEW,QAbF,CAcEC,QAdF,CAmBIZ,aAnBJ,CAcEY,QAdF,CAeEC,UAfF,CAmBIb,aAnBJ,CAeEa,UAfF,CAgBEC,UAhBF,CAmBId,aAnBJ,CAgBEc,UAhBF,CAiBE1B,QAjBF,CAmBIY,aAnBJ,CAiBEZ,QAjBF,qBAmBIY,aAnBJ,CAkBEe,IAlBF,CAkBEA,IAlBF,8BAkBS,EAlBT,qBAqBA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,gBAAD,CAA8B,CACrD,GAAIA,gBAAgB,GAAK,MAAzB,CAAiC,CAC/B,MAAOlD,CAAAA,WAAW,CAACsB,IAAnB,CACD,CAED,GAAI4B,gBAAgB,GAAK,MAAzB,CAAiC,CAC/B,MAAOlD,CAAAA,WAAW,CAACuB,IAAnB,CACD,CAED,MAAO,KAAP,CACD,CAVD,CAYA,MAAO,CACLN,EAAE,CAAFA,EADK,CAELkB,MAAM,CAANA,MAFK,CAGLD,KAAK,CAAEzB,YAAY,CAACyB,KAAD,CAHd,CAILE,UAAU,CAAE3B,YAAY,CAAC2B,UAAD,CAJnB,CAKLC,OAAO,CAAE5B,YAAY,CAAC4B,OAAD,CALhB,CAMLC,MAAM,CAAE7B,YAAY,CAAC6B,MAAD,CANf,CAOLC,SAAS,CAAE9B,YAAY,CAAC8B,SAAD,CAPlB,CAQLC,SAAS,CAAEA,SAAS,CAAGpB,UAAU,CAACoB,SAAD,CAAb,CAA2B,IAR1C,CASLC,QAAQ,CAAEhC,YAAY,CAACgC,QAAD,CATjB,CAULC,UAAU,CAAEA,UAAU,CAAGtB,UAAU,CAACsB,UAAD,CAAb,CAA4B,IAV7C,CAWLb,SAAS,CAAEpB,YAAY,CAACoB,SAAD,CAXlB,CAYLc,WAAW,CAAEA,WAAW,CAAGvB,UAAU,CAACuB,WAAD,CAAb,CAA6B,CAZhD,CAaLC,QAAQ,CAAEnC,YAAY,CAACmC,QAAD,CAbjB,CAcLC,QAAQ,CAAEpC,YAAY,CAACoC,QAAD,CAdjB,CAeLC,UAAU,CAAErC,YAAY,CAACqC,UAAD,CAfnB,CAgBLC,UAAU,CAAEtC,YAAY,CAACsC,UAAD,CAhBnB,CAiBL1B,QAAQ,CAAE4B,gBAAgB,CAAC5B,QAAD,CAjBrB,CAkBL2B,IAAI,CAAEA,IAAI,CAACG,GAAL,CAASrC,oBAAT,CAlBD,CAAP,CAoBD,CAtDM,CAwDP,MAAO,IAAMsC,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CACvCC,cADuC,CAEvCpB,aAFuC,CAG5B,CACX,GAAMqB,CAAAA,WAAW,CAAGrB,aAAa,CAACsB,MAAd,CAAqB,SAACC,KAAD,CAAQzB,KAAR,CAAkB,CACzD,MAAOyB,CAAAA,KAAK,EAAIzB,KAAK,CAACY,WAAN,CAAoBvB,UAAU,CAACW,KAAK,CAACY,WAAP,CAA9B,CAAoD,CAAxD,CAAZ,CACD,CAFmB,CAEjB,CAFiB,CAApB,CAIA,GAAMb,CAAAA,QAAQ,CAAGuB,cAAc,CAACvB,QAAf,CAA0BV,UAAU,CAACiC,cAAc,CAACvB,QAAhB,CAApC,CAAgE,CAAjF,CACA,GAAM2B,CAAAA,gBAAgB,CAAGJ,cAAc,CAACI,gBAAf,CAAkCrC,UAAU,CAACiC,cAAc,CAACI,gBAAhB,CAA5C,CAAgF,CAAzG,CAEA,MAAOC,CAAAA,IAAI,CAACC,GAAL,CAAS7B,QAAQ,EAAI2B,gBAAgB,CAAGH,WAAvB,CAAjB,CAAsD,CAAtD,CAAP,CACD,CAZM,CAcP,MAAO,IAAMM,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAC5C,GAAD,CAAW6C,YAAX,CAA4C,CACxE,GAAQ9B,CAAAA,KAAR,CAAkBf,GAAlB,CAAQe,KAAR,CACA,GAAIA,KAAK,CAACI,MAAV,CAAkB,CAChB,MAAO3B,CAAAA,MAAM,CAACsD,QAAd,CACD,CAED,GAAI/B,KAAK,CAACG,KAAN,EAAe2B,YAAY,CAAG,CAAlC,CAAqC,CACnC,MAAOrD,CAAAA,MAAM,CAACuD,IAAd,CACD,CACD,GAAMC,CAAAA,mBAAmB,CAAGjC,KAAK,CAACW,UAAN,CAAmBX,KAAK,CAACS,SAAzB,CAAqCxC,WAAW,CAACsB,IAAjD,CAAwDtB,WAAW,CAACuB,IAAhG,CAEA,MAAOP,CAAAA,GAAG,CAACK,QAAJ,GAAiB2C,mBAAjB,CAAuCxD,MAAM,CAACyD,GAA9C,CAAoDzD,MAAM,CAAC0D,IAAlE,CACD,CAZM,CAcP;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACnD,GAAD,CAAc,CACvC,MAAO,CAACA,GAAG,CAACQ,OAAL,GAAiBR,GAAG,CAACK,QAAJ,GAAiBL,GAAG,CAACe,KAAJ,CAAUV,QAA3B,EAAuCL,GAAG,CAACe,KAAJ,CAAUI,MAAV,GAAqB,IAA7E,CAAP,CACD,CAFM,CAIP;AACA;AACA;AACA,GACA,MAAO,IAAMiC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACpB,IAAD,CAAwB,CAC7D,MAAOA,CAAAA,IAAI,CAACqB,MAAL,CAAYF,WAAZ,CAAP,CACD,CAFM,CAIP,MAAO,IAAMG,CAAAA,WAAW,0FAAG,sKACD1E,CAAAA,OAAO,CAC7BE,oBAD6B,CAE7BD,GAF6B,2SAa7B,CAAEwB,QAAQ,CAAErB,WAAW,CAACuE,KAAxB,CAb6B,CADN,QACnBC,QADmB,+CAiBlBpB,yBAAyB,CAACoB,QAAQ,CAACC,MAAV,CAAkBD,QAAQ,CAACE,MAA3B,CAjBP,wDAAH,kBAAXJ,CAAAA,WAAW,0CAAjB,CAsBP,MAAO,IAAMK,CAAAA,aAAa,2FAAG,uLAC3BC,KAD2B,kDACI,EADJ,CAE3BC,KAF2B,kDAEnB,IAFmB,CAG3BC,IAH2B,kDAGpB,CAHoB,wBAKJlF,CAAAA,OAAO,CAC5BE,oBAD4B,CAE5BD,GAF4B,qVAKpBS,gBAAgB,EALI,CAOlBD,kBAAkB,EAPA,CAUlBE,iBAAiB,EAVC,EAe5B,CAAEsE,KAAK,CAALA,KAAF,CAASC,IAAI,CAAJA,IAAT,CAAeF,KAAK,CAALA,KAAf,CAf4B,CALH,QAKrBJ,QALqB,iDAsBpBA,QAAQ,CAACxB,IAtBW,0DAAH,kBAAb2B,CAAAA,aAAa,2CAAnB,CAyBP,MAAO,IAAMI,CAAAA,MAAM,2FAAG,kBAAOC,KAAP,0JACGpF,CAAAA,OAAO,CAC5BE,oBAD4B,CAE5BD,GAF4B,oQAKpBS,gBAAgB,EALI,CAOlBD,kBAAkB,EAPA,CAUlBE,iBAAiB,EAVC,EAe5B,CACEU,EAAE,CAAE+D,KAAK,CAACC,WAAN,EADN,CAf4B,CADV,QACdT,QADc,iDAoBbA,QAAQ,CAACxD,GApBI,0DAAH,kBAAN+D,CAAAA,MAAM,6CAAZ,CAuBP;AACA,MAAO,IAAMG,CAAAA,aAAa,2FAAG,kBAAOC,OAAP,CAAwBC,MAAxB,uJACrBzD,OADqB,CACXvB,qBAAqB,EADV,CAErBiF,WAFqB,CAEPD,MAAM,CAACjC,GAAP,CAAW,SAACjB,KAAD,QAAY,CACzCP,OAAO,CAAPA,OADyC,CAEzC2D,IAAI,CAAE,QAFmC,CAGzCC,MAAM,CAAE,CAACrD,KAAD,CAAQiD,OAAR,CAHiC,CAAZ,EAAX,CAFO,wBAOJjF,CAAAA,WAAW,CAA8BC,cAA9B,CAA8CkF,WAA9C,CAPP,QAOrBb,QAPqB,iDAQpBA,QARoB,0DAAH,kBAAbU,CAAAA,aAAa,kDAAnB,CAWP,MAAO,IAAMM,CAAAA,gBAAgB,2FAAG,kBAC9BL,OAD8B,CAE9BC,MAF8B,oLAIxBzD,OAJwB,CAIdvB,qBAAqB,EAJP,CAKxBqF,cALwB,CAKPL,MAAM,CAACjC,GAAP,CAAW,SAACjB,KAAD,QAAY,CAC5CP,OAAO,CAAPA,OAD4C,CAE5C2D,IAAI,CAAE,WAFsC,CAG5CC,MAAM,CAAE,CAACrD,KAAD,CAAQiD,OAAR,CAHoC,CAAZ,EAAX,CALO,wBAUGjF,CAAAA,WAAW,CAAmCC,cAAnC,CAAmDsF,cAAnD,CAVd,QAUxBC,kBAVwB,uCAeAR,CAAAA,aAAa,CAACC,OAAD,CAAUC,MAAV,CAfb,QAexBO,eAfwB,iDAiBvBD,kBAAkB,CAACnC,MAAnB,CAA0B,SAACC,KAAD,CAAQoC,iBAAR,CAA2BC,KAA3B,CAAqC,CACpE,0BAA4BF,eAAe,CAACE,KAAD,CAA3C,CAAQ1E,MAAR,uBAAQA,MAAR,CAAgBK,OAAhB,uBAAgBA,OAAhB,CACA,GAAMU,CAAAA,KAAK,CAAGkD,MAAM,CAACS,KAAD,CAApB,CACA,sCAAoBD,iBAApB,IAAOE,SAAP,uBAEA,sCACKtC,KADL,wBAEGtB,KAFH,CAEW4D,SAAS,EAAI3E,MAAM,CAAC4E,EAAP,CAAU,CAAV,CAAb,EAA6B,CAACvE,OAFzC,GAID,CATM,CASJ,EATI,CAjBuB,0DAAH,kBAAhBgE,CAAAA,gBAAgB,kDAAtB,CAiCP,MAAO,IAAMQ,CAAAA,iBAAiB,2FAAG,0YACzBrE,OADyB,CACfvB,qBAAqB,EADN,CAEzB6F,WAFyB,CAEX,CAAC,cAAD,CAAiB,gBAAjB,CAAmC,cAAnC,CAAmD,QAAnD,CAA6D,cAA7D,CAA6E,YAA7E,EAA2F9C,GAA3F,CAClB,SAAC+C,MAAD,QAAa,CACXvE,OAAO,CAAPA,OADW,CAEX2D,IAAI,CAAEY,MAFK,CAAb,EADkB,CAFW,wBAQ0EhG,CAAAA,WAAW,CAClHC,cADkH,CAElH8F,WAFkH,CARrF,4JAQvBpC,YARuB,qFAQPsC,cARO,sFAQWC,YARX,sFAQ2BC,MAR3B,sFAQqCC,YARrC,sFAQqDC,UARrD,0DAaxB,CACLC,MAAM,CAAEH,MAAM,CAAGpG,gBAAgB,CAACwG,MAApB,CAA6BxG,gBAAgB,CAAC8D,IADvD,CAELF,YAAY,CAAEA,YAAY,CAAC6C,QAAb,EAFT,CAGLP,cAAc,CAAEA,cAAc,CAACO,QAAf,EAHX,CAILJ,YAAY,CAAEA,YAAY,CAACI,QAAb,EAJT,CAKLN,YAAY,CAAEA,YAAY,CAACO,QAAb,EALT,CAMLJ,UAAU,CAAEA,UAAU,CAACG,QAAX,EANP,CAbwB,2DAAH,kBAAjBV,CAAAA,iBAAiB,2CAAvB,CAuBP,MAAO,IAAMY,CAAAA,aAAa,2FAAG,kBAAOxB,MAAP,iJACrBzD,OADqB,CACXvB,qBAAqB,EADV,CAErByG,KAFqB,CAEbzB,MAAM,CAACjC,GAAP,CAAW,SAACjB,KAAD,QAAY,CACnCP,OAAO,CAAPA,OADmC,CAEnC2D,IAAI,CAAE,QAF6B,CAGnCC,MAAM,CAAE,CAACrD,KAAD,CAH2B,CAAZ,EAAX,CAFa,wBAOJhC,CAAAA,WAAW,CAA8BC,cAA9B,CAA8C0G,KAA9C,CAPP,QAOrBrC,QAPqB,iDAQpBA,QARoB,0DAAH,kBAAboC,CAAAA,aAAa,8CAAnB,CAWP,MAAO,IAAME,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAC5E,KAAD,CAAgBE,UAAhB,CAAuD,CAC5F,MAAO,CACLF,KAAK,CAALA,KADK,CAELE,UAAU,CAAVA,UAFK,CAGLG,SAAS,CAAE,IAHN,CAILE,QAAQ,CAAE,IAJL,CAKLD,SAAS,CAAE,IALN,CAMLE,UAAU,CAAE,IANP,CAOLC,WAAW,CAAE5C,MAAM,CAACgH,SAAP,CAAiBC,IAAjB,CAAsB,CAAtB,EAAyBC,MAAzB,EAPR,CAQLlE,UAAU,CAAEhD,MAAM,CAACgH,SAAP,CAAiBC,IAAjB,CAAsB,CAAtB,EAAyBC,MAAzB,EARP,CASLnE,UAAU,CAAE/C,MAAM,CAACgH,SAAP,CAAiBC,IAAjB,CAAsB,CAAtB,EAAyBC,MAAzB,EATP,CAULC,mBAAmB,CAAEnH,MAAM,CAACgH,SAAP,CAAiBC,IAAjB,CAAsB,CAAtB,EAAyBC,MAAzB,EAVhB,CAWLE,YAAY,CAAEpH,MAAM,CAACgH,SAAP,CAAiBC,IAAjB,CAAsB,CAAtB,EAAyBC,MAAzB,EAXT,CAYLG,YAAY,CAAE,KAZT,CAAP,CAcD,CAfM,CAiBP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAC3C,MAAD,CAAyC,CACpE,MAAOA,CAAAA,MAAM,CAACnB,MAAP,CAAc,SAACC,KAAD,CAAQzB,KAAR,CAAkB,CACrC,sCACKyB,KADL,wBAEGzB,KAAK,CAACG,KAAN,CAAYyE,QAAZ,EAFH,CAE4B5E,KAF5B,GAID,CALM,CAKJ,EALI,CAAP,CAMD,CAPM,CASP,MAAO,IAAMuF,CAAAA,kCAAkC,CAAG,QAArCA,CAAAA,kCAAqC,CAACC,cAAD,QAAiE,CACjHlG,QAAQ,CAAEkG,cAAc,CAAClG,QAAf,GAA4B,CAA5B,CAAgCrB,WAAW,CAACsB,IAA5C,CAAmDtB,WAAW,CAACuB,IADwC,CAEjHJ,MAAM,CAAEoG,cAAc,CAACpG,MAAf,CAAsB8F,MAAtB,EAFyG,CAGjHzF,OAAO,CAAE+F,cAAc,CAAC/F,OAHyF,CAAjE,EAA3C,CAMP,MAAO,IAAMgG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACrC,OAAD,CAAkBsC,OAAlB,CAAwDrC,MAAxD,CAAyF,CACrH,MAAOqC,CAAAA,OAAO,CAAClE,MAAR,CAAe,SAACC,KAAD,CAAQ+D,cAAR,CAAwB1B,KAAxB,CAAkC,CACtD,GAAI,CAAC0B,cAAL,CAAqB,CACnB,MAAO/D,CAAAA,KAAP,CACD,CAED;AACA,GAAI+D,cAAc,CAACpG,MAAf,CAAsBuG,EAAtB,CAAyB,CAAzB,CAAJ,CAAiC,CAC/B,MAAOlE,CAAAA,KAAP,CACD,CAED,GAAMtB,CAAAA,KAAK,CAAGkD,MAAM,CAACS,KAAD,CAAN,CAAcc,QAAd,EAAd,CAEA,sCACKnD,KADL,wBAEG2B,OAFH,gCAGO3B,KAAK,CAAC2B,OAAD,CAHZ,wBAIKjD,KAJL,CAIaoF,kCAAkC,CAACC,cAAD,CAJ/C,KAOD,CAnBM,CAmBJ,EAnBI,CAAP,CAoBD,CArBM,CAuBP;AACA;AACA,GACA,MAAO,IAAMI,CAAAA,kCAAkC,CAAG,QAArCA,CAAAA,kCAAqC,CAACnD,QAAD,CAAyD,CACzG,GACEtC,CAAAA,KADF,CAaIsC,QAbJ,CACEtC,KADF,CAEEE,UAFF,CAaIoC,QAbJ,CAEEpC,UAFF,CAGEG,SAHF,CAaIiC,QAbJ,CAGEjC,SAHF,CAIEE,QAJF,CAaI+B,QAbJ,CAIE/B,QAJF,CAKED,SALF,CAaIgC,QAbJ,CAKEhC,SALF,CAMEE,UANF,CAaI8B,QAbJ,CAME9B,UANF,CAOEC,WAPF,CAaI6B,QAbJ,CAOE7B,WAPF,CAQEI,UARF,CAaIyB,QAbJ,CAQEzB,UARF,CASED,UATF,CAaI0B,QAbJ,CASE1B,UATF,CAUEqE,YAVF,CAaI3C,QAbJ,CAUE2C,YAVF,CAWED,mBAXF,CAaI1C,QAbJ,CAWE0C,mBAXF,CAYEE,YAZF,CAaI5C,QAbJ,CAYE4C,YAZF,CAeA,MAAO,CACLlF,KAAK,CAAEA,KAAK,CAACwE,QAAN,EADF,CAELtE,UAAU,CAAEA,UAAU,CAACsE,QAAX,EAFP,CAGLnE,SAAS,CAAEA,SAAS,CAACmE,QAAV,EAHN,CAILjE,QAAQ,CAAEA,QAAQ,CAACiE,QAAT,EAJL,CAKLlE,SAAS,CAAEA,SAAS,CAACkF,EAAV,CAAa,CAAb,EAAkB,IAAlB,CAAyBlF,SAAS,CAACyE,MAAV,EAL/B,CAMLvE,UAAU,CAAEA,UAAU,CAACgF,EAAX,CAAc,CAAd,EAAmB,IAAnB,CAA0BhF,UAAU,CAACuE,MAAX,EANjC,CAOLtE,WAAW,CAAEA,WAAW,CAACsE,MAAZ,EAPR,CAQLlE,UAAU,CAAEA,UAAU,CAACkE,MAAX,EARP,CASLnE,UAAU,CAAEA,UAAU,CAACmE,MAAX,EATP,CAULE,YAAY,CAAEA,YAAY,CAACF,MAAb,EAVT,CAWLC,mBAAmB,CAAEA,mBAAmB,CAACD,MAApB,EAXhB,CAYLG,YAAY,CAAZA,YAZK,CAAP,CAcD,CA9BM,CAgCP;AACA;AACA;AACA,GACA,MAAO,IAAMQ,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAmDC,IAAnD,CAAkE,CACjG,MAAOC,CAAAA,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBtE,MAAlB,CAAyB,SAACC,KAAD,CAAQwE,GAAR,CAAgB,CAC9C,GAAMtH,CAAAA,KAAK,CAAGmH,IAAI,CAACG,GAAD,CAAlB,CAEA,GAAItH,KAAK,EAAI,CAAAA,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEuH,IAAP,IAAgB,WAA7B,CAA0C,CACxC,sCACKzE,KADL,wBAEGwE,GAFH,CAESjI,MAAM,CAACgH,SAAP,CAAiBC,IAAjB,CAAsBtG,KAAtB,CAFT,GAID,CAED,sCACK8C,KADL,wBAEGwE,GAFH,CAEStH,KAFT,GAID,CAdM,CAcJ,EAdI,CAAP,CAeD,CAhBM","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { GRAPH_API_PREDICTION } from 'config/constants/endpoints'\nimport { ethers } from 'ethers'\nimport {\n  Bet,\n  LedgerData,\n  BetPosition,\n  PredictionsState,\n  PredictionStatus,\n  ReduxNodeLedger,\n  ReduxNodeRound,\n  Round,\n  RoundData,\n} from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport predictionsAbi from 'config/abi/predictions.json'\nimport { getPredictionsAddress } from 'utils/addressHelpers'\nimport { PredictionsClaimableResponse, PredictionsLedgerResponse, PredictionsRoundsResponse } from 'utils/types'\nimport {\n  BetResponse,\n  getRoundBaseFields,\n  getBetBaseFields,\n  getUserBaseFields,\n  RoundResponse,\n  TotalWonMarketResponse,\n  TotalWonRoundResponse,\n} from './queries'\n\nexport enum Result {\n  WIN = 'win',\n  LOSE = 'lose',\n  CANCELED = 'canceled',\n  LIVE = 'live',\n}\n\nexport const numberOrNull = (value: string) => {\n  if (value === null) {\n    return null\n  }\n\n  const valueNum = Number(value)\n  return Number.isNaN(valueNum) ? null : valueNum\n}\n\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\n  const bet = {\n    id: betResponse.id,\n    hash: betResponse.hash,\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\n    claimed: betResponse.claimed,\n    claimedHash: betResponse.claimedHash,\n    user: {\n      id: betResponse.user.id,\n      address: betResponse.user.address,\n      block: numberOrNull(betResponse.user.block),\n      totalBets: numberOrNull(betResponse.user.totalBets),\n      totalBNB: numberOrNull(betResponse.user.totalBNB),\n    },\n  } as Bet\n\n  if (betResponse.round) {\n    bet.round = transformRoundResponse(betResponse.round)\n  }\n\n  return bet\n}\n\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\n  const {\n    id,\n    epoch,\n    failed,\n    startBlock,\n    startAt,\n    lockAt,\n    lockBlock,\n    lockPrice,\n    endBlock,\n    closePrice,\n    totalBets,\n    totalAmount,\n    bullBets,\n    bearBets,\n    bearAmount,\n    bullAmount,\n    position,\n    bets = [],\n  } = roundResponse\n\n  const getRoundPosition = (positionResponse: string) => {\n    if (positionResponse === 'Bull') {\n      return BetPosition.BULL\n    }\n\n    if (positionResponse === 'Bear') {\n      return BetPosition.BEAR\n    }\n\n    return null\n  }\n\n  return {\n    id,\n    failed,\n    epoch: numberOrNull(epoch),\n    startBlock: numberOrNull(startBlock),\n    startAt: numberOrNull(startAt),\n    lockAt: numberOrNull(lockAt),\n    lockBlock: numberOrNull(lockBlock),\n    lockPrice: lockPrice ? parseFloat(lockPrice) : null,\n    endBlock: numberOrNull(endBlock),\n    closePrice: closePrice ? parseFloat(closePrice) : null,\n    totalBets: numberOrNull(totalBets),\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\n    bullBets: numberOrNull(bullBets),\n    bearBets: numberOrNull(bearBets),\n    bearAmount: numberOrNull(bearAmount),\n    bullAmount: numberOrNull(bullAmount),\n    position: getRoundPosition(position),\n    bets: bets.map(transformBetResponse),\n  }\n}\n\nexport const transformTotalWonResponse = (\n  marketResponse: TotalWonMarketResponse,\n  roundResponse: TotalWonRoundResponse[],\n): number => {\n  const houseRounds = roundResponse.reduce((accum, round) => {\n    return accum + (round.totalAmount ? parseFloat(round.totalAmount) : 0)\n  }, 0)\n\n  const totalBNB = marketResponse.totalBNB ? parseFloat(marketResponse.totalBNB) : 0\n  const totalBNBTreasury = marketResponse.totalBNBTreasury ? parseFloat(marketResponse.totalBNBTreasury) : 0\n\n  return Math.max(totalBNB - (totalBNBTreasury + houseRounds), 0)\n}\n\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\n  const { round } = bet\n  if (round.failed) {\n    return Result.CANCELED\n  }\n\n  if (round.epoch >= currentEpoch - 1) {\n    return Result.LIVE\n  }\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\n\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\n}\n\n/**\n * Given a bet object, check if it is eligible to be claimed or refunded\n */\nexport const getCanClaim = (bet: Bet) => {\n  return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\n}\n\n/**\n * Returns only bets where the user has won.\n * This is necessary because the API currently cannot distinguish between an uncliamed bet that has won or lost\n */\nexport const getUnclaimedWinningBets = (bets: Bet[]): Bet[] => {\n  return bets.filter(getCanClaim)\n}\n\nexport const getTotalWon = async (): Promise<number> => {\n  const response = (await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getTotalWonData($position: String) {\n        market(id: 1) {\n          totalBNB\n          totalBNBTreasury\n        }\n        rounds(where: { position: $position }) {\n          totalAmount\n        }\n      }\n    `,\n    { position: BetPosition.HOUSE },\n  )) as { market: TotalWonMarketResponse; rounds: TotalWonRoundResponse[] }\n\n  return transformTotalWonResponse(response.market, response.rounds)\n}\n\ntype BetHistoryWhereClause = Record<string, string | number | boolean | string[]>\n\nexport const getBetHistory = async (\n  where: BetHistoryWhereClause = {},\n  first = 1000,\n  skip = 0,\n): Promise<BetResponse[]> => {\n  const response = await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\n        bets(first: $first, skip: $skip, where: $where) {\n          ${getBetBaseFields()}\n          round {\n            ${getRoundBaseFields()}\n          }\n          user {\n            ${getUserBaseFields()}\n          } \n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.bets\n}\n\nexport const getBet = async (betId: string): Promise<BetResponse> => {\n  const response = await request(\n    GRAPH_API_PREDICTION,\n    gql`\n      query getBet($id: ID!) {\n        bet(id: $id) {\n          ${getBetBaseFields()}\n          round {\n            ${getRoundBaseFields()}\n          }\n          user {\n            ${getUserBaseFields()}\n          } \n        }\n      }\n  `,\n    {\n      id: betId.toLowerCase(),\n    },\n  )\n  return response.bet\n}\n\n// V2 REFACTOR\nexport const getLedgerData = async (account: string, epochs: number[]) => {\n  const address = getPredictionsAddress()\n  const ledgerCalls = epochs.map((epoch) => ({\n    address,\n    name: 'ledger',\n    params: [epoch, account],\n  }))\n  const response = await multicallv2<PredictionsLedgerResponse[]>(predictionsAbi, ledgerCalls)\n  return response\n}\n\nexport const getClaimStatuses = async (\n  account: string,\n  epochs: number[],\n): Promise<PredictionsState['claimableStatuses']> => {\n  const address = getPredictionsAddress()\n  const claimableCalls = epochs.map((epoch) => ({\n    address,\n    name: 'claimable',\n    params: [epoch, account],\n  }))\n  const claimableResponses = await multicallv2<[PredictionsClaimableResponse][]>(predictionsAbi, claimableCalls)\n\n  // \"claimable\" currently has a bug where it returns true on Bull bets even if the wallet did not interact with the round\n  // To get around this temporarily we check the ledger status as well to confirm that it is claimable\n  // This can be removed in Predictions V2\n  const ledgerResponses = await getLedgerData(account, epochs)\n\n  return claimableResponses.reduce((accum, claimableResponse, index) => {\n    const { amount, claimed } = ledgerResponses[index]\n    const epoch = epochs[index]\n    const [claimable] = claimableResponse\n\n    return {\n      ...accum,\n      [epoch]: claimable && amount.gt(0) && !claimed,\n    }\n  }, {})\n}\n\nexport type MarketData = Pick<\n  PredictionsState,\n  'status' | 'currentEpoch' | 'intervalBlocks' | 'bufferBlocks' | 'minBetAmount' | 'rewardRate'\n>\nexport const getPredictionData = async (): Promise<MarketData> => {\n  const address = getPredictionsAddress()\n  const staticCalls = ['currentEpoch', 'intervalBlocks', 'minBetAmount', 'paused', 'bufferBlocks', 'rewardRate'].map(\n    (method) => ({\n      address,\n      name: method,\n    }),\n  )\n  const [[currentEpoch], [intervalBlocks], [minBetAmount], [paused], [bufferBlocks], [rewardRate]] = await multicallv2(\n    predictionsAbi,\n    staticCalls,\n  )\n\n  return {\n    status: paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\n    currentEpoch: currentEpoch.toNumber(),\n    intervalBlocks: intervalBlocks.toNumber(),\n    bufferBlocks: bufferBlocks.toNumber(),\n    minBetAmount: minBetAmount.toString(),\n    rewardRate: rewardRate.toNumber(),\n  }\n}\n\nexport const getRoundsData = async (epochs: number[]): Promise<PredictionsRoundsResponse[]> => {\n  const address = getPredictionsAddress()\n  const calls = epochs.map((epoch) => ({\n    address,\n    name: 'rounds',\n    params: [epoch],\n  }))\n  const response = await multicallv2<PredictionsRoundsResponse[]>(predictionsAbi, calls)\n  return response\n}\n\nexport const makeFutureRoundResponse = (epoch: number, startBlock: number): ReduxNodeRound => {\n  return {\n    epoch,\n    startBlock,\n    lockBlock: null,\n    endBlock: null,\n    lockPrice: null,\n    closePrice: null,\n    totalAmount: ethers.BigNumber.from(0).toJSON(),\n    bullAmount: ethers.BigNumber.from(0).toJSON(),\n    bearAmount: ethers.BigNumber.from(0).toJSON(),\n    rewardBaseCalAmount: ethers.BigNumber.from(0).toJSON(),\n    rewardAmount: ethers.BigNumber.from(0).toJSON(),\n    oracleCalled: false,\n  }\n}\n\nexport const makeRoundData = (rounds: ReduxNodeRound[]): RoundData => {\n  return rounds.reduce((accum, round) => {\n    return {\n      ...accum,\n      [round.epoch.toString()]: round,\n    }\n  }, {})\n}\n\nexport const serializePredictionsLedgerResponse = (ledgerResponse: PredictionsLedgerResponse): ReduxNodeLedger => ({\n  position: ledgerResponse.position === 0 ? BetPosition.BULL : BetPosition.BEAR,\n  amount: ledgerResponse.amount.toJSON(),\n  claimed: ledgerResponse.claimed,\n})\n\nexport const makeLedgerData = (account: string, ledgers: PredictionsLedgerResponse[], epochs: number[]): LedgerData => {\n  return ledgers.reduce((accum, ledgerResponse, index) => {\n    if (!ledgerResponse) {\n      return accum\n    }\n\n    // If the amount is zero that means the user did not bet\n    if (ledgerResponse.amount.eq(0)) {\n      return accum\n    }\n\n    const epoch = epochs[index].toString()\n\n    return {\n      ...accum,\n      [account]: {\n        ...accum[account],\n        [epoch]: serializePredictionsLedgerResponse(ledgerResponse),\n      },\n    }\n  }, {})\n}\n\n/**\n * Serializes the return from the \"rounds\" call for redux\n */\nexport const serializePredictionsRoundsResponse = (response: PredictionsRoundsResponse): ReduxNodeRound => {\n  const {\n    epoch,\n    startBlock,\n    lockBlock,\n    endBlock,\n    lockPrice,\n    closePrice,\n    totalAmount,\n    bullAmount,\n    bearAmount,\n    rewardAmount,\n    rewardBaseCalAmount,\n    oracleCalled,\n  } = response\n\n  return {\n    epoch: epoch.toNumber(),\n    startBlock: startBlock.toNumber(),\n    lockBlock: lockBlock.toNumber(),\n    endBlock: endBlock.toNumber(),\n    lockPrice: lockPrice.eq(0) ? null : lockPrice.toJSON(),\n    closePrice: closePrice.eq(0) ? null : closePrice.toJSON(),\n    totalAmount: totalAmount.toJSON(),\n    bullAmount: bullAmount.toJSON(),\n    bearAmount: bearAmount.toJSON(),\n    rewardAmount: rewardAmount.toJSON(),\n    rewardBaseCalAmount: rewardBaseCalAmount.toJSON(),\n    oracleCalled,\n  }\n}\n\n/**\n * Parse serialized values back into ethers.BigNumber\n * ethers.BigNumber values are stored with the \"toJSJON()\" method, e.g  { type: \"BigNumber\", hex: string }\n */\nexport const parseBigNumberObj = <T = Record<string, any>, K = Record<string, any>>(data: T): K => {\n  return Object.keys(data).reduce((accum, key) => {\n    const value = data[key]\n\n    if (value && value?.type === 'BigNumber') {\n      return {\n        ...accum,\n        [key]: ethers.BigNumber.from(value),\n      }\n    }\n\n    return {\n      ...accum,\n      [key]: value,\n    }\n  }, {}) as K\n}\n"]},"metadata":{},"sourceType":"module"}