{"ast":null,"code":"import _slicedToArray from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useRef}from'react';import{useWeb3React}from'@web3-react/core';import{simpleRpcProvider}from'utils/providers';/**\n * Provides a web3 provider with or without user's signer\n * Recreate web3 instance only if the provider change\n */var useWeb3Provider=function useWeb3Provider(){var _useWeb3React=useWeb3React(),library=_useWeb3React.library;var refEth=useRef(library);var _useState=useState(library||simpleRpcProvider),_useState2=_slicedToArray(_useState,2),provider=_useState2[0],setprovider=_useState2[1];useEffect(function(){if(library!==refEth.current){setprovider(library||simpleRpcProvider);refEth.current=library;}},[library]);return provider;};export default useWeb3Provider;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/hooks/useWeb3Provider.ts"],"names":["useEffect","useState","useRef","useWeb3React","simpleRpcProvider","useWeb3Provider","library","refEth","provider","setprovider","current"],"mappings":"gKAAA,OAASA,SAAT,CAAoBC,QAApB,CAA8BC,MAA9B,KAA4C,OAA5C,CAEA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,iBAAT,KAAkC,iBAAlC,CAEA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAwE,CAC9F,kBAAoBF,YAAY,EAAhC,CAAQG,OAAR,eAAQA,OAAR,CACA,GAAMC,CAAAA,MAAM,CAAGL,MAAM,CAACI,OAAD,CAArB,CACA,cAAgCL,QAAQ,CAACK,OAAO,EAAIF,iBAAZ,CAAxC,wCAAOI,QAAP,eAAiBC,WAAjB,eAEAT,SAAS,CAAC,UAAM,CACd,GAAIM,OAAO,GAAKC,MAAM,CAACG,OAAvB,CAAgC,CAC9BD,WAAW,CAACH,OAAO,EAAIF,iBAAZ,CAAX,CACAG,MAAM,CAACG,OAAP,CAAiBJ,OAAjB,CACD,CACF,CALQ,CAKN,CAACA,OAAD,CALM,CAAT,CAOA,MAAOE,CAAAA,QAAP,CACD,CAbD,CAeA,cAAeH,CAAAA,eAAf","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { simpleRpcProvider } from 'utils/providers'\n\n/**\n * Provides a web3 provider with or without user's signer\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3Provider = (): ethers.providers.JsonRpcProvider | ethers.providers.Web3Provider => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [provider, setprovider] = useState(library || simpleRpcProvider)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setprovider(library || simpleRpcProvider)\n      refEth.current = library\n    }\n  }, [library])\n\n  return provider\n}\n\nexport default useWeb3Provider\n"]},"metadata":{},"sourceType":"module"}