{"ast":null,"code":"import _slicedToArray from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;import React from'react';import styled from'styled-components';import{Card,CardBody,Flex,LaurelLeftIcon,LaurelRightIcon,Button,CheckmarkCircleIcon,useWalletModal,useModal}from'@pancakeswap/uikit';import useAuth from'hooks/useAuth';import{useTranslation}from'contexts/Localization';import{FINISHED,OVER}from'config/constants/trading-competition/easterPhases';import RegisterModal from'../RegisterModal';import ClaimModal from'../ClaimModal';import{Heading2Text}from'../CompetitionHeadingText';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: inline-flex;\\n  background: linear-gradient(180deg, #7645d9 0%, #452a7a 100%);\\n\\n  svg {\\n    margin-bottom: 6px;\\n    height: 32px;\\n    width: auto;\\n    fill: \",\";\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.colors.warning;});var StyledButton=styled(Button)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  margin: 16px 20px 0;\\n  z-index: 200;\\n\\n  svg {\\n    margin: 0 4px 0 0;\\n    height: 20px;\\n    width: auto;\\n    fill: \",\";\\n  }\\n\"])),function(_ref2){var theme=_ref2.theme;return theme.colors.textDisabled;});var StyledHeadingText=styled(Heading2Text)(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  white-space: normal;\\n\"])));var BattleCta=function BattleCta(_ref3){var userTradingInformation=_ref3.userTradingInformation,currentPhase=_ref3.currentPhase,account=_ref3.account,isCompetitionLive=_ref3.isCompetitionLive,profile=_ref3.profile,userCanClaimPrizes=_ref3.userCanClaimPrizes,finishedAndPrizesClaimed=_ref3.finishedAndPrizesClaimed,finishedAndNothingToClaim=_ref3.finishedAndNothingToClaim,isLoading=_ref3.isLoading,hasCompetitionEnded=_ref3.hasCompetitionEnded,onRegisterSuccess=_ref3.onRegisterSuccess,onClaimSuccess=_ref3.onClaimSuccess;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useAuth=useAuth(),login=_useAuth.login,logout=_useAuth.logout;var _useWalletModal=useWalletModal(login,logout),onPresentConnectModal=_useWalletModal.onPresentConnectModal;var _useModal=useModal(/*#__PURE__*/_jsx(RegisterModal,{profile:profile,onRegisterSuccess:onRegisterSuccess}),false),_useModal2=_slicedToArray(_useModal,1),onPresentRegisterModal=_useModal2[0];var _useModal3=useModal(/*#__PURE__*/_jsx(ClaimModal,{userTradingInformation:userTradingInformation,onClaimSuccess:onClaimSuccess}),false),_useModal4=_slicedToArray(_useModal3,1),onPresentClaimModal=_useModal4[0];var hasRegistered=userTradingInformation.hasRegistered,hasUserClaimed=userTradingInformation.hasUserClaimed;var registeredAndNotStarted=hasRegistered&&!isCompetitionLive&&!hasCompetitionEnded;var isButtonDisabled=Boolean(isLoading||currentPhase.state===OVER||registeredAndNotStarted||finishedAndPrizesClaimed||finishedAndNothingToClaim);var getHeadingText=function getHeadingText(){// Competition live\nif(isCompetitionLive){return t('Now Live!');}// Competition finished. Rewards being calculated\nif(currentPhase.state===FINISHED){return\"\".concat(t('Calculating prizes'),\"...\");}// All competition finished states\nif(hasCompetitionEnded){return\"\".concat(t('Finished'),\"!\");}// Competition not started\nreturn t('Starting Soon');};var getButtonText=function getButtonText(){// No wallet connected\nif(!account){return t('Unlock Wallet');}// User not registered\nif(!hasRegistered){return t('I want to Battle!');}// User registered and competition live\nif(isCompetitionLive){return t('Trade Now');}// User registered and competition finished\nif(hasCompetitionEnded){// Claim period has ended\nif(currentPhase.state===OVER){return t('Claim period over');}// User has prizes to claim\nif(userCanClaimPrizes){return t('Claim prizes');}// User has already claimed prizes\nif(hasUserClaimed){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CheckmarkCircleIcon,{}),\" \",t('Prizes Claimed!')]});}// User has nothing to claim\nreturn t('Nothing to claim');}// User registered but competition has not started\nif(!isCompetitionLive){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CheckmarkCircleIcon,{}),\" \",t('Registered!')]});}// May be useful for debugging - if somehow none of the above conditions are met\nreturn'Whoopsie';};var handleCtaClick=function handleCtaClick(){// All conditions when button isn't disabled\n// No wallet connected\nif(!account){onPresentConnectModal();}// Wallet connected but user not registered\nif(account&&!hasRegistered){onPresentRegisterModal();}// Registered and competition is live\nif(hasRegistered&&isCompetitionLive){window.location.href='https://exchange.pancakeswap.finance/#/swap';}// Registered and competition has finished\nif(hasRegistered&&hasCompetitionEnded){onPresentClaimModal();}};return/*#__PURE__*/_jsx(StyledCard,{children:/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",justifyContent:\"center\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(StyledHeadingText,{children:getHeadingText()}),currentPhase.state!==FINISHED&&/*#__PURE__*/_jsxs(Flex,{alignItems:\"flex-end\",children:[/*#__PURE__*/_jsx(LaurelLeftIcon,{}),/*#__PURE__*/_jsx(StyledButton,{disabled:isButtonDisabled,onClick:function onClick(){return handleCtaClick();},children:getButtonText()}),/*#__PURE__*/_jsx(LaurelRightIcon,{})]})]})})});};export default BattleCta;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/views/TradingCompetition/components/BattleCta/index.tsx"],"names":["React","styled","Card","CardBody","Flex","LaurelLeftIcon","LaurelRightIcon","Button","CheckmarkCircleIcon","useWalletModal","useModal","useAuth","useTranslation","FINISHED","OVER","RegisterModal","ClaimModal","Heading2Text","StyledCard","theme","colors","warning","StyledButton","textDisabled","StyledHeadingText","BattleCta","userTradingInformation","currentPhase","account","isCompetitionLive","profile","userCanClaimPrizes","finishedAndPrizesClaimed","finishedAndNothingToClaim","isLoading","hasCompetitionEnded","onRegisterSuccess","onClaimSuccess","t","login","logout","onPresentConnectModal","onPresentRegisterModal","onPresentClaimModal","hasRegistered","hasUserClaimed","registeredAndNotStarted","isButtonDisabled","Boolean","state","getHeadingText","getButtonText","handleCtaClick","window","location","href"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Flex,\n  LaurelLeftIcon,\n  LaurelRightIcon,\n  Button,\n  CheckmarkCircleIcon,\n  useWalletModal,\n  useModal,\n} from '@pancakeswap/uikit'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\nimport { FINISHED, OVER } from 'config/constants/trading-competition/easterPhases'\nimport RegisterModal from '../RegisterModal'\nimport ClaimModal from '../ClaimModal'\nimport { Heading2Text } from '../CompetitionHeadingText'\nimport { CompetitionProps } from '../../types'\n\nconst StyledCard = styled(Card)`\n  display: inline-flex;\n  background: linear-gradient(180deg, #7645d9 0%, #452a7a 100%);\n\n  svg {\n    margin-bottom: 6px;\n    height: 32px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.warning};\n  }\n`\n\nconst StyledButton = styled(Button)`\n  margin: 16px 20px 0;\n  z-index: 200;\n\n  svg {\n    margin: 0 4px 0 0;\n    height: 20px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst StyledHeadingText = styled(Heading2Text)`\n  white-space: normal;\n`\n\nconst BattleCta: React.FC<CompetitionProps> = ({\n  userTradingInformation,\n  currentPhase,\n  account,\n  isCompetitionLive,\n  profile,\n  userCanClaimPrizes,\n  finishedAndPrizesClaimed,\n  finishedAndNothingToClaim,\n  isLoading,\n  hasCompetitionEnded,\n  onRegisterSuccess,\n  onClaimSuccess,\n}) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n  const [onPresentRegisterModal] = useModal(\n    <RegisterModal profile={profile} onRegisterSuccess={onRegisterSuccess} />,\n    false,\n  )\n  const [onPresentClaimModal] = useModal(\n    <ClaimModal userTradingInformation={userTradingInformation} onClaimSuccess={onClaimSuccess} />,\n    false,\n  )\n  const { hasRegistered, hasUserClaimed } = userTradingInformation\n  const registeredAndNotStarted = hasRegistered && !isCompetitionLive && !hasCompetitionEnded\n\n  const isButtonDisabled = Boolean(\n    isLoading ||\n      currentPhase.state === OVER ||\n      registeredAndNotStarted ||\n      finishedAndPrizesClaimed ||\n      finishedAndNothingToClaim,\n  )\n\n  const getHeadingText = () => {\n    // Competition live\n    if (isCompetitionLive) {\n      return t('Now Live!')\n    }\n    // Competition finished. Rewards being calculated\n    if (currentPhase.state === FINISHED) {\n      return `${t('Calculating prizes')}...`\n    }\n    // All competition finished states\n    if (hasCompetitionEnded) {\n      return `${t('Finished')}!`\n    }\n    // Competition not started\n    return t('Starting Soon')\n  }\n\n  const getButtonText = () => {\n    // No wallet connected\n    if (!account) {\n      return t('Unlock Wallet')\n    }\n    // User not registered\n    if (!hasRegistered) {\n      return t('I want to Battle!')\n    }\n    // User registered and competition live\n    if (isCompetitionLive) {\n      return t('Trade Now')\n    }\n\n    // User registered and competition finished\n    if (hasCompetitionEnded) {\n      // Claim period has ended\n      if (currentPhase.state === OVER) {\n        return t('Claim period over')\n      }\n      // User has prizes to claim\n      if (userCanClaimPrizes) {\n        return t('Claim prizes')\n      }\n      // User has already claimed prizes\n      if (hasUserClaimed) {\n        return (\n          <>\n            <CheckmarkCircleIcon /> {t('Prizes Claimed!')}\n          </>\n        )\n      }\n      // User has nothing to claim\n      return t('Nothing to claim')\n    }\n\n    // User registered but competition has not started\n    if (!isCompetitionLive) {\n      return (\n        <>\n          <CheckmarkCircleIcon /> {t('Registered!')}\n        </>\n      )\n    }\n\n    // May be useful for debugging - if somehow none of the above conditions are met\n    return 'Whoopsie'\n  }\n\n  const handleCtaClick = () => {\n    // All conditions when button isn't disabled\n\n    // No wallet connected\n    if (!account) {\n      onPresentConnectModal()\n    }\n    // Wallet connected but user not registered\n    if (account && !hasRegistered) {\n      onPresentRegisterModal()\n    }\n    // Registered and competition is live\n    if (hasRegistered && isCompetitionLive) {\n      window.location.href = 'https://exchange.pancakeswap.finance/#/swap'\n    }\n    // Registered and competition has finished\n    if (hasRegistered && hasCompetitionEnded) {\n      onPresentClaimModal()\n    }\n  }\n\n  return (\n    <StyledCard>\n      <CardBody>\n        <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n          <StyledHeadingText>{getHeadingText()}</StyledHeadingText>\n          {/* Hide button if in the pre-claim, FINISHED phase */}\n          {currentPhase.state !== FINISHED && (\n            <Flex alignItems=\"flex-end\">\n              <LaurelLeftIcon />\n              <StyledButton disabled={isButtonDisabled} onClick={() => handleCtaClick()}>\n                {getButtonText()}\n              </StyledButton>\n              <LaurelRightIcon />\n            </Flex>\n          )}\n        </Flex>\n      </CardBody>\n    </StyledCard>\n  )\n}\n\nexport default BattleCta\n"]},"metadata":{},"sourceType":"module"}