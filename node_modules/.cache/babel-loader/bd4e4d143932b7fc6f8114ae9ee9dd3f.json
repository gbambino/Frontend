{"ast":null,"code":"import _slicedToArray from\"/home/kodachi/Desktop/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{Button,Text,useModal,Flex,TooltipText,useTooltip,Skeleton,Heading}from'@pancakeswap/uikit';import BigNumber from'bignumber.js';import{useWeb3React}from'@web3-react/core';import{getCakeVaultEarnings}from'views/Pools/helpers';import{PoolCategory}from'config/constants/types';import{formatNumber,getBalanceNumber,getFullDisplayBalance}from'utils/formatBalance';import{useTranslation}from'contexts/Localization';import Balance from'components/Balance';import{useCakeVault}from'state/hooks';import{BIG_ZERO}from'utils/bigNumber';import{ActionContainer,ActionTitles,ActionContent}from'./styles';import CollectModal from'../../PoolCard/Modals/CollectModal';import UnstakingFeeCountdownRow from'../../CakeVaultCard/UnstakingFeeCountdownRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var HarvestAction=function HarvestAction(_ref){var sousId=_ref.sousId,poolCategory=_ref.poolCategory,earningToken=_ref.earningToken,userData=_ref.userData,userDataLoaded=_ref.userDataLoaded,isAutoVault=_ref.isAutoVault,earningTokenPrice=_ref.earningTokenPrice;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var earnings=(userData===null||userData===void 0?void 0:userData.pendingReward)?new BigNumber(userData.pendingReward):BIG_ZERO;// These will be reassigned later if its Auto CAKE vault\nvar earningTokenBalance=getBalanceNumber(earnings,earningToken.decimals);var earningTokenDollarBalance=getBalanceNumber(earnings.multipliedBy(earningTokenPrice),earningToken.decimals);var hasEarnings=earnings.gt(0);var fullBalance=getFullDisplayBalance(earnings,earningToken.decimals);var formattedBalance=formatNumber(earningTokenBalance,3,3);var isCompoundPool=sousId===0;var isBnbPool=poolCategory===PoolCategory.BINANCE;// Auto CAKE vault calculations\nvar _useCakeVault=useCakeVault(),_useCakeVault$userDat=_useCakeVault.userData,cakeAtLastUserAction=_useCakeVault$userDat.cakeAtLastUserAction,userShares=_useCakeVault$userDat.userShares,pricePerFullShare=_useCakeVault.pricePerFullShare,performanceFee=_useCakeVault.fees.performanceFee;var _getCakeVaultEarnings=getCakeVaultEarnings(account,cakeAtLastUserAction,userShares,pricePerFullShare,earningTokenPrice),hasAutoEarnings=_getCakeVaultEarnings.hasAutoEarnings,autoCakeToDisplay=_getCakeVaultEarnings.autoCakeToDisplay,autoUsdToDisplay=_getCakeVaultEarnings.autoUsdToDisplay;earningTokenBalance=isAutoVault?autoCakeToDisplay:earningTokenBalance;hasEarnings=isAutoVault?hasAutoEarnings:hasEarnings;earningTokenDollarBalance=isAutoVault?autoUsdToDisplay:earningTokenDollarBalance;var _useModal=useModal(/*#__PURE__*/_jsx(CollectModal,{formattedBalance:formattedBalance,fullBalance:fullBalance,earningToken:earningToken,earningsDollarValue:earningTokenDollarBalance,sousId:sousId,isBnbPool:isBnbPool,isCompoundPool:isCompoundPool})),_useModal2=_slicedToArray(_useModal,1),onPresentCollect=_useModal2[0];var _useTooltip=useTooltip(t('Subtracted automatically from each yield harvest and burned.'),{placement:'bottom-start'}),targetRef=_useTooltip.targetRef,tooltip=_useTooltip.tooltip,tooltipVisible=_useTooltip.tooltipVisible;var actionTitle=isAutoVault?/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",bold:true,color:\"secondary\",as:\"span\",textTransform:\"uppercase\",children:t('Recent CAKE profit')}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Text,{fontSize:\"12px\",bold:true,color:\"secondary\",as:\"span\",textTransform:\"uppercase\",children:[earningToken.symbol,' ']}),/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",bold:true,color:\"textSubtle\",as:\"span\",textTransform:\"uppercase\",children:t('Earned')})]});if(!account){return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsx(ActionTitles,{children:actionTitle}),/*#__PURE__*/_jsxs(ActionContent,{children:[/*#__PURE__*/_jsx(Balance,{pt:\"8px\",lineHeight:\"1\",bold:true,fontSize:\"20px\",decimals:5,value:0}),/*#__PURE__*/_jsx(Button,{disabled:true,children:isCompoundPool?t('Collect'):t('Harvest')})]})]});}if(!userDataLoaded){return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsx(ActionTitles,{children:actionTitle}),/*#__PURE__*/_jsx(ActionContent,{children:/*#__PURE__*/_jsx(Skeleton,{width:180,height:\"32px\",marginTop:14})})]});}return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsx(ActionTitles,{children:actionTitle}),/*#__PURE__*/_jsxs(ActionContent,{children:[/*#__PURE__*/_jsx(Flex,{flex:\"1\",pt:\"16px\",flexDirection:\"column\",alignSelf:\"flex-start\",children:/*#__PURE__*/_jsx(_Fragment,{children:hasEarnings?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Balance,{lineHeight:\"1\",bold:true,fontSize:\"20px\",decimals:5,value:earningTokenBalance}),earningTokenPrice>0&&/*#__PURE__*/_jsx(Balance,{display:\"inline\",fontSize:\"12px\",color:\"textSubtle\",decimals:2,prefix:\"~\",value:earningTokenDollarBalance,unit:\" USD\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Heading,{color:\"textDisabled\",children:\"0\"}),/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textDisabled\",children:\"0 USD\"})]})})}),isAutoVault?/*#__PURE__*/_jsxs(Flex,{flex:\"1.3\",flexDirection:\"column\",alignSelf:\"flex-start\",alignItems:\"flex-start\",children:[/*#__PURE__*/_jsx(UnstakingFeeCountdownRow,{isTableVariant:true}),/*#__PURE__*/_jsx(UnstakingFeeCountdownRow,{isTableVariant:true}),/*#__PURE__*/_jsxs(Flex,{mb:\"2px\",justifyContent:\"space-between\",alignItems:\"center\",children:[tooltipVisible&&tooltip,/*#__PURE__*/_jsx(TooltipText,{ref:targetRef,small:true,children:t('Performance Fee')}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",children:/*#__PURE__*/_jsxs(Text,{ml:\"4px\",small:true,children:[performanceFee/100,\"%\"]})})]})]}):/*#__PURE__*/_jsx(Button,{disabled:!hasEarnings,onClick:onPresentCollect,children:isCompoundPool?t('Collect'):t('Harvest')})]})]});};export default HarvestAction;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/views/Pools/components/PoolsTable/ActionPanel/Harvest.tsx"],"names":["React","Button","Text","useModal","Flex","TooltipText","useTooltip","Skeleton","Heading","BigNumber","useWeb3React","getCakeVaultEarnings","PoolCategory","formatNumber","getBalanceNumber","getFullDisplayBalance","useTranslation","Balance","useCakeVault","BIG_ZERO","ActionContainer","ActionTitles","ActionContent","CollectModal","UnstakingFeeCountdownRow","HarvestAction","sousId","poolCategory","earningToken","userData","userDataLoaded","isAutoVault","earningTokenPrice","t","account","earnings","pendingReward","earningTokenBalance","decimals","earningTokenDollarBalance","multipliedBy","hasEarnings","gt","fullBalance","formattedBalance","isCompoundPool","isBnbPool","BINANCE","cakeAtLastUserAction","userShares","pricePerFullShare","performanceFee","fees","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","onPresentCollect","placement","targetRef","tooltip","tooltipVisible","actionTitle","symbol"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Button, Text, useModal, Flex, TooltipText, useTooltip, Skeleton, Heading } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport { PoolCategory } from 'config/constants/types'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Pool } from 'state/types'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\nimport UnstakingFeeCountdownRow from '../../CakeVaultCard/UnstakingFeeCountdownRow'\n\ninterface HarvestActionProps extends Pool {\n  userDataLoaded: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({\n  sousId,\n  poolCategory,\n  earningToken,\n  userData,\n  userDataLoaded,\n  isAutoVault,\n  earningTokenPrice,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  // These will be reassigned later if its Auto CAKE vault\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  let hasEarnings = earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const isCompoundPool = sousId === 0\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  // Auto CAKE vault calculations\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    pricePerFullShare,\n    fees: { performanceFee },\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const actionTitle = isAutoVault ? (\n    <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n      {t('Recent CAKE profit')}\n    </Text>\n  ) : (\n    <>\n      <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n        {earningToken.symbol}{' '}\n      </Text>\n      <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n        {t('Earned')}\n      </Text>\n    </>\n  )\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Balance pt=\"8px\" lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={0} />\n          <Button disabled>{isCompoundPool ? t('Collect') : t('Harvest')}</Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>{actionTitle}</ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n          <>\n            {hasEarnings ? (\n              <>\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        </Flex>\n        {isAutoVault ? (\n          <Flex flex=\"1.3\" flexDirection=\"column\" alignSelf=\"flex-start\" alignItems=\"flex-start\">\n            <UnstakingFeeCountdownRow isTableVariant />\n            <UnstakingFeeCountdownRow isTableVariant />\n            <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n              {tooltipVisible && tooltip}\n              <TooltipText ref={targetRef} small>\n                {t('Performance Fee')}\n              </TooltipText>\n              <Flex alignItems=\"center\">\n                <Text ml=\"4px\" small>\n                  {performanceFee / 100}%\n                </Text>\n              </Flex>\n            </Flex>\n          </Flex>\n        ) : (\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n            {isCompoundPool ? t('Collect') : t('Harvest')}\n          </Button>\n        )}\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n"]},"metadata":{},"sourceType":"module"}