{"ast":null,"code":"import BigNumber from 'bignumber.js';\n\n/**\n * Remove the '1' and reverse the digits in a lottery number retreived from the smart contract\n */\nexport const parseRetreivedNumber = number => {\n  const numberAsArray = number.split('');\n  numberAsArray.splice(0, 1);\n  numberAsArray.reverse();\n  return numberAsArray.join('');\n};\nexport const dateOptions = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric'\n};\nexport const timeOptions = {\n  hour: 'numeric',\n  minute: 'numeric'\n};\nexport const dateTimeOptions = { ...dateOptions,\n  ...timeOptions\n};\nexport const processLotteryResponse = lotteryData => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString\n  } = lotteryData;\n  const discountDivisor = new BigNumber(discountDivisorAsString);\n  const priceTicketInCake = new BigNumber(priceTicketInCakeAsString);\n  const amountCollectedInCake = new BigNumber(amountCollectedInCakeAsString);\n  return {\n    isLoading: lotteryData.isLoading,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown\n  };\n};","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/views/Lottery/helpers.tsx"],"names":["BigNumber","parseRetreivedNumber","number","numberAsArray","split","splice","reverse","join","dateOptions","year","month","day","timeOptions","hour","minute","dateTimeOptions","processLotteryResponse","lotteryData","priceTicketInCake","priceTicketInCakeAsString","discountDivisor","discountDivisorAsString","amountCollectedInCake","amountCollectedInCakeAsString","isLoading","userTickets","status","startTime","endTime","treasuryFee","firstTicketId","lastTicketId","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;;AAGA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAIC,MAAD,IAA4B;AAC9D,QAAMC,aAAa,GAAGD,MAAM,CAACE,KAAP,CAAa,EAAb,CAAtB;AACAD,EAAAA,aAAa,CAACE,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACAF,EAAAA,aAAa,CAACG,OAAd;AACA,SAAOH,aAAa,CAACI,IAAd,CAAmB,EAAnB,CAAP;AACD,CALM;AAOP,OAAO,MAAMC,WAAuC,GAAG;AACrDC,EAAAA,IAAI,EAAE,SAD+C;AAErDC,EAAAA,KAAK,EAAE,OAF8C;AAGrDC,EAAAA,GAAG,EAAE;AAHgD,CAAhD;AAMP,OAAO,MAAMC,WAAuC,GAAG;AACrDC,EAAAA,IAAI,EAAE,SAD+C;AAErDC,EAAAA,MAAM,EAAE;AAF6C,CAAhD;AAKP,OAAO,MAAMC,eAA2C,GAAG,EACzD,GAAGP,WADsD;AAEzD,KAAGI;AAFsD,CAApD;AAKP,OAAO,MAAMI,sBAAsB,GACjCC,WADoC,IAEnB;AACjB,QAAM;AACJC,IAAAA,iBAAiB,EAAEC,yBADf;AAEJC,IAAAA,eAAe,EAAEC,uBAFb;AAGJC,IAAAA,qBAAqB,EAAEC;AAHnB,MAIFN,WAJJ;AAMA,QAAMG,eAAe,GAAG,IAAIpB,SAAJ,CAAcqB,uBAAd,CAAxB;AACA,QAAMH,iBAAiB,GAAG,IAAIlB,SAAJ,CAAcmB,yBAAd,CAA1B;AACA,QAAMG,qBAAqB,GAAG,IAAItB,SAAJ,CAAcuB,6BAAd,CAA9B;AAEA,SAAO;AACLC,IAAAA,SAAS,EAAEP,WAAW,CAACO,SADlB;AAELC,IAAAA,WAAW,EAAER,WAAW,CAACQ,WAFpB;AAGLC,IAAAA,MAAM,EAAET,WAAW,CAACS,MAHf;AAILC,IAAAA,SAAS,EAAEV,WAAW,CAACU,SAJlB;AAKLC,IAAAA,OAAO,EAAEX,WAAW,CAACW,OALhB;AAMLV,IAAAA,iBANK;AAOLE,IAAAA,eAPK;AAQLS,IAAAA,WAAW,EAAEZ,WAAW,CAACY,WARpB;AASLC,IAAAA,aAAa,EAAEb,WAAW,CAACa,aATtB;AAULC,IAAAA,YAAY,EAAEd,WAAW,CAACc,YAVrB;AAWLT,IAAAA,qBAXK;AAYLU,IAAAA,WAAW,EAAEf,WAAW,CAACe,WAZpB;AAaLC,IAAAA,cAAc,EAAEhB,WAAW,CAACgB,cAbvB;AAcLC,IAAAA,sBAAsB,EAAEjB,WAAW,CAACiB,sBAd/B;AAeLC,IAAAA,gBAAgB,EAAElB,WAAW,CAACkB;AAfzB,GAAP;AAiBD,CA9BM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { LotteryResponse, LotteryRound, LotteryRoundUserTickets } from 'state/types'\n\n/**\n * Remove the '1' and reverse the digits in a lottery number retreived from the smart contract\n */\nexport const parseRetreivedNumber = (number: string): string => {\n  const numberAsArray = number.split('')\n  numberAsArray.splice(0, 1)\n  numberAsArray.reverse()\n  return numberAsArray.join('')\n}\n\nexport const dateOptions: Intl.DateTimeFormatOptions = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n}\n\nexport const timeOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n  minute: 'numeric',\n}\n\nexport const dateTimeOptions: Intl.DateTimeFormatOptions = {\n  ...dateOptions,\n  ...timeOptions,\n}\n\nexport const processLotteryResponse = (\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\n): LotteryRound => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString,\n  } = lotteryData\n\n  const discountDivisor = new BigNumber(discountDivisorAsString)\n  const priceTicketInCake = new BigNumber(priceTicketInCakeAsString)\n  const amountCollectedInCake = new BigNumber(amountCollectedInCakeAsString)\n\n  return {\n    isLoading: lotteryData.isLoading,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}