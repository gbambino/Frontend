{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { LotteryStatus } from 'config/constants/types';\nimport { getGraphLotteries, getGraphLotteryUser, fetchLottery, fetchCurrentLotteryIdAndMaxBuy, fetchTickets } from './helpers';\nconst initialState = {\n  currentLotteryId: null,\n  isTransitioning: false,\n  maxNumberTicketsPerBuyOrClaim: null,\n  currentRound: {\n    isLoading: true,\n    status: LotteryStatus.PENDING,\n    startTime: '',\n    endTime: '',\n    priceTicketInCake: '',\n    discountDivisor: '',\n    treasuryFee: '',\n    firstTicketId: '',\n    lastTicketId: '',\n    amountCollectedInCake: '',\n    finalNumber: null,\n    cakePerBracket: [],\n    countWinnersPerBracket: [],\n    rewardsBreakdown: [],\n    userTickets: {\n      isLoading: true,\n      tickets: []\n    }\n  },\n  lotteriesData: null,\n  userLotteryData: {\n    account: '',\n    totalCake: '',\n    totalTickets: '',\n    rounds: []\n  }\n};\nexport const fetchCurrentLottery = createAsyncThunk('lottery/fetchCurrentLottery', async ({\n  currentLotteryId\n}) => {\n  const lotteryInfo = await fetchLottery(currentLotteryId);\n  return lotteryInfo;\n});\nexport const fetchCurrentLotteryId = createAsyncThunk('lottery/fetchCurrentLotteryId', async () => {\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy();\n  return currentIdAndMaxBuy;\n});\nexport const fetchUserTicketsAndLotteries = createAsyncThunk('lottery/fetchUserTicketsAndLotteries', async ({\n  account,\n  lotteryId\n}) => {\n  var _userLotteriesRes$rou;\n\n  const userLotteriesRes = await getGraphLotteryUser(account);\n  const userRoundData = (_userLotteriesRes$rou = userLotteriesRes.rounds) === null || _userLotteriesRes$rou === void 0 ? void 0 : _userLotteriesRes$rou.find(round => round.lotteryId === lotteryId);\n  const userTickets = await fetchTickets(account, lotteryId, userRoundData); // user has not bought tickets for the current lottery\n\n  if (userTickets.length === 0) {\n    return {\n      userTickets: null,\n      userLotteries: userLotteriesRes\n    };\n  }\n\n  return {\n    userTickets,\n    userLotteries: userLotteriesRes\n  };\n});\nexport const fetchPastLotteries = createAsyncThunk('lottery/fetchPastLotteries', async () => {\n  const lotteries = await getGraphLotteries();\n  return lotteries;\n});\nexport const fetchUserLotteries = createAsyncThunk('lottery/fetchUserLotteries', async ({\n  account\n}) => {\n  const userLotteries = await getGraphLotteryUser(account);\n  return userLotteries;\n});\nexport const setLotteryIsTransitioning = createAsyncThunk(`lottery/setIsTransitioning`, async ({\n  isTransitioning\n}) => {\n  return {\n    isTransitioning\n  };\n});\nexport const LotterySlice = createSlice({\n  name: 'Lottery',\n  initialState,\n  reducers: {\n    setLotteryPublicData: (state, action) => {\n      state = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action) => {\n      state.currentRound = { ...state.currentRound,\n        ...action.payload\n      };\n    });\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action) => {\n      state.currentLotteryId = action.payload.currentLotteryId;\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim;\n    });\n    builder.addCase(fetchUserTicketsAndLotteries.fulfilled, (state, action) => {\n      state.currentRound.userTickets.isLoading = false;\n      state.currentRound.userTickets.tickets = action.payload.userTickets;\n      state.userLotteryData = action.payload.userLotteries;\n    });\n    builder.addCase(fetchPastLotteries.fulfilled, (state, action) => {\n      state.lotteriesData = action.payload;\n    });\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action) => {\n      state.userLotteryData = action.payload;\n    });\n    builder.addCase(setLotteryIsTransitioning.fulfilled, (state, action) => {\n      state.isTransitioning = action.payload.isTransitioning;\n    });\n  }\n}); // Actions\n\nexport const {\n  setLotteryPublicData\n} = LotterySlice.actions;\nexport default LotterySlice.reducer;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/state/lottery/index.ts"],"names":["createAsyncThunk","createSlice","LotteryStatus","getGraphLotteries","getGraphLotteryUser","fetchLottery","fetchCurrentLotteryIdAndMaxBuy","fetchTickets","initialState","currentLotteryId","isTransitioning","maxNumberTicketsPerBuyOrClaim","currentRound","isLoading","status","PENDING","startTime","endTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","userTickets","tickets","lotteriesData","userLotteryData","account","totalCake","totalTickets","rounds","fetchCurrentLottery","lotteryInfo","fetchCurrentLotteryId","currentIdAndMaxBuy","fetchUserTicketsAndLotteries","lotteryId","userLotteriesRes","userRoundData","find","round","length","userLotteries","fetchPastLotteries","lotteries","fetchUserLotteries","setLotteryIsTransitioning","LotterySlice","name","reducers","setLotteryPublicData","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { LotteryTicket, LotteryStatus } from 'config/constants/types'\nimport { LotteryState, LotteryRoundGraphEntity, LotteryUserGraphEntity, LotteryResponse } from 'state/types'\nimport {\n  getGraphLotteries,\n  getGraphLotteryUser,\n  fetchLottery,\n  fetchCurrentLotteryIdAndMaxBuy,\n  fetchTickets,\n} from './helpers'\n\ninterface PublicLotteryData {\n  currentLotteryId: string\n  maxNumberTicketsPerBuyOrClaim: string\n}\n\nconst initialState: LotteryState = {\n  currentLotteryId: null,\n  isTransitioning: false,\n  maxNumberTicketsPerBuyOrClaim: null,\n  currentRound: {\n    isLoading: true,\n    status: LotteryStatus.PENDING,\n    startTime: '',\n    endTime: '',\n    priceTicketInCake: '',\n    discountDivisor: '',\n    treasuryFee: '',\n    firstTicketId: '',\n    lastTicketId: '',\n    amountCollectedInCake: '',\n    finalNumber: null,\n    cakePerBracket: [],\n    countWinnersPerBracket: [],\n    rewardsBreakdown: [],\n    userTickets: {\n      isLoading: true,\n      tickets: [],\n    },\n  },\n  lotteriesData: null,\n  userLotteryData: { account: '', totalCake: '', totalTickets: '', rounds: [] },\n}\n\nexport const fetchCurrentLottery = createAsyncThunk<LotteryResponse, { currentLotteryId: string }>(\n  'lottery/fetchCurrentLottery',\n  async ({ currentLotteryId }) => {\n    const lotteryInfo = await fetchLottery(currentLotteryId)\n    return lotteryInfo\n  },\n)\n\nexport const fetchCurrentLotteryId = createAsyncThunk<PublicLotteryData>('lottery/fetchCurrentLotteryId', async () => {\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy()\n  return currentIdAndMaxBuy\n})\n\nexport const fetchUserTicketsAndLotteries = createAsyncThunk<\n  { userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity },\n  { account: string; lotteryId: string }\n>('lottery/fetchUserTicketsAndLotteries', async ({ account, lotteryId }) => {\n  const userLotteriesRes = await getGraphLotteryUser(account)\n  const userRoundData = userLotteriesRes.rounds?.find((round) => round.lotteryId === lotteryId)\n  const userTickets = await fetchTickets(account, lotteryId, userRoundData)\n\n  // user has not bought tickets for the current lottery\n  if (userTickets.length === 0) {\n    return { userTickets: null, userLotteries: userLotteriesRes }\n  }\n\n  return { userTickets, userLotteries: userLotteriesRes }\n})\n\nexport const fetchPastLotteries = createAsyncThunk<LotteryRoundGraphEntity[]>(\n  'lottery/fetchPastLotteries',\n  async () => {\n    const lotteries = await getGraphLotteries()\n    return lotteries\n  },\n)\n\nexport const fetchUserLotteries = createAsyncThunk<LotteryUserGraphEntity, { account: string }>(\n  'lottery/fetchUserLotteries',\n  async ({ account }) => {\n    const userLotteries = await getGraphLotteryUser(account)\n    return userLotteries\n  },\n)\n\nexport const setLotteryIsTransitioning = createAsyncThunk<{ isTransitioning: boolean }, { isTransitioning: boolean }>(\n  `lottery/setIsTransitioning`,\n  async ({ isTransitioning }) => {\n    return { isTransitioning }\n  },\n)\n\nexport const LotterySlice = createSlice({\n  name: 'Lottery',\n  initialState,\n  reducers: {\n    setLotteryPublicData: (state, action) => {\n      state = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action: PayloadAction<LotteryResponse>) => {\n      state.currentRound = { ...state.currentRound, ...action.payload }\n    })\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action: PayloadAction<PublicLotteryData>) => {\n      state.currentLotteryId = action.payload.currentLotteryId\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim\n    })\n    builder.addCase(\n      fetchUserTicketsAndLotteries.fulfilled,\n      (state, action: PayloadAction<{ userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity }>) => {\n        state.currentRound.userTickets.isLoading = false\n        state.currentRound.userTickets.tickets = action.payload.userTickets\n        state.userLotteryData = action.payload.userLotteries\n      },\n    )\n    builder.addCase(fetchPastLotteries.fulfilled, (state, action: PayloadAction<LotteryRoundGraphEntity[]>) => {\n      state.lotteriesData = action.payload\n    })\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action: PayloadAction<LotteryUserGraphEntity>) => {\n      state.userLotteryData = action.payload\n    })\n    builder.addCase(\n      setLotteryIsTransitioning.fulfilled,\n      (state, action: PayloadAction<{ isTransitioning: boolean }>) => {\n        state.isTransitioning = action.payload.isTransitioning\n      },\n    )\n  },\n})\n\n// Actions\nexport const { setLotteryPublicData } = LotterySlice.actions\n\nexport default LotterySlice.reducer\n"]},"metadata":{},"sourceType":"module"}