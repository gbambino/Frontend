{"ast":null,"code":"import React from'react';import orderBy from'lodash/orderBy';import{useWeb3React}from'@web3-react/core';import nfts from'config/constants/nfts';import{useAppDispatch}from'state';import{fetchWalletNfts}from'state/collectibles';import{useGetCollectibles}from'state/hooks';import NftCard from'./NftCard';import NftGrid from'./NftGrid';import EasterNftCard from'./NftCard/EasterNftCard';import BunnySpecialCakeVaultCard from'./NftCard/BunnySpecialCakeVaultCard';import BunnySpecialPredictionCard from'./NftCard/BunnySpeciaPredictionCard';/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */import{jsx as _jsx}from\"react/jsx-runtime\";var nftComponents={'easter-storm':EasterNftCard,'easter-flipper':EasterNftCard,'easter-caker':EasterNftCard,'syrup-soak':BunnySpecialCakeVaultCard,claire:BunnySpecialPredictionCard};var NftList=function NftList(){var _useGetCollectibles=useGetCollectibles(),tokenIds=_useGetCollectibles.tokenIds;var dispatch=useAppDispatch();var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var handleRefresh=function handleRefresh(){dispatch(fetchWalletNfts(account));};return/*#__PURE__*/_jsx(NftGrid,{children:orderBy(nfts,'sortOrder').map(function(nft){var Card=nftComponents[nft.identifier]||NftCard;return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Card,{nft:nft,tokenIds:tokenIds[nft.identifier],refresh:handleRefresh})},nft.name);})});};export default NftList;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Collectibles/components/NftList.tsx"],"names":["React","orderBy","useWeb3React","nfts","useAppDispatch","fetchWalletNfts","useGetCollectibles","NftCard","NftGrid","EasterNftCard","BunnySpecialCakeVaultCard","BunnySpecialPredictionCard","nftComponents","claire","NftList","tokenIds","dispatch","account","handleRefresh","map","nft","Card","identifier","name"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,eAAT,KAAgC,oBAAhC,CACA,OAASC,kBAAT,KAAmC,aAAnC,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,aAAP,KAA0B,yBAA1B,CACA,MAAOC,CAAAA,yBAAP,KAAsC,qCAAtC,CACA,MAAOC,CAAAA,0BAAP,KAAuC,qCAAvC,CAEA;AACA;AACA;AACA;AACA,G,2CACA,GAAMC,CAAAA,aAAa,CAAG,CACpB,eAAgBH,aADI,CAEpB,iBAAkBA,aAFE,CAGpB,eAAgBA,aAHI,CAIpB,aAAcC,yBAJM,CAKpBG,MAAM,CAAEF,0BALY,CAAtB,CAQA,GAAMG,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,wBAAqBR,kBAAkB,EAAvC,CAAQS,QAAR,qBAAQA,QAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGZ,cAAc,EAA/B,CACA,kBAAoBF,YAAY,EAAhC,CAAQe,OAAR,eAAQA,OAAR,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1BF,QAAQ,CAACX,eAAe,CAACY,OAAD,CAAhB,CAAR,CACD,CAFD,CAIA,mBACE,KAAC,OAAD,WACGhB,OAAO,CAACE,IAAD,CAAO,WAAP,CAAP,CAA2BgB,GAA3B,CAA+B,SAACC,GAAD,CAAS,CACvC,GAAMC,CAAAA,IAAI,CAAGT,aAAa,CAACQ,GAAG,CAACE,UAAL,CAAb,EAAiCf,OAA9C,CAEA,mBACE,kCACE,KAAC,IAAD,EAAM,GAAG,CAAEa,GAAX,CAAgB,QAAQ,CAAEL,QAAQ,CAACK,GAAG,CAACE,UAAL,CAAlC,CAAoD,OAAO,CAAEJ,aAA7D,EADF,EAAUE,GAAG,CAACG,IAAd,CADF,CAKD,CARA,CADH,EADF,CAaD,CAtBD,CAwBA,cAAeT,CAAAA,OAAf","sourcesContent":["import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport { useWeb3React } from '@web3-react/core'\nimport nfts from 'config/constants/nfts'\nimport { useAppDispatch } from 'state'\nimport { fetchWalletNfts } from 'state/collectibles'\nimport { useGetCollectibles } from 'state/hooks'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport EasterNftCard from './NftCard/EasterNftCard'\nimport BunnySpecialCakeVaultCard from './NftCard/BunnySpecialCakeVaultCard'\nimport BunnySpecialPredictionCard from './NftCard/BunnySpeciaPredictionCard'\n\n/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */\nconst nftComponents = {\n  'easter-storm': EasterNftCard,\n  'easter-flipper': EasterNftCard,\n  'easter-caker': EasterNftCard,\n  'syrup-soak': BunnySpecialCakeVaultCard,\n  claire: BunnySpecialPredictionCard,\n}\n\nconst NftList = () => {\n  const { tokenIds } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleRefresh = () => {\n    dispatch(fetchWalletNfts(account))\n  }\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const Card = nftComponents[nft.identifier] || NftCard\n\n        return (\n          <div key={nft.name}>\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n"]},"metadata":{},"sourceType":"module"}