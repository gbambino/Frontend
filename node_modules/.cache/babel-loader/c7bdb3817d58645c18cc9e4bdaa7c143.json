{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { simpleRpcProvider } from 'utils/providers';\n/**\n * Provides a web3 provider with or without user's signer\n * Recreate web3 instance only if the provider change\n */\n\nconst useWeb3Provider = () => {\n  _s();\n\n  const {\n    library\n  } = useWeb3React();\n  const refEth = useRef(library);\n  const [provider, setprovider] = useState(library || simpleRpcProvider);\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setprovider(library || simpleRpcProvider);\n      refEth.current = library;\n    }\n  }, [library]);\n  return provider;\n};\n\n_s(useWeb3Provider, \"8JwNuGSKu/Lt0Z6djNdOH0jA51o=\", false, function () {\n  return [useWeb3React];\n});\n\nexport default useWeb3Provider;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/hooks/useWeb3Provider.ts"],"names":["useEffect","useState","useRef","useWeb3React","simpleRpcProvider","useWeb3Provider","library","refEth","provider","setprovider","current"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AAEA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,MAAwE;AAAA;;AAC9F,QAAM;AAAEC,IAAAA;AAAF,MAAcH,YAAY,EAAhC;AACA,QAAMI,MAAM,GAAGL,MAAM,CAACI,OAAD,CAArB;AACA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAACK,OAAO,IAAIF,iBAAZ,CAAxC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,OAAO,KAAKC,MAAM,CAACG,OAAvB,EAAgC;AAC9BD,MAAAA,WAAW,CAACH,OAAO,IAAIF,iBAAZ,CAAX;AACAG,MAAAA,MAAM,CAACG,OAAP,GAAiBJ,OAAjB;AACD;AACF,GALQ,EAKN,CAACA,OAAD,CALM,CAAT;AAOA,SAAOE,QAAP;AACD,CAbD;;GAAMH,e;UACgBF,Y;;;AActB,eAAeE,eAAf","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { simpleRpcProvider } from 'utils/providers'\n\n/**\n * Provides a web3 provider with or without user's signer\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3Provider = (): ethers.providers.JsonRpcProvider | ethers.providers.Web3Provider => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [provider, setprovider] = useState(library || simpleRpcProvider)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setprovider(library || simpleRpcProvider)\n      refEth.current = library\n    }\n  }, [library])\n\n  return provider\n}\n\nexport default useWeb3Provider\n"]},"metadata":{},"sourceType":"module"}