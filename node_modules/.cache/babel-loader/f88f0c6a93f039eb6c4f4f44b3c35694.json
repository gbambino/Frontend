{"ast":null,"code":"var _jsxFileName = \"/home/kodachi/Desktop/Frontend1/src/views/Lottery/components/PreviousRoundCard/Footer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Flex, ExpandableLabel, CardFooter, Skeleton, Heading, Box, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useGetLotteryGraphDataById, usePriceCakeBusd } from 'state/hooks';\nimport { formatNumber, getBalanceNumber } from 'utils/formatBalance';\nimport Balance from 'components/Balance';\nimport RewardBrackets from '../RewardBrackets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NextDrawWrapper = styled(Flex)`\n  background: ${({\n  theme\n}) => theme.colors.background};\n  padding: 24px;\n  flex-direction: column;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`;\n_c = NextDrawWrapper;\n\nconst PreviousRoundCardFooter = ({\n  lotteryData,\n  lotteryId\n}) => {\n  _s();\n\n  const [isExpanded, setIsExpanded] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    amountCollectedInCake\n  } = lotteryData;\n  const lotteryGraphData = useGetLotteryGraphDataById(lotteryId);\n  const cakePriceBusd = usePriceCakeBusd();\n  const prizeInBusd = amountCollectedInCake.times(cakePriceBusd);\n\n  const getPrizeBalances = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"7px\",\n        height: 40,\n        width: 160\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"xl\",\n        lineHeight: \"1\",\n        color: \"secondary\",\n        children: [\"~$\", formatNumber(getBalanceNumber(prizeInBusd), 0, 0)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"2px\",\n        height: 14,\n        width: 90\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"14px\",\n        color: \"textSubtle\",\n        unit: \" CAKE\",\n        value: getBalanceNumber(amountCollectedInCake),\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CardFooter, {\n    p: \"0\",\n    children: [isExpanded && /*#__PURE__*/_jsxDEV(NextDrawWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        mr: \"24px\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            children: t('Prize pot')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), getPrizeBalances()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mb: \"24px\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: [t('Total players this round'), \": \", lotteryGraphData.totalUsers.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RewardBrackets, {\n        lotteryData: lotteryData,\n        isHistoricRound: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      p: \"8px 24px\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(ExpandableLabel, {\n        expanded: isExpanded,\n        onClick: () => setIsExpanded(!isExpanded),\n        children: isExpanded ? t('Hide') : t('Details')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PreviousRoundCardFooter, \"OzuvdKbEvKQSt0httoL9VcWB0WM=\", false, function () {\n  return [useTranslation, useGetLotteryGraphDataById, usePriceCakeBusd];\n});\n\n_c2 = PreviousRoundCardFooter;\nexport default PreviousRoundCardFooter;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NextDrawWrapper\");\n$RefreshReg$(_c2, \"PreviousRoundCardFooter\");","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/src/views/Lottery/components/PreviousRoundCard/Footer.tsx"],"names":["React","useState","styled","Flex","ExpandableLabel","CardFooter","Skeleton","Heading","Box","Text","useTranslation","useGetLotteryGraphDataById","usePriceCakeBusd","formatNumber","getBalanceNumber","Balance","RewardBrackets","NextDrawWrapper","theme","colors","background","mediaQueries","sm","PreviousRoundCardFooter","lotteryData","lotteryId","isExpanded","setIsExpanded","t","amountCollectedInCake","lotteryGraphData","cakePriceBusd","prizeInBusd","times","getPrizeBalances","isNaN","totalUsers","toLocaleString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, ExpandableLabel, CardFooter, Skeleton, Heading, Box, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryRound } from 'state/types'\nimport { useGetLotteryGraphDataById, usePriceCakeBusd } from 'state/hooks'\nimport { formatNumber, getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport RewardBrackets from '../RewardBrackets'\n\nconst NextDrawWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.background};\n  padding: 24px;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst PreviousRoundCardFooter: React.FC<{ lotteryData: LotteryRound; lotteryId: string }> = ({\n  lotteryData,\n  lotteryId,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const { t } = useTranslation()\n  const { amountCollectedInCake } = lotteryData\n  const lotteryGraphData = useGetLotteryGraphDataById(lotteryId)\n  const cakePriceBusd = usePriceCakeBusd()\n  const prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\n\n  const getPrizeBalances = () => {\n    return (\n      <>\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"7px\" height={40} width={160} />\n        ) : (\n          <Heading scale=\"xl\" lineHeight=\"1\" color=\"secondary\">\n            ~${formatNumber(getBalanceNumber(prizeInBusd), 0, 0)}\n          </Heading>\n        )}\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"2px\" height={14} width={90} />\n        ) : (\n          <Balance\n            fontSize=\"14px\"\n            color=\"textSubtle\"\n            unit=\" CAKE\"\n            value={getBalanceNumber(amountCollectedInCake)}\n            decimals={0}\n          />\n        )}\n      </>\n    )\n  }\n\n  return (\n    <CardFooter p=\"0\">\n      {isExpanded && (\n        <NextDrawWrapper>\n          <Flex mr=\"24px\" flexDirection=\"column\" justifyContent=\"space-between\">\n            <Box>\n              <Heading>{t('Prize pot')}</Heading>\n              {getPrizeBalances()}\n            </Box>\n            <Box mb=\"24px\">\n              <Text fontSize=\"14px\">\n                {t('Total players this round')}: {lotteryGraphData.totalUsers.toLocaleString()}\n              </Text>\n            </Box>\n          </Flex>\n          <RewardBrackets lotteryData={lotteryData} isHistoricRound />\n        </NextDrawWrapper>\n      )}\n      <Flex p=\"8px 24px\" alignItems=\"center\" justifyContent=\"center\">\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </Flex>\n    </CardFooter>\n  )\n}\n\nexport default PreviousRoundCardFooter\n"]},"metadata":{},"sourceType":"module"}