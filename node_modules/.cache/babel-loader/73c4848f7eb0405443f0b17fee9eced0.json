{"ast":null,"code":"var _jsxFileName = \"/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Collectibles/components/NftCard/BunnySpecialCakeVaultCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSpecialBunnyCakeVaultContract } from 'hooks/useContract';\nimport { getBunnySpecialCakeVaultContract } from 'utils/contractHelpers';\nimport NftCard from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BunnySpecialCakeVaultCard = ({\n  nft,\n  ...props\n}) => {\n  _s();\n\n  const [isClaimable, setIsClaimable] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const bunnySpecialCakeVaultContract = useSpecialBunnyCakeVaultContract();\n  const {\n    variationId\n  } = nft;\n\n  const handleClaim = async () => {\n    const response = await bunnySpecialCakeVaultContract.mintNFT();\n    await response.wait();\n    setIsClaimable(false);\n    return response;\n  };\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const contract = getBunnySpecialCakeVaultContract();\n      const canClaim = await contract.canClaim(account);\n      setIsClaimable(canClaim);\n    };\n\n    if (account) {\n      fetchClaimStatus();\n    }\n  }, [account, variationId, bunnySpecialCakeVaultContract, setIsClaimable]);\n  return /*#__PURE__*/_jsxDEV(NftCard, {\n    nft: nft,\n    ...props,\n    canClaim: isClaimable,\n    onClaim: handleClaim\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 10\n  }, this);\n};\n\n_s(BunnySpecialCakeVaultCard, \"qykEzKETX5jLsmRb2YaPsZnNZhI=\", false, function () {\n  return [useWeb3React, useSpecialBunnyCakeVaultContract];\n});\n\n_c = BunnySpecialCakeVaultCard;\nexport default BunnySpecialCakeVaultCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BunnySpecialCakeVaultCard\");","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Collectibles/components/NftCard/BunnySpecialCakeVaultCard.tsx"],"names":["React","useEffect","useState","useWeb3React","useSpecialBunnyCakeVaultContract","getBunnySpecialCakeVaultContract","NftCard","BunnySpecialCakeVaultCard","nft","props","isClaimable","setIsClaimable","account","bunnySpecialCakeVaultContract","variationId","handleClaim","response","mintNFT","wait","fetchClaimStatus","contract","canClaim"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,gCAAT,QAAiD,mBAAjD;AACA,SAASC,gCAAT,QAAiD,uBAAjD;AACA,OAAOC,OAAP,MAAsC,SAAtC;;;AAEA,MAAMC,yBAAiD,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAO,KAAGC;AAAV,CAAD,KAAuB;AAAA;;AAC/E,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAcT,YAAY,EAAhC;AACA,QAAMU,6BAA6B,GAAGT,gCAAgC,EAAtE;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBN,GAAxB;;AAEA,QAAMO,WAAW,GAAG,YAAY;AAC9B,UAAMC,QAA8C,GAAG,MAAMH,6BAA6B,CAACI,OAA9B,EAA7D;AACA,UAAMD,QAAQ,CAACE,IAAT,EAAN;AACAP,IAAAA,cAAc,CAAC,KAAD,CAAd;AACA,WAAOK,QAAP;AACD,GALD;;AAOAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,gBAAgB,GAAG,YAAY;AACnC,YAAMC,QAAQ,GAAGf,gCAAgC,EAAjD;AACA,YAAMgB,QAAQ,GAAG,MAAMD,QAAQ,CAACC,QAAT,CAAkBT,OAAlB,CAAvB;AACAD,MAAAA,cAAc,CAACU,QAAD,CAAd;AACD,KAJD;;AAMA,QAAIT,OAAJ,EAAa;AACXO,MAAAA,gBAAgB;AACjB;AACF,GAVQ,EAUN,CAACP,OAAD,EAAUE,WAAV,EAAuBD,6BAAvB,EAAsDF,cAAtD,CAVM,CAAT;AAYA,sBAAO,QAAC,OAAD;AAAS,IAAA,GAAG,EAAEH,GAAd;AAAA,OAAuBC,KAAvB;AAA8B,IAAA,QAAQ,EAAEC,WAAxC;AAAqD,IAAA,OAAO,EAAEK;AAA9D;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA1BD;;GAAMR,yB;UAEgBJ,Y,EACkBC,gC;;;KAHlCG,yB;AA4BN,eAAeA,yBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useSpecialBunnyCakeVaultContract } from 'hooks/useContract'\nimport { getBunnySpecialCakeVaultContract } from 'utils/contractHelpers'\nimport NftCard, { NftCardProps } from './index'\n\nconst BunnySpecialCakeVaultCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const bunnySpecialCakeVaultContract = useSpecialBunnyCakeVaultContract()\n  const { variationId } = nft\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await bunnySpecialCakeVaultContract.mintNFT()\n    await response.wait()\n    setIsClaimable(false)\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const contract = getBunnySpecialCakeVaultContract()\n      const canClaim = await contract.canClaim(account)\n      setIsClaimable(canClaim)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, variationId, bunnySpecialCakeVaultContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default BunnySpecialCakeVaultCard\n"]},"metadata":{},"sourceType":"module"}