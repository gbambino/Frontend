{"ast":null,"code":"import _regeneratorRuntime from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/home/kodachi/Desktop/Frontend1/Frontend1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useEffect,useMemo,useState}from'react';import styled from'styled-components';import{Heading,Card,CardBody,Flex,ArrowForwardIcon,Skeleton}from'@pancakeswap/uikit';import{ChainId}from'@pancakeswap/sdk';import max from'lodash/max';import{NavLink}from'react-router-dom';import BigNumber from'bignumber.js';import{useTranslation}from'contexts/Localization';import{useAppDispatch}from'state';import{useFarms,usePriceCakeBusd}from'state/hooks';import{fetchFarmsPublicDataAsync,nonArchivedFarms}from'state/farms';import{getFarmApr}from'utils/apr';import useIntersectionObserver from'hooks/useIntersectionObserver';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledFarmStakingCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: auto;\\n  width: 100%;\\n\\n  \",\" {\\n    margin: 0;\\n    max-width: none;\\n  }\\n\\n  transition: opacity 200ms;\\n  &:hover {\\n    opacity: 0.65;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.lg;});var CardMidContent=styled(Heading).attrs({scale:'xl'})(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  line-height: 44px;\\n\"])));var EarnAPRCard=function EarnAPRCard(){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isFetchingFarmData=_useState2[0],setIsFetchingFarmData=_useState2[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var _useFarms=useFarms(),farmsLP=_useFarms.data;var cakePrice=usePriceCakeBusd();var dispatch=useAppDispatch();var _useIntersectionObser=useIntersectionObserver(),observerRef=_useIntersectionObser.observerRef,isIntersecting=_useIntersectionObser.isIntersecting;// Fetch farm data once to get the max APR\nuseEffect(function(){var fetchFarmData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map(function(nonArchivedFarm){return nonArchivedFarm.pid;})));case 3:_context.prev=3;setIsFetchingFarmData(false);return _context.finish(3);case 6:case\"end\":return _context.stop();}}},_callee,null,[[0,,3,6]]);}));return function fetchFarmData(){return _ref2.apply(this,arguments);};}();if(isIntersecting){fetchFarmData();}},[dispatch,setIsFetchingFarmData,isIntersecting]);var highestApr=useMemo(function(){if(cakePrice.gt(0)){var aprs=farmsLP.map(function(farm){// Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\nif(farm.pid!==0&&farm.multiplier!=='0X'&&farm.lpTotalInQuoteToken&&farm.quoteToken.busdPrice){var totalLiquidity=new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice);var _getFarmApr=getFarmApr(new BigNumber(farm.poolWeight),cakePrice,totalLiquidity,farm.lpAddresses[ChainId.MAINNET]),cakeRewardsApr=_getFarmApr.cakeRewardsApr,lpRewardsApr=_getFarmApr.lpRewardsApr;return cakeRewardsApr+lpRewardsApr;}return null;});var maxApr=max(aprs);return maxApr===null||maxApr===void 0?void 0:maxApr.toLocaleString('en-US',{maximumFractionDigits:2});}return null;},[cakePrice,farmsLP]);var aprText=highestApr||'-';var earnAprText=t('Earn up to %highestApr% APR in Farms',{highestApr:aprText});var _earnAprText$split=earnAprText.split(aprText),_earnAprText$split2=_slicedToArray(_earnAprText$split,2),earnUpTo=_earnAprText$split2[0],InFarms=_earnAprText$split2[1];return/*#__PURE__*/_jsx(StyledFarmStakingCard,{children:/*#__PURE__*/_jsx(NavLink,{exact:true,activeClassName:\"active\",to:\"/farms\",id:\"farm-apr-cta\",children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(Heading,{color:\"contrast\",scale:\"lg\",children:earnUpTo}),/*#__PURE__*/_jsx(CardMidContent,{color:\"#7645d9\",children:highestApr&&!isFetchingFarmData?\"\".concat(highestApr,\"%\"):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Skeleton,{animation:\"pulse\",variant:\"rect\",height:\"44px\"}),/*#__PURE__*/_jsx(\"div\",{ref:observerRef})]})}),/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Heading,{color:\"contrast\",scale:\"lg\",children:InFarms}),/*#__PURE__*/_jsx(ArrowForwardIcon,{mt:30,color:\"primary\"})]})]})})});};export default EarnAPRCard;","map":{"version":3,"sources":["/home/kodachi/Desktop/Frontend1/Frontend1/src/views/Home/components/EarnAPRCard.tsx"],"names":["React","useEffect","useMemo","useState","styled","Heading","Card","CardBody","Flex","ArrowForwardIcon","Skeleton","ChainId","max","NavLink","BigNumber","useTranslation","useAppDispatch","useFarms","usePriceCakeBusd","fetchFarmsPublicDataAsync","nonArchivedFarms","getFarmApr","useIntersectionObserver","StyledFarmStakingCard","theme","mediaQueries","lg","CardMidContent","attrs","scale","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","t","farmsLP","data","cakePrice","dispatch","observerRef","isIntersecting","fetchFarmData","map","nonArchivedFarm","pid","highestApr","gt","aprs","farm","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","poolWeight","lpAddresses","MAINNET","cakeRewardsApr","lpRewardsApr","maxApr","toLocaleString","maximumFractionDigits","aprText","earnAprText","split","earnUpTo","InFarms"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    if (isIntersecting) {\n      fetchFarmData()\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n            new BigNumber(farm.poolWeight),\n            cakePrice,\n            totalLiquidity,\n            farm.lpAddresses[ChainId.MAINNET],\n          )\n          return cakeRewardsApr + lpRewardsApr\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <>\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n                <div ref={observerRef} />\n              </>\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n"]},"metadata":{},"sourceType":"module"}