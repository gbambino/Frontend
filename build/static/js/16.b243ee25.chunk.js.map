{"version":3,"sources":["views/Home/hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","hooks/useIntersectionObserver.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/PredictionPromotionCard.tsx","views/Home/components/LotteryPromotionCard.tsx","views/Home/hooks/useFetchLotteryForPromos.ts","views/Home/Home.tsx","hooks/useTokenBalance.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/lodash/max.js"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","farmsWithBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","gt","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","toastError","useToast","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvestFarm","scale","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","useIntersectionObserver","observerRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","IntersectionObserver","entry","rootMargin","threshold","observe","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","lpAddresses","ChainId","MAINNET","cakeRewardsApr","lpRewardsApr","maxApr","max","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","ref","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","includes","latestPools","orderBy","slice","assets","join","EarnAssetCard","earn","InPools","StyledPredictionCard","sm","md","PredictionLive","Text","PredictionOver","PredictionWon","Balance","StyledSkeleton","Skeleton","PredictionBNBSoFar","PredictionTryNow","Flex","PredictionPromotionCard","slowRefresh","loadData","setLoadData","bnbBusdPrice","usePriceBnbBusd","bnbWon","setBnbWon","bnbWonInUsd","setBnbWonInUsd","getTotalWon","totalWon","fetchMarketData","bnbWonInUsdText","toString","amount","over","bnbSoFar","href","px","PrizeText","LotteryPromotionCard","currentLotteryPrize","prizeInBusd","prizeTotal","prizeTotalText","isNaN","inPrizes","useFetchLotteryForPromos","lotteryId","setLotteryId","setCurrentLotteryPrize","fetchCurrentLotteryIdAndMaxBuy","currentLotteryId","fetchCurrentID","fetchLottery","amountCollectedInCake","fetchCurrentLotteryPrize","Hero","Cards","BaseLayout","CTACards","Home","Page","as","FarmStakingCard","FetchStatus","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","setBalance","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","setLastUpdated","simpleRpcProvider","getBalance","walletBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","prev","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","baseExtremum","require","baseGt","identity","module","exports","array"],"mappings":"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","file":"static/js/16.b243ee25.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from 'hooks/useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { FarmWithBalance } from 'views/Home/hooks/useFarmsWithBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\ninterface CakeHarvestBalanceProps {\n  farmsWithBalance: FarmWithBalance[]\n}\n\nconst CakeHarvestBalance: React.FC<CakeHarvestBalanceProps> = ({ farmsWithBalance }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const earningsSum = farmsWithBalance.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning.balance)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const { t } = useTranslation()\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { harvestFarm } from 'utils/calls'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/emblem.png');\n  background-repeat: no-repeat;\n  background-position: right center;\n  min-height: 376px;\n  background-size:80% 100%;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvestFarm(masterChefContract, farmWithBalance.pid)\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    }\n    setPendingTx(false)\n  }, [balancesWithValue, masterChefContract, toastError, t])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/toco.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('TOCO to Harvest')}:</Label>\n          <CakeHarvestBalance farmsWithBalance={balancesWithValue} />\n        </Block>\n        <Block>\n          <Label>{t('TOCO in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting TOCO')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('TOCO Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total TOCO Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={1000000} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total TOCO Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={500000} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('New TOCO/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={5} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useGetStats()\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"24px\">\n          {t('Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{t('Across all LPs and TOCO Nests')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/* eslint-disable camelcase */\nexport interface DeBankTvlResponse {\n  id: string\n  chain: string\n  name: string\n  site_url: string\n  logo_url: string\n  has_supported_portfolio: boolean\n  tvl: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\n        const responseData: DeBankTvlResponse = await response.json()\n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import { useEffect, useRef, useState } from 'react'\n\nconst useIntersectionObserver = () => {\n  const observerRef = useRef<HTMLDivElement>(null)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [isIntersecting, setIsIntersecting] = useState(false)\n\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\n      setIsIntersecting(entry.isIntersecting)\n    }\n\n    if (!observerIsSet) {\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      intersectionObserver.observe(observerRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  return { observerRef, isIntersecting }\n}\n\nexport default useIntersectionObserver\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    if (isIntersecting) {\n      fetchFarmData()\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n            new BigNumber(farm.poolWeight),\n            cakePrice,\n            totalLiquidity,\n            farm.lpAddresses[ChainId.MAINNET],\n          )\n          return cakeRewardsApr + lpRewardsApr\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <>\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n                <div ref={observerRef} />\n              </>\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#53dee9, #7645d9);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\n\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n// Always include CAKE\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\nconst EarnAssetCard = () => {\n  const { t } = useTranslation()\n  const assetText = t('Earn %assets% in Pools', { assets })\n  const [earn, InPools] = assetText.split(assets)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earn}\n          </Heading>\n          <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InPools}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, ArrowForwardIcon, Link, Button, Text, Skeleton, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getTotalWon } from 'state/predictions/helpers'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport Balance from '../../../components/Balance'\n\nconst StyledPredictionCard = styled(Card)`\n  background-image: url('/images/prediction_promotion.png');\n  background-repeat: no-repeat;\n  background-position: bottom right;\n  background-size: 50%;\n  min-height: 376px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    background-size: 45%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    background-size: 50%;\n  }\n`\n\nconst PredictionLive = styled(Text)`\n  font-size: 28px;\n  line-height: 1.1;\n  font-weight: 600;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 40px;\n  }\n`\n\nconst PredictionOver = styled(Text)`\n  font-size: 36px;\n  line-height: 1.1;\n  font-weight: 600;\n  max-width: 380px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 50px;\n  }\n`\n\nconst PredictionWon = styled(Balance)`\n  font-size: 36px;\n  line-height: 1.1;\n  font-weight: 600;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 50px;\n  }\n`\n\nconst StyledSkeleton = styled(Skeleton)`\n  height: 40px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    height: 55px;\n  }\n`\n\nconst PredictionBNBSoFar = styled(Text)`\n  font-size: 22px;\n  line-height: 1.1;\n  font-weight: 600;\n  max-width: 160px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 24px;\n    max-width: 320px;\n  }\n`\n\nconst PredictionTryNow = styled(Flex)`\n  align-items: center;\n  max-width: 120px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: none;\n  }\n`\n\nconst PredictionPromotionCard = () => {\n  const { t } = useTranslation()\n  const { slowRefresh } = useRefresh()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const [loadData, setLoadData] = useState(false)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const [bnbWon, setBnbWon] = useState(0)\n  const [bnbWonInUsd, setBnbWonInUsd] = useState(0)\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    if (isIntersecting) {\n      setLoadData(true)\n    }\n  }, [isIntersecting])\n\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      const totalWon = await getTotalWon()\n      setBnbWon(totalWon)\n    }\n\n    if (loadData) {\n      fetchMarketData()\n    }\n  }, [slowRefresh, loadData])\n\n  useEffect(() => {\n    if (bnbBusdPrice.gt(0) && bnbWon > 0) {\n      setBnbWonInUsd(bnbBusdPrice.times(bnbWon).toNumber())\n    }\n  }, [bnbBusdPrice, bnbWon])\n\n  const bnbWonInUsdText = bnbWonInUsd ? bnbWonInUsd.toString() : '-'\n  const wonBNBText = t('', { amount: bnbWonInUsdText })\n  const [over, bnbSoFar] = wonBNBText.split(bnbWonInUsdText)\n\n  return (\n    <StyledPredictionCard>\n      <CardBody>\n        <PredictionLive mb=\"24px\">{t('Announcements')}</PredictionLive>\n        <PredictionOver bold color=\"#7645d9\">\n          {over}\n        </PredictionOver>\n        {bnbWonInUsd ? (\n          <PredictionWon mb=\"24px\" color=\"#7645d9\" bold prefix=\"$\" decimals={0} value={bnbWonInUsd} />\n        ) : (\n          <>\n            <StyledSkeleton animation=\"pulse\" variant=\"rect\" mb=\"24px\" width={180} />\n            <div ref={observerRef} />\n          </>\n        )}\n        <PredictionBNBSoFar bold mb=\"24px\">\n          {bnbSoFar}\n        </PredictionBNBSoFar>\n        <Text color=\"textSubtle\" mb=\"24px\">\n          *{t('Beta Version')}\n        </Text>\n        <Link href=\"https://twitter.com/ToucanSwapDex\" id=\"homepage-prediction-cta\">\n          <Button px={['14px', null, null, null, '20px']}>\n            <PredictionTryNow>\n              <Text color=\"white\" bold fontSize=\"16px\">\n                {t('Twitter')}\n              </Text>\n              <ArrowForwardIcon color=\"white\" />\n            </PredictionTryNow>\n          </Button>\n        </Link>\n      </CardBody>\n    </StyledPredictionCard>\n  )\n}\n\nexport default PredictionPromotionCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\n\nconst PrizeText = styled(Text)`\n  word-wrap: break-word;\n`\n\nconst LotteryPromotionCard: React.FC<{ currentLotteryPrize: string }> = ({ currentLotteryPrize }) => {\n  const { t } = useTranslation()\n  const cakePriceBusd = usePriceCakeBusd()\n  const prizeInBusd = cakePriceBusd.times(currentLotteryPrize)\n  const prizeTotal = getBalanceNumber(prizeInBusd)\n\n  const prizeTotalText = prizeInBusd.isNaN() ? prizeTotal.toString() : '-'\n  const prizeText = t('Contract Address: ')\n  const [over, inPrizes] = prizeText.split(prizeTotalText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {t('Contract Addresses')}\n          </Heading>\n          <PrizeText color=\"#7645d9\" fontSize=\"40px\" bold lineHeight=\"1.1\">\n            {over}\n          </PrizeText>\n          {prizeInBusd.isNaN() ? (\n            <>\n              <Skeleton height={60} width={210} />\n            </>\n          ) : (\n            <Balance fontSize=\"40px\" color=\"#7645d9\" bold lineHeight=\"1.1\" prefix=\"$\" decimals={0} value={prizeTotal} />\n          )}\n          <Flex justifyContent=\"space-between\">\n            <PrizeText color=\"contrast\" fontSize=\"28px\" bold lineHeight=\"1.1\">\n              {inPrizes}\n            </PrizeText>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default LotteryPromotionCard\n","import { useState, useEffect } from 'react'\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers'\nimport useRefresh from 'hooks/useRefresh'\n\nconst useFetchLotteryForPromos = () => {\n  const { slowRefresh } = useRefresh()\n  const [lotteryId, setLotteryId] = useState<string>(null)\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState<string>(null)\n\n  useEffect(() => {\n    // get current lottery ID\n    const fetchCurrentID = async () => {\n      const { currentLotteryId } = await fetchCurrentLotteryIdAndMaxBuy()\n      setLotteryId(currentLotteryId)\n    }\n\n    fetchCurrentID()\n  }, [setLotteryId])\n\n  useEffect(() => {\n    // get public data for current lottery\n    const fetchCurrentLotteryPrize = async () => {\n      const { amountCollectedInCake } = await fetchLottery(lotteryId)\n      setCurrentLotteryPrize(amountCollectedInCake)\n    }\n\n    if (lotteryId) {\n      fetchCurrentLotteryPrize()\n    }\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize])\n\n  return { currentLotteryPrize }\n}\n\nexport default useFetchLotteryForPromos\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport PredictionPromotionCard from 'views/Home/components/PredictionPromotionCard'\nimport LotteryPromotionCard from 'views/Home/components/LotteryPromotionCard'\nimport useFetchLotteryForPromos from 'views/Home/hooks/useFetchLotteryForPromos'\n\nconst Hero = styled.div`\n  align-items: stretch;\n  background-image: url('/images/banner_mobile.jpg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/banner.jpg');\n    background-position: center center, right center;\n    height: 165px;\n    min-width: 968px;\n    padding-top: 0px;\n    -moz-box-align: center;\n    align-items: center;\n    background-size:cover;\n    background-repeat: no-repeat;\n    display: flex;\n    -moz-box-pack: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: auto auto 32px;\n    text-align: center;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n  const { currentLotteryPrize } = useFetchLotteryForPromos()\n\n  return (\n    <>\n      <Page>\n        <Hero>\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n            {t('')}\n          </Heading>\n        </Hero>\n        <div>\n          <Cards>\n            <FarmStakingCard />\n            <PredictionPromotionCard />\n          </Cards>\n          <CTACards>\n            <EarnAPRCard />\n            <EarnAssetCard />\n            <LotteryPromotionCard currentLotteryPrize={currentLotteryPrize} />\n          </CTACards>\n          <Cards>\n            <CakeStats />\n            <TotalValueLockedCard />\n          </Cards>\n        </div>\n      </Page>\n    </>\n  )\n}\n\nexport default Home","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.totalSupply()\n      setTotalSupply(new BigNumber(supply.toString()))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res.toString()))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await simpleRpcProvider.getBalance(account)\n      setBalance(new BigNumber(walletBalance.toString()))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n"],"sourceRoot":""}