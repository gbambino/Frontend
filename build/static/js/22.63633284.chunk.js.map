{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","TokenPairImage","variant","primaryToken","secondaryToken","flexDirection","split","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","useApproveFarm","lpContract","onApprove","approve","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","mt","UnlockButton","ApyButton","apr","displayApr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","isFarm","onPresentApyModal","event","stopPropagation","ml","StyledCardAccent","keyframes","FCard","card","background","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanAddressUrl","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","exact","activeClassName","p","Page","checked","Select","options","option","marginLeft","SearchInput","target","sort","b","renderContent","src","alt"],"mappings":"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","file":"static/js/22.63633284.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await lpContract.approve(masterChefContract.address, ethers.constants.MaxUint256)\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, displayApr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`  \n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: rgba(0, 0, 0, 0) linear-gradient(45deg, rgb(255, 0, 0) 0%, rgb(255, 154, 0) 10%, rgb(208, 222, 33) 20%, rgb(79, 220, 74) 30%, rgb(63, 218, 216) 40%, rgb(47, 201, 226) 50%, rgb(28, 127, 238) 60%, rgb(95, 21, 242) 70%, rgb(186, 12, 248) 80%, rgb(251, 7, 217) 90%, rgb(255, 0, 0) 100%) repeat scroll 0% 0% / 300% 300%;\n  background-size: 400% 400%;\n  animation: 2s linear 0s infinite normal none running ilqnTz;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n                {displayApr}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(lpAddress)}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton\n              lpLabel={lpLabel}\n              cakePrice={cakePrice}\n              apr={originalValue}\n              displayApr={value}\n              addLiquidityUrl={addLiquidityUrl}\n            />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React, { useState } from 'react'\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 6\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('TOCO', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n                cakePrice={cakePrice}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\n          <Button p=\"0\" variant=\"text\">\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\n              {t('Community Auctions')}\n            </Text>\n            <ArrowForwardIcon color=\"primary\" />\n          </Button>\n        </NavLink>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}