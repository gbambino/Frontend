{"version":3,"sources":["views/Voting/components/CastVoteModal/types.ts","views/Voting/Proposal/Details.tsx","views/Voting/components/TextEllipsis.tsx","views/Voting/Proposal/Results.tsx","views/Voting/components/CastVoteModal/MainView.tsx","views/Voting/components/CastVoteModal/index.tsx","views/Voting/Proposal/Vote.tsx","views/Voting/components/Proposal/VotesLoading.tsx","views/Voting/components/Proposal/Row.tsx","views/Voting/components/Proposal/VoteRow.tsx","views/Voting/Proposal/Votes.tsx","views/Voting/Proposal/index.tsx","views/Voting/helpers.ts","views/Voting/config.ts","utils/truncateWalletAddress.ts","views/Voting/components/Proposals/tags.tsx","views/Voting/components/CastVoteModal/styles.tsx","views/Voting/components/Layout.tsx","views/Voting/components/CastVoteModal/DetailsView.tsx","views/Voting/hooks/useGetVotingPower.tsx","components/ReactMarkdown/styles.tsx","components/ReactMarkdown/index.tsx"],"names":["ConfirmVoteView","DetailBox","styled","Box","theme","colors","background","cardBorder","Details","proposal","t","useTranslation","startDate","Date","start","endDate","end","mb","as","scale","alignItems","color","href","IPFS_GATEWAY","id","ml","slice","getBscScanAddressUrl","author","truncateWalletAddress","getBscScanBlockNumberUrl","snapshot","p","proposalState","state","fontSize","format","TextEllipsis","Text","Results","choices","votes","results","calculateVoteResults","votingStatus","useGetVotingStateLoadingStatus","account","useWeb3React","totalVotes","getTotalFromVotes","VotingStateLoadingStatus","IDLE","map","choice","index","choiceVotes","totalChoiceVote","progress","eq","div","times","toNumber","hasVoted","some","vote","voter","toLowerCase","mt","title","variant","outline","mr","primaryStep","justifyContent","total","toFormat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","LOADING","length","count","height","MainView","isPending","isLoading","onConfirm","onViewDetails","onDismiss","textTransform","bold","label","onClick","style","cursor","width","endIcon","spin","disabled","maxWidth","CastVoteModal","onSuccess","proposalId","block","useState","MAIN","view","setView","modalIsOpen","setModalIsOpen","setIsPending","toastError","useToast","provider","useWeb3Provider","useTheme","useGetVotingPower","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","verificationHash","isStartView","handleBack","DETAILS","handleDismiss","handleConfirmVote","a","voteMsg","JSON","stringify","generatePayloadData","type","SnapshotCommand","VOTE","payload","value","metadata","votingPower","toString","signMessage","sig","msg","address","sendSnaphotData","message","console","error","onBack","hideCloseButton","headerBackground","gradients","cardHeader","DetailsView","Choice","isChecked","isDisabled","ChoiceText","Vote","props","setVote","toastSuccess","dispatch","useAppDispatch","handleSuccess","fetchVotes","Number","useModal","presentCastVoteModal","flexShrink","checked","onChange","UnlockButton","Row","Flex","StyledSkeleton","Skeleton","VotesLoading","AddressColumn","attrs","ChoiceColumn","VotingPowerColumn","Grid","mediaQueries","sm","VoteRow","isVoter","hasVotingPower","BigNumber","parseVotePower","incomingVote","parseFloat","Votes","showAll","setShowAll","orderedVotes","orderBy","displayVotes","isFinished","py","px","Proposal","useParams","useGetProposal","useGetVotes","voteLoadingStatus","proposalLoadingStatus","useGetProposalLoadingStatus","hasAccountVoted","isPageLoading","useEffect","fetchProposal","verifyVotes","getVotes","Container","Link","to","startIcon","Layout","isCoreProposal","ReactMarkdown","body","ProposalState","ACTIVE","PageLoader","ADMIN_ADDRESS","filterProposalsByType","proposals","proposalType","ProposalType","COMMUNITY","filter","CORE","ALL","filterProposalsByState","generateMetaData","plugins","network","strategies","name","params","symbol","getCakeAddress","decimals","version","SNAPSHOT_VERSION","timestamp","now","toFixed","space","PANCAKE_SPACE","fetch","SNAPSHOT_HUB_API","method","headers","Accept","response","ok","json","Error","error_description","data","getVotingPower","poolAddresses","simpleRpcProvider","getBlockNumber","blockNumber","SNAPSHOT_VOTING_API","reduce","accum","choiceText","power","plus","BIG_ZERO","PROPOSALS_TO_SHOW","VOTE_THRESHOLD","startLength","endLength","substring","ProposalStateTag","PENDING","ProposalTypeTag","VotingBox","ModalInner","lg","textAlign","initialState","isActive","setVotingPower","setIsLoading","getActivePools","eligiblePools","contractAddress","getAddress","prevVotingPower","fetchVotingPower","Table","table","ThemedComponent","text","Title","my","markdownComponents","h1","h2","h3","h4","h5","h6","ol","ul","pre","remarkPlugins","gfm","components"],"mappings":"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","file":"static/js/9.956811e7.chunk.js","sourcesContent":["import { InjectedModalProps } from '@pancakeswap/uikit'\n\nexport enum ConfirmVoteView {\n  MAIN = 'main',\n  DETAILS = 'details',\n}\n\nexport interface CastVoteModalProps extends InjectedModalProps {\n  onSuccess: () => Promise<void>\n  proposalId: string\n  vote: {\n    label: string\n    value: number\n  }\n  block?: number\n}\n","import React from 'react'\nimport { Box, Card, CardBody, CardHeader, Flex, Heading, LinkExternal, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { format } from 'date-fns'\nimport { Proposal } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanAddressUrl, getBscScanBlockNumberUrl } from 'utils/bscscan'\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\nimport { IPFS_GATEWAY } from '../config'\nimport { ProposalStateTag } from '../components/Proposals/tags'\n\ninterface DetailsProps {\n  proposal: Proposal\n}\n\nconst DetailBox = styled(Box)`\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 16px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ proposal }) => {\n  const { t } = useTranslation()\n  const startDate = new Date(proposal.start * 1000)\n  const endDate = new Date(proposal.end * 1000)\n\n  return (\n    <Card mb=\"16px\">\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Details')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        <Flex alignItems=\"center\" mb=\"8px\">\n          <Text color=\"textSubtle\">{t('Identifier')}</Text>\n          <LinkExternal href={`${IPFS_GATEWAY}/${proposal.id}`} ml=\"8px\">\n            {proposal.id.slice(0, 8)}\n          </LinkExternal>\n        </Flex>\n        <Flex alignItems=\"center\" mb=\"8px\">\n          <Text color=\"textSubtle\">{t('Creator')}</Text>\n          <LinkExternal href={getBscScanAddressUrl(proposal.author)} ml=\"8px\">\n            {truncateWalletAddress(proposal.author)}\n          </LinkExternal>\n        </Flex>\n        <Flex alignItems=\"center\" mb=\"16px\">\n          <Text color=\"textSubtle\">{t('Snapshot')}</Text>\n          <LinkExternal href={getBscScanBlockNumberUrl(proposal.snapshot)} ml=\"8px\">\n            {proposal.snapshot}\n          </LinkExternal>\n        </Flex>\n        <DetailBox p=\"16px\">\n          <ProposalStateTag proposalState={proposal.state} mb=\"8px\" />\n          <Flex alignItems=\"center\">\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {t('Start Date')}\n            </Text>\n            <Text ml=\"8px\">{format(startDate, 'yyyy-MM-dd HH:mm')}</Text>\n          </Flex>\n          <Flex alignItems=\"center\">\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {t('End Date')}\n            </Text>\n            <Text ml=\"8px\">{format(endDate, 'yyyy-MM-dd HH:mm')}</Text>\n          </Flex>\n        </DetailBox>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Details\n","import styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\n\nconst TextEllipsis = styled(Text)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nexport default TextEllipsis\n","import React from 'react'\nimport {\n  Box,\n  Text,\n  Flex,\n  Card,\n  CardBody,\n  CardHeader,\n  Heading,\n  Progress,\n  Skeleton,\n  Tag,\n  CheckmarkCircleIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport times from 'lodash/times'\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\nimport { useGetVotingStateLoadingStatus } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers'\nimport TextEllipsis from '../components/TextEllipsis'\n\ninterface ResultsProps {\n  choices: string[]\n  votes: Vote[]\n}\n\nconst Results: React.FC<ResultsProps> = ({ choices, votes }) => {\n  const { t } = useTranslation()\n  const results = calculateVoteResults(votes)\n  const votingStatus = useGetVotingStateLoadingStatus()\n  const { account } = useWeb3React()\n  const totalVotes = getTotalFromVotes(votes)\n\n  return (\n    <Card>\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Current Results')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        {votingStatus === VotingStateLoadingStatus.IDLE &&\n          choices.map((choice, index) => {\n            const choiceVotes = results[choice] || []\n            const totalChoiceVote = getTotalFromVotes(choiceVotes)\n\n            const progress = totalVotes.eq(0) ? 0 : totalChoiceVote.div(totalVotes).times(100).toNumber()\n            const hasVoted = choiceVotes.some((vote) => {\n              return account && vote.voter.toLowerCase() === account.toLowerCase()\n            })\n\n            return (\n              <Box key={choice} mt={index > 0 ? '24px' : '0px'}>\n                <Flex alignItems=\"center\" mb=\"8px\">\n                  <TextEllipsis mb=\"4px\" title={choice}>\n                    {choice}\n                  </TextEllipsis>\n                  {hasVoted && (\n                    <Tag variant=\"success\" outline ml=\"8px\">\n                      <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n                    </Tag>\n                  )}\n                </Flex>\n                <Box mb=\"4px\">\n                  <Progress primaryStep={progress} scale=\"sm\" />\n                </Box>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                  <Text color=\"textSubtle\">{t('%total% Votes', { total: totalChoiceVote.toFormat(3) })}</Text>\n                  <Text>\n                    {progress.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\n                  </Text>\n                </Flex>\n              </Box>\n            )\n          })}\n\n        {votingStatus === VotingStateLoadingStatus.LOADING &&\n          times(choices.length).map((count, index) => {\n            return (\n              <Box key={count} mt={index > 0 ? '24px' : '0px'}>\n                <Skeleton height=\"36px\" mb=\"4px\" />\n              </Box>\n            )\n          })}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Results\n","import React from 'react'\nimport {\n  Box,\n  IconButton,\n  Text,\n  Skeleton,\n  Button,\n  Message as UIKitMessage,\n  AutoRenewIcon,\n  ChevronRightIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport TextEllipsis from '../TextEllipsis'\nimport { VotingBox, ModalInner } from './styles'\nimport { CastVoteModalProps } from './types'\n\ninterface MainViewProps {\n  vote: {\n    label: string\n    value: number\n  }\n  isLoading: boolean\n  isPending: boolean\n  total: BigNumber\n  onConfirm: () => void\n  onViewDetails: () => void\n  onDismiss: CastVoteModalProps['onDismiss']\n}\n\nconst MainView: React.FC<MainViewProps> = ({\n  vote,\n  total,\n  isPending,\n  isLoading,\n  onConfirm,\n  onViewDetails,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <ModalInner>\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\n          {t('Voting For')}\n        </Text>\n        <TextEllipsis bold fontSize=\"20px\" mb=\"8px\" title={vote.label}>\n          {vote.label}\n        </TextEllipsis>\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\n          {t('Your Voting Power')}\n        </Text>\n        {isLoading ? (\n          <Skeleton height=\"64px\" mb=\"24px\" />\n        ) : (\n          <VotingBox onClick={onViewDetails} style={{ cursor: 'pointer' }}>\n            <Text bold fontSize=\"20px\">\n              {total.toFormat(3)}\n            </Text>\n            <IconButton scale=\"sm\" variant=\"text\">\n              <ChevronRightIcon width=\"24px\" />\n            </IconButton>\n          </VotingBox>\n        )}\n        <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\">\n          {t('Are you sure you want to vote for the above choice? This action cannot be undone.')}\n        </Text>\n      </ModalInner>\n      <Button\n        isLoading={isPending}\n        endIcon={isPending ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={isLoading || total.eq(0)}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={onConfirm}\n      >\n        {t('Confirm Vote')}\n      </Button>\n      <Button variant=\"secondary\" width=\"100%\" onClick={onDismiss}>\n        {t('Cancel')}\n      </Button>\n      <Box mt=\"24px\" maxWidth=\"320px\">\n        <UIKitMessage variant=\"warning\">\n          <Text as=\"p\">\n            {t('SafePal users may be temporarily unable to vote: Please connect directly via WalletConnect instead.')}\n          </Text>\n        </UIKitMessage>\n      </Box>\n    </>\n  )\n}\n\nexport default MainView\n","import React, { useState } from 'react'\nimport { Box, Modal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { SnapshotCommand } from 'state/types'\nimport { signMessage } from 'utils/web3React'\nimport useToast from 'hooks/useToast'\nimport useWeb3Provider from 'hooks/useWeb3Provider'\nimport useTheme from 'hooks/useTheme'\nimport { CastVoteModalProps, ConfirmVoteView } from './types'\nimport MainView from './MainView'\nimport DetailsView from './DetailsView'\nimport { generatePayloadData, Message, sendSnaphotData } from '../../helpers'\nimport useGetVotingPower from '../../hooks/useGetVotingPower'\n\nconst CastVoteModal: React.FC<CastVoteModalProps> = ({ onSuccess, proposalId, vote, block, onDismiss }) => {\n  const [view, setView] = useState<ConfirmVoteView>(ConfirmVoteView.MAIN)\n  const [modalIsOpen, setModalIsOpen] = useState(true)\n  const [isPending, setIsPending] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const provider = useWeb3Provider()\n  const { theme } = useTheme()\n  const {\n    isLoading,\n    total,\n    cakeBalance,\n    cakeVaultBalance,\n    cakePoolBalance,\n    poolsBalance,\n    cakeBnbLpBalance,\n    verificationHash,\n  } = useGetVotingPower(block, modalIsOpen)\n\n  const isStartView = view === ConfirmVoteView.MAIN\n  const handleBack = isStartView ? null : () => setView(ConfirmVoteView.MAIN)\n  const handleViewDetails = () => setView(ConfirmVoteView.DETAILS)\n\n  const title = {\n    [ConfirmVoteView.MAIN]: t('Confirm Vote'),\n    [ConfirmVoteView.DETAILS]: t('Voting Power'),\n  }\n\n  const handleDismiss = () => {\n    setModalIsOpen(false)\n    onDismiss()\n  }\n\n  const handleConfirmVote = async () => {\n    try {\n      setIsPending(true)\n      const voteMsg = JSON.stringify({\n        ...generatePayloadData(),\n        type: SnapshotCommand.VOTE,\n        payload: {\n          proposal: proposalId,\n          choice: vote.value,\n          metadata: {\n            votingPower: total.toString(),\n            verificationHash,\n          },\n        },\n      })\n\n      const sig = await signMessage(provider, account, voteMsg)\n      const msg: Message = { address: account, msg: voteMsg, sig }\n\n      // Save proposal to snapshot\n      await sendSnaphotData(msg)\n      setIsPending(false)\n\n      await onSuccess()\n\n      handleDismiss()\n    } catch (error) {\n      setIsPending(false)\n      toastError(t('Error'), error?.message)\n      console.error(error)\n    }\n  }\n\n  return (\n    <Modal\n      title={title[view]}\n      onBack={handleBack}\n      onDismiss={onDismiss}\n      hideCloseButton={!isStartView}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Box mb=\"24px\" width=\"320px\">\n        {view === ConfirmVoteView.MAIN && (\n          <MainView\n            vote={vote}\n            isLoading={isLoading}\n            isPending={isPending}\n            total={total}\n            onConfirm={handleConfirmVote}\n            onViewDetails={handleViewDetails}\n            onDismiss={handleDismiss}\n          />\n        )}\n        {view === ConfirmVoteView.DETAILS && (\n          <DetailsView\n            total={total}\n            cakeBalance={cakeBalance}\n            cakeVaultBalance={cakeVaultBalance}\n            cakePoolBalance={cakePoolBalance}\n            poolsBalance={poolsBalance}\n            cakeBnbLpBalance={cakeBnbLpBalance}\n          />\n        )}\n      </Box>\n    </Modal>\n  )\n}\n\nexport default CastVoteModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, CardHeader, CardProps, Heading, Radio, Text, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { Proposal } from 'state/types'\nimport { fetchVotes } from 'state/voting'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\nimport CastVoteModal from '../components/CastVoteModal'\n\ninterface VoteProps extends CardProps {\n  proposal: Proposal\n}\n\ninterface State {\n  label: string\n  value: number\n}\n\nconst Choice = styled.label<{ isChecked: boolean; isDisabled: boolean }>`\n  align-items: center;\n  border: 1px solid ${({ theme, isChecked }) => theme.colors[isChecked ? 'success' : 'cardBorder']};\n  border-radius: 16px;\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  margin-bottom: 16px;\n  padding: 16px;\n`\n\nconst ChoiceText = styled.div`\n  flex: 1;\n  padding-left: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 0;\n`\n\nconst Vote: React.FC<VoteProps> = ({ proposal, ...props }) => {\n  const [vote, setVote] = useState<State>(null)\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleSuccess = async () => {\n    toastSuccess(t('Vote cast!'))\n    dispatch(fetchVotes({ proposalId: proposal.id, block: Number(proposal.snapshot) }))\n  }\n\n  const [presentCastVoteModal] = useModal(\n    <CastVoteModal onSuccess={handleSuccess} proposalId={proposal.id} vote={vote} block={Number(proposal.snapshot)} />,\n  )\n\n  return (\n    <Card {...props}>\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Cast your vote')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        {proposal.choices.map((choice, index) => {\n          const isChecked = index + 1 === vote?.value\n\n          const handleChange = () => {\n            setVote({\n              label: choice,\n              value: index + 1,\n            })\n          }\n\n          return (\n            <Choice key={choice} isChecked={isChecked} isDisabled={!account}>\n              <div style={{ flexShrink: 0 }}>\n                <Radio scale=\"sm\" value={choice} checked={isChecked} onChange={handleChange} disabled={!account} />\n              </div>\n              <ChoiceText>\n                <Text as=\"span\" title={choice}>\n                  {choice}\n                </Text>\n              </ChoiceText>\n            </Choice>\n          )\n        })}\n        {account ? (\n          <Button onClick={presentCastVoteModal} disabled={vote === null}>\n            {t('Cast Vote')}\n          </Button>\n        ) : (\n          <UnlockButton />\n        )}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Vote\n","import React from 'react'\nimport { Box, Flex, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\nimport styled from 'styled-components'\n\nconst Row = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 16px 24px;\n`\n\nconst StyledSkeleton = styled(Skeleton)`\n  flex: 1;\n`\n\nconst VotesLoading = () => {\n  return (\n    <Box>\n      {times(10).map((index) => (\n        <Row key={index}>\n          <Skeleton height=\"21px\" mr=\"32px\" width=\"100px\" />\n          <StyledSkeleton height=\"21px\" mr=\"32px\" width=\"100%\" />\n          <StyledSkeleton height=\"21px\" width=\"100%\" />\n        </Row>\n      ))}\n    </Box>\n  )\n}\n\nexport default VotesLoading\n","import styled from 'styled-components'\nimport { Grid, Box } from '@pancakeswap/uikit'\n\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\n  grid-area: address;\n`\n\nexport const ChoiceColumn = styled(Box)`\n  grid-area: choice;\n  overflow: hidden;\n`\n\nexport const VotingPowerColumn = styled(Box)`\n  justify-self: end;\n  grid-area: vote;\n`\n\nconst Row = styled(Grid)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  grid-gap: 8px;\n  grid-template-areas: 'address choice vote';\n  grid-template-columns: minmax(110px, 200px) 1fr 1fr;\n  padding: 8px 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    padding: 16px 24px;\n  }\n`\n\nexport default Row\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, LinkExternal, Text, Tag, CheckmarkCircleIcon } from '@pancakeswap/uikit'\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useTranslation } from 'contexts/Localization'\nimport { Vote } from 'state/types'\nimport { IPFS_GATEWAY } from '../../config'\nimport TextEllipsis from '../TextEllipsis'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\n\ninterface VoteRowProps {\n  vote: Vote\n  isVoter: boolean\n}\n\nconst VoteRow: React.FC<VoteRowProps> = ({ vote, isVoter }) => {\n  const { t } = useTranslation()\n  const hasVotingPower = !!vote.metadata?.votingPower\n  const votingPower = hasVotingPower ? new BigNumber(vote.metadata.votingPower).toFormat(3) : '--'\n\n  return (\n    <Row>\n      <AddressColumn>\n        <Flex alignItems=\"center\">\n          <LinkExternal href={getBscScanAddressUrl(vote.voter)}>{truncateWalletAddress(vote.voter)}</LinkExternal>\n          {isVoter && (\n            <Tag variant=\"success\" outline ml=\"8px\">\n              <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n            </Tag>\n          )}\n        </Flex>\n      </AddressColumn>\n      <ChoiceColumn>\n        <TextEllipsis title={vote.proposal.choices[vote.choice - 1]}>\n          {vote.proposal.choices[vote.choice - 1]}\n        </TextEllipsis>\n      </ChoiceColumn>\n      <VotingPowerColumn>\n        <Flex alignItems=\"center\" justifyContent=\"end\">\n          <Text title={vote.metadata.votingPower}>{votingPower}</Text>\n          {hasVotingPower && <LinkExternal href={`${IPFS_GATEWAY}/${vote.id}`} />}\n        </Flex>\n      </VotingPowerColumn>\n    </Row>\n  )\n}\n\nexport default VoteRow\n","import React, { useState } from 'react'\nimport {\n  AutoRenewIcon,\n  Card,\n  CardHeader,\n  ChevronDownIcon,\n  Flex,\n  Heading,\n  Button,\n  ChevronUpIcon,\n  Text,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport orderBy from 'lodash/orderBy'\nimport { useTranslation } from 'contexts/Localization'\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\nimport { useGetVotingStateLoadingStatus } from 'state/hooks'\nimport VotesLoading from '../components/Proposal/VotesLoading'\nimport VoteRow from '../components/Proposal/VoteRow'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from '../components/Proposal/Row'\n\nconst VOTES_PER_VIEW = 20\n\ninterface VotesProps {\n  votes: Vote[]\n}\n\nconst parseVotePower = (incomingVote: Vote) => {\n  return parseFloat(incomingVote?.metadata?.votingPower)\n}\n\nconst Votes: React.FC<VotesProps> = ({ votes }) => {\n  const [showAll, setShowAll] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const orderedVotes = orderBy(votes, [parseVotePower, 'created'], ['desc', 'desc'])\n  const displayVotes = showAll ? orderedVotes : orderedVotes.slice(0, VOTES_PER_VIEW)\n  const voteStatus = useGetVotingStateLoadingStatus()\n  const isFinished = voteStatus === VotingStateLoadingStatus.IDLE\n\n  const handleClick = () => {\n    setShowAll(!showAll)\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\" scale=\"md\">\n            {t('Votes (%count%)', { count: votes.length.toLocaleString() })}\n          </Heading>\n          {!isFinished && <AutoRenewIcon spin width=\"22px\" />}\n        </Flex>\n      </CardHeader>\n      {!isFinished && <VotesLoading />}\n\n      {isFinished && displayVotes.length > 0 && (\n        <>\n          <Row>\n            <AddressColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Voter')}\n              </Text>\n            </AddressColumn>\n            <ChoiceColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Decision')}\n              </Text>\n            </ChoiceColumn>\n            <VotingPowerColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Vote Weight')}\n              </Text>\n            </VotingPowerColumn>\n          </Row>\n          {displayVotes.map((vote) => {\n            const isVoter = account && vote.voter.toLowerCase() === account.toLowerCase()\n            return <VoteRow key={vote.id} vote={vote} isVoter={isVoter} />\n          })}\n          <Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n            <Button\n              width=\"100%\"\n              onClick={handleClick}\n              variant=\"text\"\n              endIcon={\n                showAll ? (\n                  <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                ) : (\n                  <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                )\n              }\n              disabled={!isFinished}\n            >\n              {showAll ? t('Hide') : t('See All')}\n            </Button>\n          </Flex>\n        </>\n      )}\n\n      {isFinished && displayVotes.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n          <Heading as=\"h5\">{t('No votes found')}</Heading>\n        </Flex>\n      )}\n    </Card>\n  )\n}\n\nexport default Votes\n","import React, { useEffect } from 'react'\nimport { ArrowBackIcon, Box, Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link, useParams } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport { ProposalState, VotingStateLoadingStatus } from 'state/types'\nimport { useGetProposal, useGetVotingStateLoadingStatus, useGetVotes, useGetProposalLoadingStatus } from 'state/hooks'\nimport { fetchProposal, fetchVotes, verifyVotes } from 'state/voting'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport ReactMarkdown from 'components/ReactMarkdown'\nimport PageLoader from 'components/PageLoader'\nimport { isCoreProposal } from '../helpers'\nimport { ProposalStateTag, ProposalTypeTag } from '../components/Proposals/tags'\nimport Layout from '../components/Layout'\nimport Details from './Details'\nimport Results from './Results'\nimport Vote from './Vote'\nimport Votes from './Votes'\n\nconst Proposal = () => {\n  const { id }: { id: string } = useParams()\n  const proposal = useGetProposal(id)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const votes = useGetVotes(id)\n  const voteLoadingStatus = useGetVotingStateLoadingStatus()\n  const proposalLoadingStatus = useGetProposalLoadingStatus()\n  const hasAccountVoted = account && votes.some((vote) => vote.voter.toLowerCase() === account.toLowerCase())\n  const { id: proposalId = null, snapshot = null } = proposal ?? {}\n  const isPageLoading =\n    voteLoadingStatus === VotingStateLoadingStatus.LOADING || proposalLoadingStatus === VotingStateLoadingStatus.LOADING\n\n  useEffect(() => {\n    dispatch(fetchProposal(id))\n  }, [id, dispatch])\n\n  // We have to wait for the proposal to load before fetching the votes because we need to include the snapshot\n  useEffect(() => {\n    const getVotes = async () => {\n      await dispatch(fetchVotes({ proposalId, block: Number(snapshot) }))\n      dispatch(verifyVotes({ proposalId, snapshot }))\n    }\n\n    if (proposalId && snapshot) {\n      getVotes()\n    }\n  }, [proposalId, snapshot, dispatch])\n\n  if (!proposal) {\n    return <PageLoader />\n  }\n\n  return (\n    <Container py=\"40px\">\n      <Box mb=\"40px\">\n        <Button as={Link} to=\"/voting\" variant=\"text\" startIcon={<ArrowBackIcon color=\"primary\" width=\"24px\" />} px=\"0\">\n          {t('Back to Vote Overview')}\n        </Button>\n      </Box>\n      <Layout>\n        <Box>\n          <Box mb=\"32px\">\n            <Flex alignItems=\"center\" mb=\"8px\">\n              <ProposalStateTag proposalState={proposal.state} />\n              <ProposalTypeTag isCoreProposal={isCoreProposal(proposal)} ml=\"8px\" />\n            </Flex>\n            <Heading as=\"h1\" scale=\"xl\" mb=\"16px\">\n              {proposal.title}\n            </Heading>\n            <Box>\n              <ReactMarkdown>{proposal.body}</ReactMarkdown>\n            </Box>\n          </Box>\n          {!isPageLoading && !hasAccountVoted && proposal.state === ProposalState.ACTIVE && (\n            <Vote proposal={proposal} mb=\"16px\" />\n          )}\n          <Votes votes={votes} />\n        </Box>\n        <Box>\n          <Details proposal={proposal} />\n          <Results choices={proposal.choices} votes={votes} />\n        </Box>\n      </Layout>\n    </Container>\n  )\n}\n\nexport default Proposal\n","import BigNumber from 'bignumber.js'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { SNAPSHOT_HUB_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Proposal, ProposalState, ProposalType, Vote } from 'state/types'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { ADMIN_ADDRESS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config'\n\nexport const isCoreProposal = (proposal: Proposal) => {\n  return proposal.author.toLowerCase() === ADMIN_ADDRESS.toLowerCase()\n}\n\nexport const filterProposalsByType = (proposals: Proposal[], proposalType: ProposalType) => {\n  switch (proposalType) {\n    case ProposalType.COMMUNITY:\n      return proposals.filter((proposal) => !isCoreProposal(proposal))\n    case ProposalType.CORE:\n      return proposals.filter((proposal) => isCoreProposal(proposal))\n    case ProposalType.ALL:\n    default:\n      return proposals\n  }\n}\n\nexport const filterProposalsByState = (proposals: Proposal[], state: ProposalState) => {\n  return proposals.filter((proposal) => proposal.state === state)\n}\n\nexport interface Message {\n  address: string\n  msg: string\n  sig: string\n}\n\n/**\n * Generates metadata required by snapshot to validate payload\n */\nexport const generateMetaData = () => {\n  return {\n    plugins: {},\n    network: 56,\n    strategies: [{ name: 'cake', params: { symbol: 'CAKE', address: getCakeAddress(), decimals: 18 } }],\n  }\n}\n\n/**\n * Returns data that is required on all snapshot payloads\n */\nexport const generatePayloadData = () => {\n  return {\n    version: SNAPSHOT_VERSION,\n    timestamp: (Date.now() / 1e3).toFixed(),\n    space: PANCAKE_SPACE,\n  }\n}\n\n/**\n * General function to send commands to the snapshot api\n */\nexport const sendSnaphotData = async (message: Message) => {\n  const response = await fetch(SNAPSHOT_HUB_API, {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error?.error_description)\n  }\n\n  const data = await response.json()\n  return data\n}\n\nexport const getVotingPower = async (account: string, poolAddresses: string[], block?: number) => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/power`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      address: account,\n      block: blockNumber,\n      poolAddresses,\n    }),\n  })\n  const data = await response.json()\n  return data.data\n}\n\nexport const calculateVoteResults = (votes: Vote[]): { [key: string]: Vote[] } => {\n  return votes.reduce((accum, vote) => {\n    const choiceText = vote.proposal.choices[vote.choice - 1]\n\n    return {\n      ...accum,\n      [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote],\n    }\n  }, {})\n}\n\nexport const getTotalFromVotes = (votes: Vote[]) => {\n  return votes.reduce((accum, vote) => {\n    const power = new BigNumber(vote.metadata?.votingPower)\n    return accum.plus(power)\n  }, BIG_ZERO)\n}\n","export const PROPOSALS_TO_SHOW = 10\nexport const ADMIN_ADDRESS = '0x6eaf1b33b8672c5dc40aB8f4bA3A0111723126c7'\nexport const IPFS_GATEWAY = 'https://gateway.ipfs.io/ipfs'\nexport const SNAPSHOT_VERSION = '0.1.3'\nexport const PANCAKE_SPACE = 'cake.eth'\nexport const VOTE_THRESHOLD = 10\n","/**\n * Truncates a wallet's address\n */\nconst truncateWalletAddress = (address: string, startLength = 4, endLength = 4) => {\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\n}\n\nexport default truncateWalletAddress\n","import React from 'react'\nimport { TagProps } from '@pancakeswap/uikit'\nimport { ClosedTag, CommunityTag, CoreTag, SoonTag, VoteNowTag } from 'components/Tags'\nimport { ProposalState } from 'state/types'\n\ninterface ProposalStateTagProps extends TagProps {\n  proposalState: ProposalState\n}\n\nexport const ProposalStateTag: React.FC<ProposalStateTagProps> = ({ proposalState, ...props }) => {\n  if (proposalState === ProposalState.ACTIVE) {\n    return <VoteNowTag {...props} />\n  }\n\n  if (proposalState === ProposalState.PENDING) {\n    return <SoonTag {...props} />\n  }\n\n  return <ClosedTag {...props} />\n}\n\ninterface ProposalTypeTagProps extends TagProps {\n  isCoreProposal: boolean\n}\n\nexport const ProposalTypeTag: React.FC<ProposalTypeTagProps> = ({ isCoreProposal, ...props }) => {\n  if (isCoreProposal) {\n    return <CoreTag {...props} />\n  }\n\n  return <CommunityTag {...props} />\n}\n","import React from 'react'\nimport { Box, BoxProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const VotingBox = styled.div`\n  align-items: center;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 12px;\n  display: flex;\n  height: 64px;\n  justify-content: space-between;\n  margin-bottom: 24px;\n  padding: 0 16px;\n`\n\nexport const ModalInner: React.FC<BoxProps> = (props) => {\n  return <Box mb=\"24px\" maxWidth=\"320px\" {...props} />\n}\n","import styled from 'styled-components'\n\nconst Layout = styled.div`\n  align-items: start;\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: minmax(0, 1fr);\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    grid-template-columns: 1fr 332px;\n  }\n`\n\nexport default Layout\n","import React from 'react'\nimport { Text, Flex } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { VotingBox, ModalInner } from './styles'\n\ninterface DetailsViewProps {\n  total: BigNumber\n  cakeBalance: BigNumber\n  cakeVaultBalance: BigNumber\n  cakePoolBalance: BigNumber\n  poolsBalance: BigNumber\n  cakeBnbLpBalance: BigNumber\n}\n\nconst DetailsView: React.FC<DetailsViewProps> = ({\n  total,\n  cakeBalance,\n  cakeVaultBalance,\n  cakePoolBalance,\n  poolsBalance,\n  cakeBnbLpBalance,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <ModalInner mb=\"0\">\n      <Text as=\"p\" mb=\"24px\" fontSize=\"14px\" color=\"textSubtle\">\n        {t(\n          'Your voting power is determined by the amount of TOCO you held at the block detailed below. TOCO held in other places does not contribute to your voting power.',\n        )}\n      </Text>\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\n        {t('Overview')}\n      </Text>\n      <VotingBox>\n        <Text color=\"secondary\">{t('Your Voting Power')}</Text>\n        <Text bold fontSize=\"20px\">\n          {total.toFormat(3)}\n        </Text>\n      </VotingBox>\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\n        {t('Your TOCO Held Now')}\n      </Text>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Wallet')}\n        </Text>\n        <Text textAlign=\"right\">{cakeBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Manual TOCO Pool')}\n        </Text>\n        <Text textAlign=\"right\">{cakePoolBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Auto TOCO Pool')}\n        </Text>\n        <Text textAlign=\"right\">{cakeVaultBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Other TOCO Pools')}\n        </Text>\n        <Text textAlign=\"right\">{poolsBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('CAKE BNB LP')}\n        </Text>\n        <Text textAlign=\"right\">{cakeBnbLpBalance.toFormat(3)}</Text>\n      </Flex>\n    </ModalInner>\n  )\n}\n\nexport default DetailsView\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getActivePools } from 'utils/calls'\nimport { getAddress } from 'utils/addressHelpers'\nimport { simpleRpcProvider } from 'utils/providers'\nimport BigNumber from 'bignumber.js'\nimport { getVotingPower } from '../helpers'\n\ninterface State {\n  verificationHash: string\n  cakeBalance: BigNumber\n  cakeVaultBalance: BigNumber\n  cakePoolBalance: BigNumber\n  poolsBalance: BigNumber\n  cakeBnbLpBalance: BigNumber\n  total: BigNumber\n}\n\nconst initialState: State = {\n  verificationHash: null,\n  cakeBalance: BIG_ZERO,\n  cakeVaultBalance: BIG_ZERO,\n  cakePoolBalance: BIG_ZERO,\n  poolsBalance: BIG_ZERO,\n  cakeBnbLpBalance: BIG_ZERO,\n  total: BIG_ZERO,\n}\n\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\n  const { account } = useWeb3React()\n  const [votingPower, setVotingPower] = useState(initialState)\n  const [isLoading, setIsLoading] = useState(!!account)\n\n  useEffect(() => {\n    const fetchVotingPower = async () => {\n      setIsLoading(true)\n\n      try {\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n        const eligiblePools = await getActivePools(blockNumber)\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\n        const {\n          cakeBalance,\n          cakeBnbLpBalance,\n          cakePoolBalance,\n          total,\n          poolsBalance,\n          cakeVaultBalance,\n          verificationHash,\n        } = await getVotingPower(account, poolAddresses, blockNumber)\n\n        if (isActive) {\n          setVotingPower((prevVotingPower) => ({\n            ...prevVotingPower,\n            verificationHash,\n            cakeBalance: new BigNumber(cakeBalance),\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\n            cakePoolBalance: new BigNumber(cakePoolBalance),\n            poolsBalance: new BigNumber(poolsBalance),\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\n            total: new BigNumber(total),\n          }))\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    if (account && isActive) {\n      fetchVotingPower()\n    }\n  }, [account, block, setVotingPower, isActive, setIsLoading])\n\n  return { ...votingPower, isLoading }\n}\n\nexport default useGetVotingPower\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { NormalComponents, SpecialComponents } from 'react-markdown/src/ast-to-react'\nimport styled from 'styled-components'\n\nconst Table = styled.table`\n  margin-bottom: 32px;\n  margin-top: 32px;\n  width: 100%;\n\n  td,\n  th {\n    padding: 8px;\n  }\n`\n\nconst ThemedComponent = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  margin-bottom: 16px;\n  margin-top: 16px;\n\n  li {\n    margin-bottom: 8px;\n  }\n`\n\nconst Pre = styled.pre`\n  color: ${({ theme }) => theme.colors.text};\n  margin-bottom: 16px;\n  margin-top: 16px;\n  max-width: 100%;\n  overflow-x: auto;\n`\n\nconst Title = (props) => {\n  return <Heading as=\"h4\" scale=\"lg\" my=\"16px\" {...props} />\n}\n\nconst markdownComponents: Partial<NormalComponents & SpecialComponents> = {\n  h1: Title,\n  h2: Title,\n  h3: Title,\n  h4: Title,\n  h5: Title,\n  h6: Title,\n  p: (props) => {\n    return <Text as=\"p\" my=\"16px\" {...props} />\n  },\n  table: Table,\n  ol: (props) => {\n    return <ThemedComponent as=\"ol\" {...props} />\n  },\n  ul: (props) => {\n    return <ThemedComponent as=\"ul\" {...props} />\n  },\n  pre: Pre,\n}\n\nexport default markdownComponents\n","import React from 'react'\nimport ReactMarkdownLib, { ReactMarkdownOptions } from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport markdownComponents from './styles'\n\nconst ReactMarkdown: React.FC<ReactMarkdownOptions> = (props) => {\n  return <ReactMarkdownLib remarkPlugins={[gfm]} components={markdownComponents} {...props} />\n}\n\nexport default ReactMarkdown\n"],"sourceRoot":""}